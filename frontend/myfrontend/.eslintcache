[{"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js":"1","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js":"2","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js":"3","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js":"4","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js":"5","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\DeletePermissionContext.js":"6","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js":"7","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js":"8","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js":"9","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js":"10","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js":"11","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userRoutes.js":"12","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js":"13","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js":"14","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js":"15","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js":"16","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js":"17","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js":"18","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js":"19","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\ContactManagement.js":"20","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js":"21","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js":"22","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js":"23","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js":"24","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js":"25","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js":"26","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogoPage.js":"27","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js":"28","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js":"29","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js":"30","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reducers\\DeletePermissionReducer.js":"31","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SideBar.js":"32","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js":"33","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js":"34","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js":"35","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js":"36","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js":"37","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js":"38","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js":"39","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js":"40","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js":"41","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js":"42","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js":"43","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js":"44","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js":"45","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js":"46","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js":"47","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js":"48","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\DeleteMsg.js":"49","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Settings.js":"50"},{"size":1524,"mtime":1624695955336,"results":"51","hashOfConfig":"52"},{"size":375,"mtime":1620755202368,"results":"53","hashOfConfig":"52"},{"size":4405,"mtime":1625749479064,"results":"54","hashOfConfig":"52"},{"size":3703,"mtime":1624775176528,"results":"55","hashOfConfig":"52"},{"size":4238,"mtime":1625749437634,"results":"56","hashOfConfig":"52"},{"size":729,"mtime":1623064471481,"results":"57","hashOfConfig":"52"},{"size":4772,"mtime":1625732574899,"results":"58","hashOfConfig":"52"},{"size":11683,"mtime":1623944270147,"results":"59","hashOfConfig":"52"},{"size":8174,"mtime":1625749430996,"results":"60","hashOfConfig":"52"},{"size":453,"mtime":1620755202332,"results":"61","hashOfConfig":"52"},{"size":12275,"mtime":1625389270056,"results":"62","hashOfConfig":"52"},{"size":484,"mtime":1620755202344,"results":"63","hashOfConfig":"52"},{"size":1601,"mtime":1624775200839,"results":"64","hashOfConfig":"52"},{"size":4865,"mtime":1625750509028,"results":"65","hashOfConfig":"52"},{"size":8833,"mtime":1625749511777,"results":"66","hashOfConfig":"52"},{"size":3893,"mtime":1620755202312,"results":"67","hashOfConfig":"52"},{"size":7992,"mtime":1620755202338,"results":"68","hashOfConfig":"52"},{"size":4158,"mtime":1620755202330,"results":"69","hashOfConfig":"52"},{"size":12555,"mtime":1625595856280,"results":"70","hashOfConfig":"52"},{"size":3324,"mtime":1625734410023,"results":"71","hashOfConfig":"52"},{"size":4974,"mtime":1624878953683,"results":"72","hashOfConfig":"52"},{"size":13542,"mtime":1625595886512,"results":"73","hashOfConfig":"52"},{"size":4832,"mtime":1624879229789,"results":"74","hashOfConfig":"52"},{"size":3429,"mtime":1622654193075,"results":"75","hashOfConfig":"52"},{"size":783,"mtime":1624777715268,"results":"76","hashOfConfig":"52"},{"size":2941,"mtime":1625739263691,"results":"77","hashOfConfig":"52"},{"size":864,"mtime":1623942467802,"results":"78","hashOfConfig":"52"},{"size":679,"mtime":1622572690008,"results":"79","hashOfConfig":"52"},{"size":873,"mtime":1622549479404,"results":"80","hashOfConfig":"52"},{"size":742,"mtime":1624777948716,"results":"81","hashOfConfig":"52"},{"size":192,"mtime":1623065594863,"results":"82","hashOfConfig":"52"},{"size":3236,"mtime":1625564520446,"results":"83","hashOfConfig":"52"},{"size":994,"mtime":1622009599503,"results":"84","hashOfConfig":"52"},{"size":593,"mtime":1625750489045,"results":"85","hashOfConfig":"52"},{"size":2341,"mtime":1620755202296,"results":"86","hashOfConfig":"52"},{"size":425,"mtime":1620755202377,"results":"87","hashOfConfig":"52"},{"size":1137,"mtime":1620755202297,"results":"88","hashOfConfig":"52"},{"size":308,"mtime":1620755202381,"results":"89","hashOfConfig":"52"},{"size":4371,"mtime":1624465851093,"results":"90","hashOfConfig":"52"},{"size":284,"mtime":1620755202309,"results":"91","hashOfConfig":"52"},{"size":268,"mtime":1620755202308,"results":"92","hashOfConfig":"52"},{"size":1643,"mtime":1625750530054,"results":"93","hashOfConfig":"52"},{"size":2655,"mtime":1624465851099,"results":"94","hashOfConfig":"52"},{"size":6949,"mtime":1624465850995,"results":"95","hashOfConfig":"52"},{"size":1894,"mtime":1624875945651,"results":"96","hashOfConfig":"52"},{"size":3817,"mtime":1624875756830,"results":"97","hashOfConfig":"52"},{"size":4023,"mtime":1625725598049,"results":"98","hashOfConfig":"52"},{"size":7793,"mtime":1624875161025,"results":"99","hashOfConfig":"52"},{"size":2792,"mtime":1625749516577,"results":"100","hashOfConfig":"52"},{"size":3569,"mtime":1625725615511,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1rylyem",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"158","usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"104"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"104"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js",[],["226","227"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js",["228","229"],"import React ,{createContext, useEffect,useState} from 'react'\r\nimport chatservice from \"../services/ChatService\"\r\nimport userservice from \"../services/UserService\"\r\n//import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const MyChatsContext = createContext();\r\nexport function MyChatsProvider({userId,children}) {\r\n    const [chatRecipients,setChatRecipients] = useState([])\r\n    let recData = []\r\n    let recMsgs = []\r\n    let msgType = []\r\n    let recName = []\r\n    let recId=[]\r\n    let imgUrl =[]\r\n    useEffect(()=>{\r\n        //userId.current = localStorage.getItem(\"userId\")\r\n        if(userId !== undefined){\r\n        getRecData(userId,undefined)\r\n        //console.log(userId)\r\n        }\r\n        console.log(\"undefined\")\r\n        \r\n    },[userId])\r\n\r\n    const getRecData = (uId)=>{\r\n         recData = []; recName =[]; recMsgs = []; msgType = []; imgUrl=[]; recId=[]\r\n        //console.log(\"in getdata\")\r\n        chatservice.getChatRecipients(uId).then((data)=>{    \r\n            if(data.length>0){\r\n                //console.log(\"data getchat\",data)\r\n                /* dataFromDb.push(data)\r\n                console.log(\"data from db getchat\",dataFromDb) */\r\n                data.map((rec) =>{\r\n                    //console.log('single rec',rec)\r\n                    return recData.push(rec)\r\n                })\r\n                console.log(\"rec data\",recData)\r\n                recData = Array.from(new Set(recData));\r\n                console.log(\"rec data updated\",recData)\r\n                setChatRecipients((r)=>{\r\n                    r.Rname=recData\r\n                    //console.log(chatRecipients)\r\n                    return r\r\n                })\r\n                chatRecipients.Rname.map((r)=>{\r\n                    //console.log(\"r\",r)\r\n                    chatservice.getLastMsg(uId, r)\r\n                    .then((data1)=>{\r\n                        //console.log(\"data\",data1.type)\r\n                        recMsgs.push(data1.lastMsg)\r\n                        msgType.push(data1.type)\r\n                        //return {recMsgs,msgType}\r\n                    })\r\n                    .catch((err)=>console.log(err))\r\n\r\n                    userservice.getUserByEmail(r).then((data2)=>{\r\n                        //console.log(\"data 2\",data2)\r\n                        recId.push(data2[0]._id)\r\n                        imgUrl.push(data2[0].profileImg)\r\n                        recName.push(data2[0].firstName+' '+data2[0].lastName)\r\n                        setChatRecipients((r)=>{\r\n                            r.lastMsg = recMsgs\r\n                            r.msgType = msgType\r\n                            r.recId = recId\r\n                            r.imgUrl= imgUrl\r\n                            r.name = recName\r\n                            console.log(chatRecipients)\r\n                            return r\r\n                        })\r\n                       /*  if(cb === undefined)\r\n                            console.log(\"do nothing\")\r\n                        else\r\n                            cb() */\r\n                    }).catch((err)=>console.log(err))\r\n                })\r\n                \r\n            }\r\n            else\r\n                console.log(\"no data\")\r\n            \r\n            })\r\n            .catch((err)=>console.log(err))\r\n            return chatRecipients\r\n    }\r\n\r\n    /* useEffect(()=>{\r\n        \r\n    },[chatRecipients]) */\r\n    //getRecData()\r\n  const value = {\r\n      chatRecipients : chatRecipients,\r\n      getRecData : getRecData,\r\n      setRecipients : setChatRecipients,\r\n      /* setuuIdFunc : setuuId,\r\n      uuId : uuId */\r\n  }\r\n  return (\r\n    <MyChatsContext.Provider value={value}>\r\n      {children}\r\n    </MyChatsContext.Provider>\r\n  )\r\n}\r\n\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js",["230","231"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\DeletePermissionContext.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js",["232","233","234","235","236","237"],"import React, { useEffect, useContext,useRef } from \"react\";\r\nimport Header from \"./Header\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport PageTitle from \"./pageTitle\";\r\n\r\nconst UserDashboard = ({uuId}) => {\r\n  //const {chatRecipients,setRecipients,getRecData} = useContext(MyChatsContext);\r\n  //const [obj, setObj] = useState({})\r\n  const myId= isAuthenticated()._id;\r\n // const [count,setCount]= useState(0)\r\n  //const [friendCount,setFriendCount]=useState(0);\r\n  //let showBtn = useRef(0)\r\n  let userEmail = useRef()\r\n  let history = useHistory()\r\n  let counte=0;\r\n  userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n  const {clientSocket,setSocket,messageEvent,roomJoin,friendReq,getRequest,frndcounter,msgCounter,msgNotify,acceptRejectCounter} = useContext(SocketContext);\r\nuseEffect(()=>msgNotify,[])\r\n  useEffect(()=>acceptRejectCounter,[])\r\n  let clientSocket1 = useRef()\r\n   console.log(msgCounter);\r\n   window.onload = () => {\r\n       friendReq()\r\n       acceptRejectCounter()\r\n       msgNotify()\r\n     messageEvent()\r\n     getRequest()\r\n    roomJoin(myId)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n  setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n        \r\n      });\r\n      return s;\r\n    })\r\n  };\r\n   useEffect(()=>{\r\n    if(clientSocket!==undefined){\r\n        console.log(clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }\r\n   },[],[clientSocket])\r\n\r\n   useEffect (()=>{\r\n    //friendReq()\r\n     messageEvent()\r\n   },[]);\r\n\r\n   useEffect (()=>{\r\n    roomJoin(myId)\r\n  },[]);\r\n\r\n  return (<div style={{height:\"100vh\"}} className=\"back_divs dashboardDiv\">\r\n    <Header/>\r\n    <PageTitle name={\"Dashboard\"}/>\r\n           <Grid container>\r\n               <Grid item xs={1} sm={3} md={2}  ></Grid>\r\n               <Grid item xs={10} sm={6} md={8} >\r\n                \r\n          <div className=\"mySettings\"> \r\n          <i class=\"fas fa-user-cog mySettingsicon\"  ></i>\r\n         <Button className= \"loginbtn myDashboardBtn\"\r\n           variant=\"contained\" \r\n            fullWidth\r\n            size=\"large\"\r\n             onClick={event =>  history.push('/my-account-settings/'+myId)}>\r\n          Account Settings\r\n            </Button>\r\n            </div>\r\n{\r\n          frndcounter >= 1 ?\r\n          <div className=\"myContacts\"> \r\n          <i class=\"fas fa-address-book myContacticon\"  ></i>\r\n           <Button className= \"loginbtn myDashboardBtn\"\r\n           variant=\"contained\"\r\n            size=\"large\"\r\n           \r\n            fullWidth\r\n             onClick={event =>  history.push('/my-contact-list/'+myId)}>\r\n               \r\n            Contacts\r\n            <Badge badgeContent={frndcounter } className=\"msgCounter\" color=\"Secondary\">\r\n            </Badge>\r\n            </Button>\r\n            </div>\r\n          :\r\n          <div className=\"myContacts\"> \r\n           <i class=\"fas fa-address-book myContacticon\"  ></i>\r\n         <Button className= \"loginbtn myDashboardBtn\"\r\n           variant=\"contained\" \r\n            fullWidth\r\n            size=\"large\"\r\n             onClick={event =>  history.push('/my-contact-list/'+myId)}>\r\n            Contacts\r\n            </Button>\r\n            </div>\r\n        }    \r\n         \r\n            {\r\n          msgCounter >= 1?\r\n          <div className=\"myChats\"> \r\n           <i className=\"fas fa-comments myChaticon\"  ></i>\r\n           <Button className= \"loginbtn myDashboardBtn\"\r\n           variant=\"contained\"\r\n            size=\"large\"\r\n           \r\n            fullWidth\r\n             onClick={event =>  history.push('/mychats/'+myId)}>\r\n               \r\n            Chats\r\n            <Badge badgeContent={msgCounter} className=\"msgCounter\" color=\"Secondary\">\r\n            </Badge>\r\n            </Button>\r\n            </div>\r\n          :\r\n          <div className=\"myChats\"> \r\n           <i className=\"fas fa-comments myChaticon\"  ></i>\r\n         <Button className= \"loginbtn myDashboardBtn\"\r\n           variant=\"contained\" \r\n            fullWidth\r\n            size=\"large\"\r\n             onClick={event =>  history.push('/mychats/'+myId)}>\r\n            Chats\r\n            </Button>\r\n            </div>\r\n        } \r\n       \r\n        </Grid>\r\n        <Grid item xs={1} sm={3} md={2} ></Grid>\r\n        </Grid>\r\n            \r\n            </div>)\r\n};\r\n\r\nexport default UserDashboard;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js",["238"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  IconButton,\r\n  Typography,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  Radio,\r\n  Paper,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { signup } from \"../api/auth\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport LogoPage from \"./LogoPage\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   \r\n  textfield: {\r\n     marginTop: theme.spacing(2.5),\r\n  },\r\n  margin:{\r\n         marginTop: theme.spacing(2.5),\r\n  }\r\n   \r\n}));\r\nconst SignUp = () => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    if (isAuthenticated() && isAuthenticated().role === 1)\r\n      history.push(\"/dashboard\");\r\n    else if (isAuthenticated() && isAuthenticated().role === 0)\r\n      history.push(\"/dashboard\");\r\n  }, [history]);\r\n  const [values, setValues] = useState({\r\n    firstName: \"\",\r\n    lastName:\"\",\r\n    email: \"\",\r\n    gender:\"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    gender,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   \r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleTextChange = (evt) => {\r\n    setValues({\r\n      ...values,\r\n      [evt.target.name]: evt.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n  const Register = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(firstName) ||\r\n      isEmpty(lastName) ||\r\n      isEmpty(email) ||\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)||isEmpty(gender)) \r\n      {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n      } else if (!isEmail(email)) {\r\n      setValues({ ...values, errorMessage: \"Invalid Email\" });\r\n      } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Password do not matched\" });\r\n      } else {\r\n      const { firstName,lastName, email, password ,gender} = values;\r\n      const data = { firstName,lastName,  email, password ,gender};\r\n      setValues({ ...values, loading: true });\r\n      signup(data)\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            firstName: \"\",\r\n            lastName:\"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            gender:\"\",\r\n            errorMessage: false,\r\n            successMsg: response.data.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setValues({\r\n            ...values,\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n    \r\n  const SignUpForm = () => (\r\n    <div className=\"signup-container\">\r\n      <Grid container>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper  className=\"Login-container\" style={{padding: '30px 30px'}} >\r\n              <Grid container style={{textAlign:\"center\"}}>\r\n          <Grid item xs={6} >\r\n            <Link className=\"header\"  to=\"/login\">Sign In</Link>      \r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Link className=\"active-header\" to=\"/signup\">Sign Up</Link>\r\n          </Grid>\r\n\r\n        </Grid>\r\n          <TextField\r\n            className={classes.textfield}\r\n            id=\"filled-start-adornment\"\r\n             \r\n            value={values.firstName}\r\n            label= {\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> firstName </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"}}>*</Typography>\r\n                  </div>\r\n            }\r\n            name=\"firstName\"\r\n            \r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <AccountCircleIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n          />\r\n           <TextField\r\n            className={classes.textfield}\r\n            id=\"filled-start-adornment1\"\r\n            value={values.lastName}\r\n            label= {\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> lastName </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"}}>*</Typography>\r\n                  </div>\r\n            }\r\n            name=\"lastName\"\r\n            \r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <AccountCircleIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n          />\r\n          <TextField\r\n            className={classes.textfield}\r\n            label= {\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\" }}> Email Address </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"  }}>*</Typography>\r\n                  </div>\r\n            }\r\n            id=\"filled-start-adornment1\"\r\n            \r\n            name=\"email\"\r\n            value={values.email}\r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <EmailIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n          />\r\n              \r\n        <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    <FormControl component=\"fieldset\" className={classes.margin}>\r\n      <FormLabel component=\"legend\">  \r\n            <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\", fontSize:\"0.9rem\",marginLeft:\"0.4rem\"  }}> Gender</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n             </FormLabel>\r\n      <RadioGroup aria-label=\"gender\" name=\"gender1\" style={{display:'initial',marginLeft:\"4rem\"}} value={values.gender} onChange={handleChange('gender')}>\r\n        <FormControlLabel value=\"female\" control={<Radio style={{color:cyan[900]}} />} label=\"Female\" />\r\n        <FormControlLabel value=\"male\" control={<Radio style={{color:cyan[900]}}/>} label=\"Male\" />\r\n        <FormControlLabel value=\"other\" control={<Radio style={{color:cyan[900]}} />} label=\"Other\" />\r\n      </RadioGroup>\r\n    </FormControl>\r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n             \r\n              padding: \"0.5rem\",}}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={Register}\r\n          >\r\n            Next\r\n          </Button>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"signup_div\">\r\n      {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <LogoPage className=\"title\" name= {\"TalkSee\"}/>\r\n      {SignUpForm()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js",["239","240","241","242","243","244","245","246"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js",["247","248","249","250","251","252","253","254"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PageTitle from \"../FrontendComponents/components/pageTitle\";\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\nimport \"./chat.css\";\r\nimport { Grid, Hidden } from \"@material-ui/core\";\r\nimport SideBar from \"../FrontendComponents/components/SideBar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n}));\r\nconst AllChats = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { clientSocket } = useContext(SocketContext);\r\n   const [loading,setLoading]=useState(false);\r\n  let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n  const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n  let emails = useRef([]);\r\n  //let usersData = useRef([])\r\n  const [usersData, setData] = useState({uData:[]});\r\n  const [lastMsg, setLastMsg] = useState({\r\n    msgs: [],\r\n    msgId: [],\r\n    emails: [],\r\n    types: [],\r\n    senders: [],\r\n    time : []\r\n  });\r\n  const [payload, setPayload] = useState()\r\n  //const [recipients, setRecipients] = useState([])\r\n  let roomId = useRef();\r\n  let count = useRef(0);\r\n  let notPresent = useRef(0);\r\n  roomId.current = \"mychats/\" + props.match.params.id;\r\n  let recData = [];\r\n  let recMsgs = [];\r\n  let dummy = [];\r\n let clientSocket1 = useRef()\r\n\r\n  window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n\r\n      });\r\n      return s;\r\n    })\r\n  };\r\n  const getRecData = (uId) => {\r\n    emails.current = []\r\n    lastMsg.msgs = []; lastMsg.msgId = []; lastMsg.emails = []; \r\n    lastMsg.types = []; lastMsg.senders = []; lastMsg.time = []; \r\n    chatservice\r\n      .getChatRecipients(uId)\r\n      .then((data) => {\r\n        if (data.length > 0) {\r\n          //console.log(\"emails before sorting\", data);\r\n          emails.current = data.sort();\r\n          emails.current = Array.from(new Set(emails.current));\r\n          console.log(\"emails after sorting\", emails.current);\r\n          userservice\r\n            .getUserByEmail({ userArray: emails.current })\r\n            .then(\r\n              (datafromdb) => {\r\n              recData = datafromdb;\r\n              //console.log(\"recdata\", recData);\r\n              setData((d) => {//userdta\r\n                d.uData = recData;\r\n                return d;\r\n              });\r\n            });\r\n          // let index = 0\r\n          emails.current.forEach((r, index) => {\r\n            chatservice\r\n              .getLastMsg(uId, r)\r\n              .then((data1) => {\r\n                //console.log(\"data1\", data1);\r\n                if(data1){\r\n                  setLastMsg((msg) => {//lastMsg\r\n                    if (\r\n                      msg.msgs.length >= 1 &&\r\n                      msg.emails.length >= 1 &&\r\n                      msg.types.length >= 1 &&\r\n                      msg.msgId.length >= 1 &&\r\n                      msg.senders.length >= 1\r\n                    ) {\r\n                      let newMsg = [...msg.msgs];\r\n                      let newR = [...msg.emails];\r\n                      let newT = [...msg.types];\r\n                      let id = [...msg.msgId];\r\n                      let sender = [...msg.senders];\r\n                      let newTime = [...msg.time]\r\n                      newMsg = [...newMsg, data1.lastMsg];\r\n                      newR = [...newR, r];\r\n                      newT = [...newT, data1.type];\r\n                      id = [...id, data1.msgId];\r\n                      sender = [...sender, data1.sender];\r\n                      newTime = [...newTime, data1.time]\r\n                      \r\n                      return {\r\n                        ...msg,\r\n                        msgs: newMsg,\r\n                        msgId: id,\r\n                        emails: newR,\r\n                        types: newT,\r\n                        senders: sender,\r\n                        time : newTime\r\n                      };\r\n                    } else {\r\n                      console.log(\"first: \", data1.lastMsg, r);\r\n                      let myMsg =  {\r\n                        msgs: [data1.lastMsg],\r\n                        msgId: [data1.msgId],\r\n                        emails: [r],\r\n                        types: [data1.type],\r\n                        senders: [data1.sender],\r\n                        time : [data1.time]\r\n                      };\r\n                      console.log(\"MY MSG: \",myMsg)\r\n                      return myMsg\r\n                    }\r\n                  });\r\n                }//lastmsg bnd hori\r\nsetLoading(true);\r\n              }\r\n              \r\n              )\r\n              .catch((err) => console.log(err));\r\n          });\r\n\r\n          //setLastMsg(recMsgs)\r\n\r\n          //console.log(\"recipients\",recipients)\r\n        } else console.log(\"no data\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    count.current = 0\r\n    if (clientSocket) {\r\n      clientSocket.emit(\r\n        \"myChatsRoom\",\r\n        { myChatsRoom: roomId.current },\r\n        ({ error, room }) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    //console.log(\"in useEffect 1\");\r\n    getRecData(uId);\r\n    //console.log(\"usersData 1\", usersData);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    if (clientSocket) {\r\n      clientSocket.on(\"newRecipient\", (payload) => {\r\n        setPayload((p)=>{\r\n          return p = payload\r\n        })\r\n      })\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    console.log(\"IN PAYLOAD\")\r\n    if (payload) {\r\n      console.log(\"payload\",payload)\r\n        let index;\r\n\r\n        if (usersData.uData.length !== 0 && lastMsg.msgs.length !== 0) {\r\n          console.log(\"check:\", usersData);\r\n          count.current = 0;\r\n          /* present.current =0\r\n        notPresent.current =0 */\r\n          usersData.uData.forEach((u, indx) => {\r\n            //console.log(\"emails from map\", payload.message.from, u.email);\r\n            if (payload.message.from === u.email) {\r\n              index = indx;\r\n              console.log(\"index: \", index);\r\n              count.current = count.current + 1;\r\n              console.log(\"count: \", count.current)\r\n              \r\n            } else {\r\n              //count.current.current = notPresent.current + 1 ;\r\n              console.log(\"false\");\r\n            }\r\n          });\r\n          if (count.current !== 0) {\r\n            console.log(\"before setRecArray\",lastMsg.msgs)\r\n            console.log(\"in setRecArray\",count.current);\r\n            setRecArray(\r\n              index,\r\n              payload.message\r\n            );\r\n          } else if (count.current === 0) {\r\n            setNewRecipient(\r\n              payload.message\r\n            );\r\n            console.log(\"in setNewArray\",count.current);\r\n          } else console.log(\"nothing \", count.current);\r\n        } else {\r\n          console.log(\"usersData 1\", lastMsg);\r\n        }\r\n      //});\r\n    }\r\n  }, [payload]);\r\n\r\n  const setRecArray = (index, message) => {\r\n    //if(lastMsg)\r\n    console.log(\"Last msg array and index\",lastMsg.msgs, index )\r\n    let items = []\r\n    items = [...lastMsg.msgs];\r\n    let mtypes = [...lastMsg.types]\r\n    let mTime = [...lastMsg.time]\r\n    console.log(\"items before change\", items);\r\n    items[index] = message.messageBody;\r\n    mtypes[index] = message.type\r\n    mTime[index] = message.time\r\n    console.log(\"items\", items);\r\n    setLastMsg((m) => {\r\n      return { ...m, msgs: items,types: mtypes, time: mTime };\r\n      //}\r\n    });\r\n  };\r\n\r\n  const setNewRecipient = (message) => {\r\n    console.log(\"in new chattt\",message.type)\r\n    userservice\r\n      .getUserByEmail({ userEmail: message.from })\r\n      .then((data) => {\r\n        console.log(\"data\",data);\r\n        setData((d) => {\r\n          let obj = { email: message.from, gender : data[0].gender, id : data[0]._id, \r\n                      name : data[0].firstName + ' '+ data[0].lastName,\r\n                      img : data[0].profileImg }\r\n          let uData = [...d.uData]\r\n          uData = [...uData,obj]\r\n          console.log(\"u\",uData)\r\n          return { ...d, uData}\r\n        });\r\n      })\r\n      if(usersData.uData.length !==0){\r\n        console.log(\"not first recipient\")\r\n        /* setLastMsg((msg) => {\r\n          \r\n            let newMsg = [...msg.msgs];\r\n            let newR = [...msg.emails];\r\n            let newT = [...msg.types];\r\n            let sender = [...msg.senders];\r\n            newMsg = [...newMsg, msg];\r\n            newR = [...newR, rec];\r\n            newT = [...newT, type];\r\n            sender = [...sender, rec];\r\n            let myMsg = {\r\n              ...msg,\r\n              msgs: newMsg,\r\n              emails: newR,\r\n              types: newT,\r\n              senders: sender,\r\n            };\r\n            console.log(\"My new Msg\",myMsg)\r\n            return myMsg\r\n          \r\n        });  */\r\n        setLastMsg({msgs: [...lastMsg.msgs,message.messageBody], emails: [...lastMsg.emails,message.from], \r\n                  types:[...lastMsg.types,message.type], senders:[...lastMsg.senders,message.from],\r\n                  time : [...lastMsg.time,message.time ]})\r\n      }\r\n      else{\r\n        console.log(\"first recipient\")\r\n        setLastMsg({msgs: [message.messageBody], emails: [message.from], \r\n                    types:[message.type], senders:[message.from], time:[message.time]})\r\n      }\r\n      \r\n   \r\n      /*chatservice\r\n      .getLastMsg(uId, rec)\r\n      .then((data1) => {\r\n        console.log(\"data new\", data1);\r\n        \r\n          setLastMsg((msg) => {\r\n          let newMsg = [...msg.msgs];\r\n          let newR = [...msg.emails];\r\n          let newT = [...msg.types];\r\n          let id = [...msg.msgId];\r\n          let sender = [...msg.senders];\r\n          newMsg = [...newMsg, data1.lastMsg];\r\n          newR = [...newR, rec];\r\n          newT = [...newT, data1.type];\r\n          id = [...id, data1.msgId];\r\n          sender = [...sender, data1.sender];\r\n          //console.log(\"newMsg: \", newMsg, newR, newT,id,sender);\r\n          return {\r\n            ...msg,\r\n            msgs: newMsg,\r\n            msgId: id,\r\n            emails: newR,\r\n            types: newT,\r\n            senders: sender,\r\n          };\r\n    });\r\n      }).catch((err)=>console.log(err))\r\n      */\r\n    \r\n  };\r\n\r\n  return (\r\n      <div  style={{height:\"100vh\"}} className=\"back_divs\">\r\n        <Grid container>\r\n           <Hidden only={['xs', 'sm']}>\r\n          <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} ><Header/></Grid>\r\n          </Hidden>\r\n       <Grid item xs={12} md={10}>\r\n      <PageTitle name={\"My Chats\"} />\r\n       {loading?\r\n      <div> \r\n      {usersData.uData.length !== 0  && lastMsg.msgs.length !==0? (\r\n        <div>\r\n            <Grid container   style={{marginTop:\"0.9rem\" }}>\r\n          <Grid item xs ={1} md={1}> </Grid>\r\n          <Grid item xs ={10} md={10}>\r\n          <SingleChat recipients={usersData.uData} lastMsg={lastMsg} />\r\n         \r\n        </Grid>\r\n        <Grid item xs ={1} md={1}> </Grid>\r\n        </Grid>\r\n        </div>\r\n      ) : (\r\n        <h5 style={{ textAlign: \"center\" }}>No Chats Yet!</h5>\r\n      )}\r\n      </div>:\r\n      <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    \r\n  </div>\r\n</div>\r\n  }\r\n      </Grid>\r\n       </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default AllChats;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userRoutes.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js",["255"],"import React ,{createContext, useEffect} from 'react'\r\nimport chatservice from '../services/ChatService'\r\n//import {showNotification} from '../components/FrontendComponents/Alerts/showMessage'\r\n//import Notification from '../components/FrontendComponents/Alerts/Notification'\r\nimport { toast } from 'react-toastify';\r\nimport { Zoom } from 'react-toastify';\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({userId,setMsg,children}) =>{\r\n   \r\n    let msg = ''\r\n    useEffect(()=>{\r\n        getUnreadMsgs(userId)\r\n    },[userId])\r\n    const getUnreadMsgs =(email)=>{\r\n        chatservice.offlinemessages(email)\r\n        .then((res)=>{\r\n            if(res.count > 0){\r\n                console.log(\"count\",res.count)\r\n                msg = 'You have '+res.count+ ' new messages!'\r\n                /* elem = (\r\n                    <Notification msg = {msg}/>\r\n                ) */\r\n                //setMsg(msg)\r\n                if(res.info.sender[0] !== userId){\r\n                    console.log(\"sender\",res.info.sender)\r\n                    console.log(\"user\",userId)\r\n                toast.info(msg,{\r\n                position: toast.POSITION.TOP_LEFT,\r\n                transition: Zoom\r\n            })\r\n                }\r\n                else{\r\n                    console.log(\"is sender\")\r\n                }\r\n        \r\n            }\r\n        })\r\n        .catch((err)=>console.log(err))\r\n    }\r\n    \r\n    return (\r\n        <ChatContext.Provider value = {{getUnreadMsgs: getUnreadMsgs}}>\r\n        \r\n            {children}\r\n        </ChatContext.Provider>\r\n    );\r\n}\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js",["256","257","258","259","260","261","262","263","264"],"import React, { useEffect,useRef,useContext,useState } from \"react\";\r\nimport SingleFriend from \"./SingleFriend\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,Hidden,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport {MyChatsContext} from '../../../context/MyChatsContext';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport io from \"socket.io-client\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SideBar from \"./SideBar\";\r\n\r\nconst AllFriends = (props) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [loading,setLoading]=useState(false);\r\n     const [friends, setFriends] =React.useState([]);\r\n     let history = useHistory()\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n      const {setSocket,roomJoin, messageEvent, friendReq} =  useContext(SocketContext);\r\n     let userEmail = useRef()\r\n     userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n\r\n     window.onload = () => {\r\n         friendReq()\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getAllMyFriends = () => \r\n     {\r\n       friendService.getAllFriends(myId)\r\n        .then((data)=>{\r\n         setFriends(data);\r\n        setLoading(true);})\r\n      .catch((err=>{console.log(err)}))\r\n   \r\n     }\r\n    useEffect(()=>{\r\n\r\n      getAllMyFriends()\r\n      \r\n    }, []);\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n     useEffect(()=>{\r\n      //messageEvent()\r\n      \r\n     },[])\r\n\r\n    useEffect(()=>{\r\n      /* if(clientSocket!==null){\r\n        console.log(props.clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:props.clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }  */\r\n    },[])\r\n\r\n     return ( \r\n    <div style={{height:\"100vh\"}} className=\"back_divs\">\r\n      <Grid container>\r\n       <Hidden only={['xs', 'sm']}>\r\n          <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} ><Header/></Grid>\r\n          </Hidden>\r\n           <Grid item xs={12} md={10}>\r\n      <PageTitle name= {\"My Friends\"}/>\r\n    {loading?\r\n      <div> {\r\n      friends.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",fontSize:\"1.4rem\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>You have no TalkSee Friend😞</div>) \r\n        :\r\n        (\r\n          <div>\r\n             \r\n        <Grid container   style={{marginTop:\"0.9rem\", display :\"flex\"}}>\r\n          <Grid item xs ={1} md={1}> </Grid>\r\n          <Grid item xs ={10} md={10}>\r\n            <Grid container   style={{marginBottom:\"1rem\"}}>\r\n          <Grid item xs ={0} md={7}> </Grid>\r\n          <Grid item xs ={12} md={5}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n     \r\n          {\r\n          friends.filter((friend)=>{\r\n             if(searchTerm == \"\") return friend\r\n             else if (friend.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friend\r\n           }).map((friend, index) => (\r\n               <SingleFriend key={index} friend={friend} onRemove={getAllMyFriends} /> )\r\n          )}\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}   md={1}></Grid>\r\n        </Grid>\r\n         </div>)\r\n         \r\n      }\r\n       </div>:\r\n          \r\n       <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    \r\n  </div>\r\n</div>\r\n  }\r\n      </Grid>\r\n  \r\n      </Grid>\r\n \r\n    </div> );\r\n\r\n}\r\nexport default AllFriends;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js",["265","266","267","268","269","270","271","272"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js",["273","274"],"import React, { useState, useEffect } from 'react';\r\nimport accountService from \"../../../services/accountService\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { grey,green, cyan,red} from '@material-ui/core/colors';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport PageTitle from \"./pageTitle\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst Activate = ({ match }) => {\r\n let token1 = match.params.token;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    token: '',\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n  });\r\n   const { firstName,lastName, token, errorMessage, successMsg} = formData;\r\n   let history = useHistory()\r\n  useEffect(() => {\r\n    let token = match.params.token;\r\n    let { firstName } = jwt.decode(token);\r\n    let { lastName } = jwt.decode(token);\r\n    if (token) {\r\n      setFormData({ ...formData, firstName,lastName,  token });  \r\n      accountService.accountActivation({token})\r\n      .then(response => {\r\n        setFormData({\r\n          ...formData,\r\n          errorMessage: false,\r\n          successMsg: response.successMessage,\r\n          firstName: response.firstName,\r\n          lastName: response.lastName,\r\n        });\r\n      })\r\n      .catch(err => {\r\n      setFormData({\r\n          ...formData,\r\n          successMsg: false,\r\n         errorMessage: err.response.data.errorMessage,\r\n          firstName: err.response.data.firstName,\r\n          lastName: err.response.data.lastName,\r\n        });\r\n      });\r\n    }}, [match.params]);\r\n     \r\n  \r\n  const ActivationSuccess=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName +\" \"+lastName}</strong></p>\r\n        <div>  <CheckCircleRoundedIcon \r\n              style = {{ color: green[600],paddingTop:\"0.3rem\" }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > Your account has been successfully verified. Click below to create your profile</span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n              variant=\"contained\"\r\n              className= \"loginbtn\"\r\n              onClick={event =>  history.push('/profile-setup/'+token1)}\r\n             \r\n          >\r\n            Create Profile\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n   const ActivationFailure=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName+\" \"+lastName}</strong></p>\r\n        <div>  <CancelRoundedIcon \r\n              style = {{ color: red[600]  }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > <strong>{errorMessage}</strong> </span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n            variant=\"contained\"\r\n             className= \"loginbtn\"\r\n            onClick={event =>  history.push('/signup')}\r\n             \r\n          >\r\n               Try  Again   \r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n  return (\r\n  <div>\r\n        <PageTitle name= {\"Activation\"}/>\r\n       {errorMessage && ( ActivationFailure())}\r\n       {successMsg && (ActivationSuccess())}\r\n  </div>)\r\n      }\r\nexport default Activate;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js",["275"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport accountService from \"../../../services/accountService\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n import { grey, cyan,indigo} from '@material-ui/core/colors';\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n const useStyles = makeStyles((theme) => ({\r\n  textfield: {\r\n     margin: theme.spacing(1),\r\n  },\r\n   margin:{\r\n     marginTop: \"1.2rem\"\r\n   } \r\n}));\r\n\r\nconst ResetPassword = ({ match }) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [values, setValues] = useState({\r\n    token: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  \r\n   const {\r\n    token,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n\r\n    useEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n    const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   const ResetPasswordBtn = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)\r\n    ) {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n    } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Passwords do not match\" });\r\n    } else {\r\n  \r\n     \r\n      setValues({ ...values, loading: true });\r\n     accountService.resetPassword( { newPassword: password, resetPasswordLink: token})\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n             password: \"\",\r\n            confirmPassword: \"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n     \r\n  const ResetPasswordForm=()=>(\r\n      \r\n    <Grid container >\r\n      <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper style={{padding: '30px 50px'}} >\r\n          <Button  \r\n            className= \"loginbtn\"\r\n            href=\"https://mail.google.com/mail/u/0/#inbox\"\r\n            color=\"primary\"\r\n           style={{marginBottom:\"2rem\" ,paddingLeft:\"0rem\",color:indigo[800]  }}\r\n          >\r\n           <ArrowBackIcon style={{fontWeight:\"bold\",marginRight:\"0.3rem\"}}/> Go Back\r\n          </Button>\r\n             <FormControl className={clsx( classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> New Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    \r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={ResetPasswordBtn}\r\n          >\r\n            Reset Password \r\n          </Button>\r\n          {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n           </Paper>\r\n        </Grid>\r\n     <Grid item xs={1} sm={3} md={4}></Grid>\r\n    </Grid>\r\n       \r\n  );   \r\n  return (\r\n  <div>\r\n        {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <PageTitle name= {\"Reset Password\"}/>\r\n      {ResetPasswordForm()}\r\n      \r\n  </div>)\r\n      }\r\nexport default ResetPassword;\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js",["276","277","278"],"import React, { useState, useEffect } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst ProfileSetup = ( {match}) => {\r\n    const classes = useStyles();\r\n      let history = useHistory();\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n    const [values, setValues] = useState({\r\n    img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n    language:\"\",\r\n    token:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language,token, successMsg, errorMessage,infoMessage, loading } = values;\r\nuseEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       const data = new FormData();\r\n      data.append(\"file\", imageSrc);\r\n      axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n          })\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n   \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data)\r\n         .then(async (response) => {\r\n         setValues({ ...values , errorMessage :\"\", successMsg:\"response.data.successMessage\"})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst SetProfile =()=>{\r\n  accountService.profileSetup({profileImg: img, langPreference: language, token})\r\n .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n            language:\"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n                   <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div>\r\n                 <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div> \r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.label === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => {\r\n                      console.log(e)\r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1.5rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={SetProfile}\r\n            \r\n          >\r\n            Set Profile\r\n          </Button>\r\n                   {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n      </div> \r\n         \r\n     \r\n \r\n\r\n \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n         <div className=\"modal-title\">\r\n        <h3  id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <p style={{color:\"red\"}} ><i>Your picture's quality will be low</i></p>\r\n        </div>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n     <PageTitle name= {\"Profile Setup\"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default ProfileSetup;\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\ContactManagement.js",["279","280"],"import React, { useEffect, useState,useContext  } from \"react\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport Header from \"./Header\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport GroupAddRoundedIcon from '@material-ui/icons/GroupAddRounded';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { Button, Grid, Hidden } from \"@material-ui/core\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport PageTitle from \"./pageTitle\";\r\nimport SideBar from \"./SideBar\";\r\nconst ContactManagement = () => {\r\n    let history = useHistory()\r\n    const {frndcounter}  = useContext(SocketContext);\r\n    const myId= isAuthenticated()._id;\r\n    return(<div div style={{height:\"100vh\"}} className=\"back_divs\">\r\n       \r\n    \r\n     <Grid container>\r\n         <Hidden only={['xs', 'sm']}>\r\n          <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} ><Header/></Grid>\r\n          </Hidden>\r\n          \r\n       \r\n       <Grid item xs={12} md={10}>\r\n            <PageTitle name={\"My Contacts\"}/> \r\n            <Grid container style={{marginTop:\"1.5rem\"}}>\r\n                <Grid item xs={1} md={3}></Grid>\r\n                 <Grid item xs={10} md={6}>\r\n             <Button className= \"loginbtn myFriendsBtn\"\r\n               variant=\"contained\" \r\n            fullWidth\r\n            onClick={event =>  history.push('/all-my-friends/'+myId)}>\r\n              < PeopleAltIcon className='contactManagementIcon'\r\n              color = \"white\"/> My Friends\r\n            </Button>\r\n             {\r\n          frndcounter >= 1?\r\n           <Button className= \"loginbtn friendRequestBtn\"\r\n               variant=\"contained\" \r\n             fullWidth\r\n             onClick={event =>  history.push('/all-friend-requests/'+myId)}>\r\n               <GroupAddRoundedIcon className='contactManagementIcon'\r\n              onClick={event =>  history.push('/all-friend-requests/'+myId)}\r\n              />  \r\n              <Badge badgeContent= {frndcounter} color=\"secondary\" style={{margin:\" -28px 0.8rem 0 -3px\"}}></Badge>\r\n            My Friend Requests\r\n            </Button>\r\n          :\r\n         <Button className= \"loginbtn friendRequestBtn\"\r\n              variant=\"contained\" \r\n            color=\"Secondary\" \r\n            fullWidth\r\n             onClick={event =>  history.push('/all-friend-requests/'+myId)}>\r\n              <GroupAddRoundedIcon className='contactManagementIcon'\r\n              onClick={event =>  history.push('/all-friend-requests/'+myId)}\r\n              />  \r\n              \r\n             My Friend Requests\r\n            </Button>\r\n            \r\n        }\r\n        <Button className= \"loginbtn addFriendBtn\"\r\n               variant=\"contained\" \r\n            color=\"Secondary\"\r\n             fullWidth\r\n            onClick={event =>  history.push('/all-contacts/'+myId)}>\r\n              <PersonAddIcon className='contactManagementIcon'\r\n              color = \"white\"/> Add New friend\r\n            </Button>\r\n            </Grid>\r\n            </Grid>\r\n             <Grid item xs={1} md={3}></Grid>\r\n       </Grid>\r\n       \r\n       </Grid>\r\n    </div>)\r\n}\r\nexport default ContactManagement;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js",["281","282","283","284","285","286","287"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleFriendRequest from \"./SingleFriendRequest\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,Hidden,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport io from \"socket.io-client\";\r\nimport SideBar from \"./SideBar\";\r\n \r\nconst AllFriendRequest = ({match}) => {\r\n     const myId=isAuthenticated()._id;\r\n     const[loading,setLoading]=useState(false);\r\n     const [friendreqs, setFrndRequest] =React.useState([]);\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     let userEmail = isAuthenticated().email\r\n     const {setSocket,roomJoin,messageEvent,friendReq,getRequest,acceptRejectCounter} = useContext(SocketContext);\r\n     let roomId = useRef()\r\n     roomId.current = '/'+match.params.id\r\n     let history = useHistory()\r\n\r\n     window.onload = () => {\r\n        friendReq()\r\n       messageEvent()\r\n       getRequest()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getFriendRequest = () => \r\n     {\r\n      friendService.getFriendRequest(myId).then((data)=>{\r\n                setFrndRequest(data)\r\n                setLoading(true);\r\n                acceptRejectCounter();\r\n              })\r\n            .catch((err=>{console.log(err)}))\r\n     }\r\n    useEffect(getFriendRequest , []);\r\n\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n   /*  useEffect(()=>{\r\n      if(clientSocket){\r\n        clientSocket.emit(\r\n          \"myChatsRoom\",\r\n          { myChatsRoom : roomId.current},\r\n          ({error,room}) => {\r\n            if (!error) {\r\n              console.log(\"joined room with id\", room);\r\n            } else {\r\n              console.log(\"error joining room\", error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n     },[]) */\r\n\r\n     return ( \r\n    <div  style={{height:\"100vh\"}} className=\"back_divs\">\r\n     <Grid container>\r\n       <Hidden only={['xs', 'sm']}>\r\n          <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} ><Header/></Grid>\r\n          </Hidden>\r\n           <Grid item xs={12} md={10}>\r\n      <PageTitle name= {\"Friend Requests\"}/>\r\n      {loading?\r\n      <div> {\r\n      friendreqs.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",fontSize:\"1.4rem\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>You have no friend request😞</div>) \r\n        :\r\n        (\r\n          <div>\r\n        <Grid container   style={{marginTop:\"0.9rem\" }}>\r\n          <Grid item xs ={1} md={1}> </Grid>\r\n          <Grid item xs ={10} md={10}>\r\n            <Grid container   style={{marginBottom:\"1rem\" }}>\r\n          <Grid item xs ={0} md={7}> </Grid>\r\n          <Grid item xs ={12} md={5}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              \r\n            </Grid>\r\n          {\r\n          friendreqs.filter((friendreq)=>{\r\n             if(searchTerm == \"\") return friendreq\r\n             else if (friendreq.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friendreq\r\n           }).map((friendreq, index) => (\r\n               <SingleFriendRequest key={index} friendreq={friendreq} onAcceptReject={getFriendRequest}/> )\r\n          )}\r\n           \r\n          </Grid>\r\n          <Grid item xs={1}   md={10}></Grid>\r\n        </Grid>\r\n        </div> )\r\n         \r\n      }\r\n       </div>:\r\n          \r\n       <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    \r\n  </div>\r\n</div>\r\n  }\r\n         </Grid>\r\n  \r\n      </Grid>\r\n    </div> );\r\n\r\n}\r\nexport default AllFriendRequest;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js",["288","289","290","291"],"import React, { useState, useEffect,useContext, useRef } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button, Grid, Hidden} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n \r\nimport io from \"socket.io-client\";\r\nimport Webcam from \"react-webcam\";\r\nimport SideBar from \"./SideBar\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst UpdateProfileSetup = ( ) => {\r\n    const classes = useStyles();\r\n    const myId=isAuthenticated()._id;\r\n    let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n    const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n    let clientSocket1 = useRef()\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n \r\n    const [values, setValues] = useState({\r\n    img: \"\",\r\n    language:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language, successMsg, errorMessage,infoMessage, loading } = values;\r\n \r\n   window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n      });\r\n      return s;\r\n    })\r\n  };\r\n\r\n useEffect(() => {\r\n     accountService.getMyAccount(myId).then((data) => {\r\n     setValues({ ...values , img: data.profileImg, language:data.langPreference});\r\n    }).catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n  }, []);\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       setCapturedPic(true);\r\n       const data = new FormData();\r\n       data.append(\"file\", imageSrc);\r\n       axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading.... \"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n           }\r\n        )\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n    \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data).\r\n           then(async (response) => {\r\n           setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst updateProfile =()=>{\r\n  accountService.updateProfileSetup(myId,{profileImg: img, langPreference: language})\r\n .then((response) => {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.userData));\r\n          setValues({\r\n            ...values,\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n           \r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n    <Grid container>\r\n      <Grid item xs={1} sm={4} md={4}></Grid>\r\n      <Grid item xs={10} sm={4} md={4}>\r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n            <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div> \r\n             <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div>\r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.value === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => { \r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              fontSize:\"1rem\",\r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1rem\",\r\n              marginBottom: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              textTransform:\"capitalize\"\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={updateProfile}\r\n            \r\n          >\r\n            Update Profile\r\n          </Button>\r\n                   \r\n      </div> \r\n                \r\n  \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <div className=\"modal-title\">\r\n        <h3  id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <p style={{color:\"red\"}}><i>Your picture's quality will be low</i></p>\r\n        </div>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n  </Grid>\r\n  <Grid item xs={1} sm={4} md={3}></Grid>\r\n  </Grid>\r\n)\r\nreturn (\r\n <div  style={{height:\"100vh\"}} className=\"back_divs\">    \r\n    {loading && <LinearBuffer />}\r\n        <Grid container>\r\n          <Hidden only={['xs', 'sm']}>\r\n          <Grid item     md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n           <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} sm={12}><Header/></Grid>\r\n          </Hidden>\r\n       <Grid item  xs={12} sm={12} md={10}>\r\n     <PageTitle name= {\"Update Profile \"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n      </Grid>\r\n       </Grid>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default UpdateProfileSetup;\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js",["292","293","294","295","296"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleContact from \"./SingleContact\";\r\nimport contactService from \"../../../services/contactService\";\r\nimport { Button, Grid ,Hidden,InputAdornment, TextField} from \"@material-ui/core\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport Header from \"./Header\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SideBar from \"./SideBar\";\r\n \r\nconst AllContact = ({match}) => {\r\n    const myId=isAuthenticated()._id;\r\n    let userEmail = isAuthenticated().email;\r\n    let history = useHistory()\r\n    const [loading,setLoading]=useState(false);\r\n     const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n    const [contacts, setContacts] = React.useState([]);\r\n    let roomId = useRef()\r\n    let clientSocket1 = useRef()\r\n    roomId.current = '/'+match.params.id;\r\n    const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n    window.onload = () => {\r\n       friendReq()\r\n      messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n    const getData = () => {\r\n   friendService.getSentFriendRequest(myId)\r\n   .then((data)=>{\r\n      localStorage.setItem(\"user\",JSON.stringify(data));})\r\n   .catch((err=>{console.log(err)}))\r\n   }\r\n     \r\n  const getSingleContact = () => {\r\n    contactService.getSingleContact(myId)\r\n    .then((data) => { setContacts(data);\r\n    setLoading(true)})\r\n    .catch((err) => {console.log(err);});\r\n  };\r\n\r\n   useEffect(()=> {\r\n     getData();\r\n     getSingleContact();\r\n }, []);\r\n \r\n   useEffect(()=>{\r\n    //roomJoin(myId)\r\n    //messageEvent()\r\n   },[])\r\n    \r\n   \r\n    return ( \r\n    <div style={{height:\"100vh\"}} className=\"back_divs\"  >\r\n       <Grid container>\r\n       <Hidden only={['xs', 'sm']}>\r\n          <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} ><Header/></Grid>\r\n          </Hidden>\r\n           <Grid item xs={12} md={10}>\r\n      <PageTitle name= {\"Add Friend\"}/>\r\n      {loading?\r\n      <div>{\r\n      contacts.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\", fontSize:\"1.4rem\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No TalkSee User Found😞</div>) \r\n        :\r\n        (<div >\r\n          \r\n            <Grid container  style={{marginTop:\"0.9rem\"}}>\r\n          <Grid item xs ={1} md={1}> </Grid>\r\n          <Grid item xs ={10} md={10} >\r\n            <Grid container   style={{marginBottom:\"1rem\" }}>\r\n          <Grid item xs ={0} md={8}> </Grid>\r\n          <Grid item xs ={12} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n     \r\n           { contacts.filter((contact)=>{\r\n             if(searchTerm === \"\") return contact\r\n             else if (contact.firstName.toLowerCase().startsWith(searchTerm.toLowerCase()) || contact.lastName.toLowerCase().startsWith(searchTerm.toLowerCase()) )\r\n                return contact\r\n           }).map((contact, index) => {\r\n              return contact._id === myId ? \r\n              <div></div>\r\n            : <SingleContact key={index} contact={contact}  roomId={roomId.current}/>\r\n                 \r\n            } )\r\n          }\r\n           \r\n           </Grid>\r\n          <Grid item xs={1}   md={1}></Grid>\r\n        </Grid>\r\n         \r\n         \r\n       </div> )\r\n          }\r\n          </div>:\r\n          \r\n       <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    \r\n  </div>\r\n</div>\r\n  }\r\n        \r\n        \r\n      \r\n        </Grid>\r\n  \r\n      </Grid>\r\n             \r\n    </div> );\r\n}\r\n \r\nexport default AllContact;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js",["297","298","299","300","301","302","303","304","305","306"],"import React, { useState, useEffect,useContext } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan,lightBlue} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nimport { SocketContext } from \"../../../context/SocketContext\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nconst useStyles = makeStyles({\r\n\r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\nconst Profile = ( {match}) => {\r\n     console.log(match.params.id)\r\n     const contactId = match.params.id\r\n     const roomId = '/'+contactId\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n    const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contactId)?false:true)\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const { clientSocket } = useContext(SocketContext);\r\n    //console.log(\"Props \",props.match)\r\n    const sentFriendRequest=() => {\r\n        console.log(\"contact Id\",contactId)\r\n        friendService.sendRequest(\r\n            {friendId:contactId,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n\r\n            })\r\n         .catch((err) => {console.log(err);});\r\n\r\n         clientSocket.emit(\r\n            \"friendRequest\",\r\n            { myName,roomId },\r\n            (err) => {\r\n              if (!err) console.log(\"emitted event\");\r\n              else console.log(err);\r\n            }\r\n          );\r\n    }\r\n     const cancelFriendRequest=()=>{\r\n\r\n        friendService.cancelRequest(\r\n            {friendId:contactId,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n\r\n         })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n\r\nreturn (\r\n    <div>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{display:\"inline-block\"  ,position:\"relative\",float:\"right\",marginTop:\"1rem\", backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{display:\"inline-block\" ,position:\"relative\",float:\"right\" ,marginTop:\"1rem\", backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogoPage.js",["307"],"import React from \"react\"\r\nimport { Grid ,Typography} from \"@material-ui/core\"\r\nimport { brown } from \"@material-ui/core/colors\";\r\n\r\nconst LogoPage = ({ name }) => {\r\nreturn(\r\n <Grid container >\r\n      <Grid item xs={1} sm={2} xm={5} md={4}></Grid>\r\n      <Grid item xs={10} sm={8} xm={2} md={6}>\r\n        \r\n     <Typography variant=\"headline\" \r\n         style={{ \r\n          marginTop:\"1rem\",\r\n         position: \"relative\",\r\n         fontSize:\"5rem\",\r\n         color:brown[300],\r\n          marginBottom:\"1rem\",\r\n         fontFamily:\"Brush Script MT, Brush Script Std, cursive\"}}\r\n          component=\"h1\">\r\n               <img className=\"loginImg\" src={process.env.PUBLIC_URL + '/images/logo.png'} />{name}\r\n          </Typography>\r\n      \r\n      </Grid>\r\n      \r\n    <Grid item  xs={1} sm={2} xm={5} md={2}></Grid>\r\n    </Grid>\r\n    )}\r\nexport default LogoPage;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reducers\\DeletePermissionReducer.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SideBar.js",["308","309","310","311","312","313"],"import React,{useEffect,useContext} from 'react';\r\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport { isAuthenticated, logout } from \"../clientStorages/auth\";\r\n \r\n\r\nconst SideBar = ({ history }) => {\r\n     history = useHistory();\r\n    \r\n      const myId = isAuthenticated()._id;\r\n      const myProfileImg =isAuthenticated().profileImg;\r\n    \r\nconst firstName= isAuthenticated().firstName;\r\n  const lastName = isAuthenticated().lastName;\r\n  const {clientSocket,setSocket,messageEvent,roomJoin,friendReq,getRequest,frndcounter,msgCounter} = useContext(SocketContext);\r\n     const handleLogOut = (evt) => {\r\n    logout(() => {\r\n      history.push(\"/login\");\r\n    });\r\n  };\r\n  useEffect(()=>{\r\n    getRequest()\r\n  },[frndcounter])\r\n     useEffect (()=>{\r\n    roomJoin(myId)\r\n  },[]);\r\n  \r\n    return (<div class=\"wrapper\">\r\n    <div class=\"sidebar\">\r\n         <div id =\"profile_div\">\r\n        <img\r\n          src= {myProfileImg}\r\n          alt=\"Profile\"\r\n          style={{ height: \"90px\", width: \"90px\", borderRadius: \"50%\" ,cursor:\"pointer\" }}\r\n         onClick={()=>history.push('/update-my-profile-setup/'+myId)}\r\n        /> \r\n        </div>  \r\n         <h4>{firstName +\" \"+lastName}</h4>\r\n        <ul>\r\n          \r\n            <li>\r\n               \r\n                 {msgCounter >= 1 ?\r\n                 <Link to={{pathname: '/mychats/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-comments\"  ><span className=\"friendCounter\">{msgCounter}</span></i> My Chats\r\n                  </Link>\r\n                  :<Link to={{pathname: '/mychats/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-comments\"  ></i> My Chats\r\n                  </Link>}\r\n                 \r\n            </li>\r\n          \r\n            <li>\r\n              {frndcounter >=1   ?\r\n               <Link to={{pathname: '/my-contact-list/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-address-book\"  ><span className=\"friendCounter\">{frndcounter}</span></i> Contacts\r\n                  </Link>:\r\n                   \r\n                <Link to={{pathname: '/my-contact-list/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-address-book\"></i> My Contacts\r\n                  </Link>}\r\n            </li>\r\n              <li> \r\n                <Link to={{pathname: `/my-account-settings/${myId}`}} style={{textDecoration:\"none\"}} >\r\n                     <i class=\"fas fa-user-cog\"  ></i> Account Settings\r\n                  </Link>\r\n            </li>\r\n            \r\n            \r\n        </ul> \r\n        <div class=\"social_media\">\r\n        <button\r\n                    className=\"btn text-decoration-none btn-link\"\r\n                    onClick={handleLogOut}\r\n                  >\r\n                    <i className=\"fas fa-sign-out-alt\" ></i> Logout\r\n                  </button> \r\n          \r\n      </div>\r\n    </div>\r\n   {/*  <div class=\"main_content\">\r\n        <div class=\"header\">Welcome!! Have a nice day.</div>  \r\n        <div class=\"info\">\r\n           \r\n                </div>\r\n    </div>  */}\r\n</div>  );\r\n}\r\n \r\nexport default  withRouter(SideBar);","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js",["314","315"],"import axios from \"axios\";\r\naxios.defaults.headers.common[\"x-auth-token\"] =localStorage.getItem(\"token\");\r\nexport const signup = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/signup\", data);\r\n  return response;\r\n};\r\nexport const login = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/login\", data);\r\n  return response;\r\n};\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js",["316"],"import { Button, Typography,Paper, Grid, Hidden } from \"@material-ui/core\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport React, { useState, useContext} from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SocketContext } from \"../../../context/SocketContext\";\r\nimport { lightBlue, grey} from '@material-ui/core/colors';\r\n\r\nconst SingleContact = (props) => {\r\n    const { contact } = props;\r\n    const roomId = '/'+contact._id\r\n    let history = useHistory()\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n    const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contact._id)?false:true)\r\n    const { clientSocket } = useContext(SocketContext);\r\n    //const [showAddBtn, setAddBtn]=useState(state?!state.sentRequests.includes(contact._id):true);\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const sentFriendRequest=() => {\r\n        console.log(\"contact Id\",contact._id)\r\n        friendService.sendRequest(\r\n            {friendId:contact._id,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n            \r\n            })\r\n         .catch((err) => {console.log(err);});\r\n\r\n         clientSocket.emit(\r\n            \"friendRequest\",\r\n            { myName,roomId },\r\n            (err) => {\r\n              if (!err) console.log(\"emitted event\");\r\n              else console.log(err);\r\n            }\r\n          );\r\n    }\r\n\r\n     const cancelFriendRequest=()=>{\r\n         \r\n        friendService.cancelRequest(\r\n            {friendId:contact._id,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n             \r\n         })\r\n         .catch((err) => {console.log(err);});\r\n         clientSocket.emit(\r\n            \"rejectfriendRequest\",\r\n            { myName,roomId },\r\n            (err) => {\r\n              if (!err) console.log(\"emitted event\");\r\n              else console.log(err);\r\n            }\r\n          );\r\n    }\r\n \r\n    const contactClickHandler = ()=>{\r\n        localStorage.setItem('contact',JSON.stringify(contact))\r\n        //console.log(\"clicked\",'/profile'+props.roomId+'/'+contact._id)\r\n        history.push('/profile'+props.roomId+'/'+contact._id)\r\n    }\r\n    return (\r\n        <div>\r\n       <Paper style={{padding: '10px 20px', marginBottom:\"1rem\"}} //onClick={contactClickHandler}\r\n        >\r\n            <Grid container>\r\n                 <Grid item xs={3} md={1}>  <img src={contact.profileImg}   \r\n          style={{ height: \"60px\", width: \"60px\", borderRadius: \"20%\" ,display:\"inline\" }} alt=\"img\"/> </Grid>\r\n                <Grid item xs={9} md={9}> \r\n            \r\n             <div style={{display:\"inline\"}}><p  className=\"user_names\"   >{contact.firstName + \" \"+ contact.lastName}</p>\r\n               <Typography style={{color:\"gray\",  fontStyle: \"italic\" , fontSize:\"0.9rem\" }}>{contact.email}</Typography>\r\n               </div>\r\n               </Grid>\r\n               <Hidden only={['md', 'lg']}> \r\n                   <Grid item xs={3}></Grid></Hidden>\r\n               <Grid item xs={9} md={2}>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{marginTop:\"0.7rem\",backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{marginTop:\"0.7rem\",backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n             </Grid>\r\n      </Grid>\r\n     </Paper>       \r\n   \r\n    </div>);\r\n}\r\n \r\nexport default SingleContact;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js",["317","318","319","320","321","322","323"],"import TypeMessage from \"./TypeMessage\";\r\nimport React , {useEffect,useState}from \"react\";\r\nimport \"./chat.css\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Alert from '../FrontendComponents/Alerts/AlertBar'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport {Button, Grid ,Hidden,InputAdornment, TextField} from \"@material-ui/core\";\r\nimport { grey } from '@material-ui/core/colors';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport SideBar from \"../FrontendComponents/components/SideBar\";\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport {isAuthenticated} from '../FrontendComponents/clientStorages/auth';\r\nexport default function RenderChat(props) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [isSearch, setSearch] = useState(false)\r\n  let history = useHistory()\r\n    const myId = isAuthenticated()._id;\r\n  const open = Boolean(anchorEl);\r\n  const options = [\r\n    'Search',\r\n    'Delete'\r\n  ];\r\n  const [openMenu, setMenu] = useState(true)\r\n  const [open1, setOpen] = useState(false)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    //props.setMyOpen(true)\r\n    setOpen(true)\r\n  };\r\n\r\n  const handleClose = (option) => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const itemClickHandler= (option)=>{\r\n   if(option === 'Delete'){\r\n      props.setDel(true)\r\n      setMenu(false)\r\n   }\r\n    else if(option === 'Search')\r\n      setSearch(!isSearch)\r\n  }\r\n\r\n\r\n   const onChangeSearch = (event)=>{\r\n    //props.setTerm(event.currentTarget.value)\r\n    props.searchHandler(event.currentTarget.value)\r\n  }\r\n  useEffect(()=>{\r\n    let imgUrl = props.recipientInfo.url;\r\n\r\n  })\r\n  let elem = null;\r\n  if(openMenu){\r\n    elem = (\r\n      <div  style={{display:\"inline\",float:\"right\",marginTop:\"0.6rem\"}}>\r\n      <IconButton\r\n    className =\"Allbtn\" \r\n    aria-label=\"more\"\r\n    aria-controls=\"long-menu\"\r\n    aria-haspopup=\"true\"\r\n    onClick={handleClick}\r\n    >\r\n    <MoreVertIcon />\r\n    </IconButton>\r\n    {open1 ?\r\n      <Menu\r\n        id=\"long-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n        style: {\r\n            marginTop: '40px',\r\n            maxHeight: 48 * 4.5,\r\n            width: '20ch',\r\n            \r\n        },\r\n      }}\r\n      >\r\n        <MenuItem className =\"Menu_div\" onClick={()=>itemClickHandler('Search')}>\r\n          <div >\r\n            <SearchIcon fontSize=\"small\" style={{width:\"2rem\"}}/>\r\n            <p style={{display:\"inline\"}}>Search</p>\r\n          </div>\r\n        </MenuItem>\r\n        <MenuItem  className =\"Menu_div\" onClick={()=>itemClickHandler('Delete')}>\r\n          <div>\r\n            <DeleteIcon fontSize=\"small\" style={{width:\"2rem\",paddingBottom:\"0.1rem\"}} />\r\n               <p style={{display:\"inline\"}}>Delete</p>\r\n          </div>\r\n      \r\n        </MenuItem>\r\n    </Menu>\r\n    :\r\n    null\r\n    }\r\n      \r\n    \r\n      </div>\r\n    )\r\n  }\r\n  if(props.isDel){\r\n    elem = (\r\n      <div style={{color:\"gray\",cursor:\"pointer\",float:\"right\",marginTop:\"1rem\",marginRight:\"1rem\"}} data-tip='Close delete Menu' data-for='delete'>\r\n          <CancelIcon onClick={() => {\r\n            console.log(props.isDel)\r\n            props.setDel(false)\r\n            setOpen(false)\r\n            setMenu(true)\r\n            }} />\r\n          \r\n            </div>\r\n\r\n    )\r\n  }\r\n  if(isSearch){\r\n    elem = (\r\n      <TextField\r\n       style={{float:\"right\",marginRight:\"1rem\",marginTop:\"0.8rem\",backgroundColor:\"white\",borderRadius:\"1rem\"}}\r\n       value={props.searchTerm}\r\n       onChange={onChangeSearch}\r\n        placeholder=\"Search Message\"\r\n        size=\"medium\"\r\n          \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <SearchIcon style={{ color: grey[600] ,marginRight:\"0.2rem\",float:\"right\"}}/>\r\n       \r\n            </InputAdornment>\r\n          ),\r\n          endAdornment :(\r\n               <CancelIcon style={{color:\"gray\",cursor:\"pointer\",marginRight:\"0.4rem\"}} onClick={() => {\r\n            console.log(props.isDel)\r\n            props.setTerm(\"\")\r\n            setSearch(false)\r\n            setOpen(false)\r\n            setMenu(true)\r\n            }} />\r\n      \r\n          ),\r\n          disableUnderline: true \r\n         }}\r\n         \r\n      />\r\n      \r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n       <div  style={{ height:\"100vh\"}} className=\"chat_div\"> \r\n       <Grid container>\r\n           <Hidden only={['sm', 'xs']}>\r\n          <Grid item  md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            \r\n       <Grid item xs={12} md={10}>\r\n        <ReactTooltip id='delete'/>\r\n            <Grid container spacing={0} style={{display:\"flex\",marginTop:\"1rem\"}}>\r\n               <Grid xs={0} md={1}></Grid>\r\n              <Grid item xs={12} md ={10}   >\r\n                <div className='profilediv'>\r\n                  <Hidden only={['md','lg']}>\r\n                   <KeyboardBackspaceIcon style={{marginRight:\"0.1rem\",marginLeft:\"0.1rem\",cursor:\"pointer\"}}  onClick={event =>  history.push('/mychats/'+myId)} /> \r\n                  </Hidden>\r\n              <img\r\n                className='profile'\r\n                src={props.recipientInfo.url}\r\n                alt='dp'\r\n              />\r\n \r\n              <span   style={{display:\"inline\",fontWeight:\"bold\", fontSize: \"21px\" }}>{props.recipientInfo.name}</span>\r\n              \r\n              {      \r\n                 elem\r\n              }\r\n            </div>\r\n            <div className=\"content_body \">\r\n              \r\n             {props.element}\r\n             {props.loading ? (\r\n              <div className='load'>\r\n                <CircularProgress color='secondary' />\r\n              </div>\r\n            ) : null}\r\n \r\n            </div>\r\n           { props.isFriend === true?\r\n            <TypeMessage sendMessage={props.sendMessage} />\r\n            :\r\n            <Alert\r\n            type='error' \r\n            message='This person is not your friend anymore. Add them again to start a chat.'\r\n            autoClose={5000}\r\n            />\r\n          }\r\n              </Grid>\r\n              <Grid xs={0} md={1}></Grid>\r\n              </Grid>\r\n              </Grid>\r\n       </Grid>\r\n              </div>\r\n              </React.Fragment>\r\n \r\n  );\r\n}\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js",["324","325","326","327","328"],"import React, {useState,useRef} from \"react\";\r\nimport \"./chat.css\"\r\nimport { Player } from 'video-react';\r\nimport \"video-react/dist/video-react.css\"\r\nimport {  Grid, Button } from \"@material-ui/core\";\r\nimport DeleteMessage from './DeleteMsg'\r\nimport chatservice from \"../../services/ChatService\";\r\nexport default function SettingMessage(props) {\r\n\r\n  var boxchecked = JSON.parse(localStorage.getItem(\"deletion\"));\r\n  const [open, setOpen] = React.useState(false);\r\n  const [show,setShow] = React.useState(false)\r\n  const [messageId, setId] = useState()\r\n \r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let elem = null;\r\n  let indexOfTerm = []\r\n  let msgArr = []\r\n  \r\n  const handleClickOpen= (msgId)=>{\r\n    if(boxchecked.state === true){\r\n      console.log(\"mid in settingmsg1\",msgId);\r\n      setShow(false)\r\n         chatservice.deleteMessage(msgId).then((res)=>{\r\n        console.log(\"response: \",res)\r\n        props.getData()\r\n      })\r\n      .catch((err)=>  console.log(err))\r\n   }\r\n   else{\r\n  setShow(true)\r\n  console.log(\"mid in settingmsg2\",msgId);\r\n  setId(msgId)}\r\n  }\r\n\r\n  if (props.message.to === props.user) {\r\nconsole.log(props.message.msgId)\r\n     elem = (\r\n      <div >\r\n        <div className='incoming_msg_img'>\r\n          \r\n        </div>\r\n        <Grid container >\r\n              <Grid item xs={6} md={4}>  \r\n              <div  style={{ margin:\"12px 15px 4px 8px\",overflow:\"hidden\"}}> \r\n                <Player   >\r\n                 <source src={props.message.messageVideo} />\r\n              </Player>\r\n\r\n              \r\n                </div>\r\n                </Grid>\r\n              <Grid item xs={6} md={8}  >  {\r\n            props.isDel ?\r\n            <Button className=\"Allbtn\"  style={{textTransform:\"capitalize\" ,marginTop:\"0.8rem\", color:\"#EC5454\",fontSize:\"1.2rem\"}}>\r\n              <i class=\"fas fa-trash-alt\"   onClick={()=>handleClickOpen(props.message.msgId)}></i>\r\n            </Button>\r\n\r\n            : null\r\n          }</Grid> \r\n              </Grid>\r\n               <div class=\"chat-message is-received\">\r\n                <div class=\"message-block\">\r\n               <div class=\"message-text\"><span>{props.message.messageBody}</span></div>\r\n                   <span className=\"received_time_date\"> {props.message.time}</span>\r\n                </div>\r\n                </div>\r\n      </div>\r\n    );\r\n  \r\n  }\r\n  else if (props.message.from === props.user) {\r\n    console.log(props.message.msgId)\r\n    elem = (\r\n      <div >\r\n        \r\n         \r\n          <Grid container >\r\n              <Grid item xs={6} md={8}>  {\r\n            props.isDel ?\r\n            <Button className=\"Allbtn\" style={{textTransform:\"capitalize\" ,float:\"right\",marginTop:\"0.8rem\",color:\"#EC5454\",fontSize:\"1.2rem\"}}  >\r\n               <i class=\"fas fa-trash-alt\"  onClick={()=>handleClickOpen(props.message.msgId)}></i>\r\n            </Button>\r\n            : null\r\n               }</Grid>\r\n              <Grid item xs={6} md={4}  >\r\n                 <div style={{ margin:\"12px 15px 4px 8px\",overflow:\"hidden\"}}> \r\n                <Player   >\r\n                  <source src={props.message.messageVideo} />\r\n              </Player>\r\n              \r\n                </div></Grid>\r\n              </Grid>\r\n               <div class=\"chat-message is-sent\" >\r\n                 <div class=\"message-block\">  \r\n                 <div class=\"message-text\"> {props.message.messageBody}</div>\r\n                  <span class=\"sent_time_date\"> {props.message.time}</span>\r\n                 </div>\r\n                </div>\r\n      </div>\r\n    );\r\n  } \r\n   else {\r\n\r\n    console.log(\"nothing\");\r\n  }\r\n  return (\r\n    <div>\r\n        \r\n        {elem}\r\n        {\r\n        show ?\r\n        <DeleteMessage open ={show} setShow={setShow} msgId = {messageId} getData={props.getData}/>\r\n        : null}\r\n    </div>\r\n  );\r\n}","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js",["329"],"import { Button,Grid,Paper } from \"@material-ui/core\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport React from \"react\";\r\nimport {   red  ,lightGreen} from '@material-ui/core/colors';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nconst SingleFriend = (props) => {\r\n    const { friend ,onRemove, chatRec} = props;\r\n    const [show,setShow] = React.useState(false);\r\n    const [friends,setFriends]=React.useState();\r\n    const myId=isAuthenticated()._id;\r\n    const friendEmail =  friend.email;\r\n     const RemoveFriend =(friend)=>{\r\n         friendService.deleteFriend({friendId: friend.id, myId}) \r\n          .then((data) => {\r\n            setShow(false);\r\n           onRemove()\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n             })\r\n         .catch((err) => {console.log(err);}); \r\n      }\r\n       const handleClose = () => {\r\n        setShow(false);\r\n    };\r\n    const chatButtonHandler = (fr)=>{\r\n      console.log(\"Fr\",fr)\r\n      console.log(\"pth\",\"/chat/\"+friendEmail+'/ '+fr.id)\r\n      localStorage.setItem(\"friendId\",fr.id)\r\n      localStorage.setItem(\"recName\",fr.name)\r\n      localStorage.setItem(\"recLang\",fr.langPreference)\r\n      localStorage.setItem(\"profileUrl\",fr.profileImg)\r\n      history.push(\"/chat/\"+friendEmail+' '+fr.id)\r\n    } \r\n    const handleClickOpen= (frnd)=>{\r\n       setShow(true)\r\n  setFriends(frnd);\r\n  console.log(frnd);\r\n   \r\n    }\r\n    let history = useHistory()\r\n    return (\r\n       <Paper style={{padding:  '20px 10px', marginBottom:\"1rem\" }}  >\r\n         <Grid container style={{display:\"flex\"}}>\r\n           <Grid item    xs ={12} sm={12} md={9}>\r\n              <img src={friend.profileImg}\r\n          style={{  marginRight:\"0.5rem\",height: \"60px\", width: \"60px\", borderRadius: \"20%\",display:\"inline\",padding:\"0.2rem\" }} alt=\"img\"/>\r\n              <p   className=\"user_names\"  >{friend.name}</p>\r\n           </Grid>\r\n           <Grid item   xs={12} sm={12} md={3}  >\r\n             <Button className= \"loginbtn\"\r\n              style={{ backgroundColor:lightGreen[700],color:\"white\",margin:\"0.4rem\" }}\r\n            variant=\"contained\" \r\n            size=\"medium\"\r\n            onClick={()=> chatButtonHandler(friend)} \r\n            >Chat</Button>\r\n \r\n            <Button className= \"loginbtn\"\r\n              onClick={()=>handleClickOpen(friend)}\r\n             style={{  backgroundColor:red[400],color:\"white\" }}\r\n            variant=\"contained\" \r\n            >Remove</Button>\r\n            </Grid>\r\n            {show?\r\n   <Dialog open={show} onClose={handleClose} \r\n    aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\"><WarningIcon  style={{color:\"red\",marginRight:\"0.3rem\",paddingBottom:'0.3rem'}}/><p style={{fontWeight:\"bold\",display:\"inline\" }}>Remove Friend Warning</p></DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n           <strong>{friend.name}</strong>  will no longer be your friend. Are you sure you want to continue?\r\n          </DialogContentText>\r\n          <hr/>\r\n        </DialogContent>\r\n        <DialogActions style={{padding:\"0rem 1rem 1rem 1rem\"}}>\r\n          <Button onClick={handleClose}  \r\n          style={{backgroundColor:\"gray\",color:\"white\"}}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={()=>RemoveFriend(friends)} \r\n           style={{backgroundColor:\"#0e7be9\",color:\"white\"}}>\r\n            Yes,Continue\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog> \r\n    :null}\r\n         </Grid>\r\n             \r\n        \r\n      \r\n               </Paper> \r\n  \r\n     );\r\n}\r\n \r\nexport default SingleFriend;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js",["330","331","332"],"import React, { useEffect, useRef, useState ,useContext} from \"react\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport { format } from \"timeago.js\";\r\nimport \"./chat.css\";\r\nimport {SocketContext} from '../../context/SocketContext';\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n   \r\n   \r\n  listText: {\r\n    fontSize: \"1.5rem\",\r\n    fontFamily: \"Roboto\",\r\n    marginLeft: \"0.5rem\",\r\n    marginTop:\"2rem\",\r\n    fontWeight:\"bold\",\r\n    display:\"inline\"\r\n   \r\n  },\r\n  listText1: {\r\n    fontSize: \"1.3rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"#808284\",\r\n    width:\"80%\",\r\n   marginLeft: \"0.5rem\",\r\n   display:\"block\",\r\n  cursor:\"pointer\",\r\n  overflow:\"hidden\",\r\n  textOverflow:\"ellipsis\"\r\n    \r\n    \r\n  },\r\n  listTime:{\r\n    fontSize: \"0.8rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n    marginLeft: \"0.5rem\",\r\n    display:\"inline\"\r\n     \r\n  },\r\n  listBtn: {\r\n    backgroundColor: \"rgb(0, 172, 193)\",\r\n    color: \"white\",\r\n    fontSize: \"1rem\",\r\n  },\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n  mygrid1: {\r\n    padding: \"20px\",\r\n  },\r\n  img: {\r\n    width: \"4rem\",\r\n    height: \"4rem\",\r\n    borderRadius: \"60px\",\r\n  },\r\n}));\r\nconst SingleChat = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  let elem = null;\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n  let messages = useRef([]);\r\nconst {msgNotify}=useContext(SocketContext);\r\n  console.log(\"props\",props.lastMsg)\r\n  const recipientClickHandler = (fr, type) => {\r\n    chatservice.getMessagesbyEmail(user.email, fr.email).then((res) => {\r\n      messages.current = res;\r\n      messages.current.map((m) => {\r\n        if (m.type === \"offline\" && m.from !== user.email) {\r\n          chatservice\r\n            .changeMessageType({ type: \"read\" }, m._id)\r\n            .then((res) => {\r\n              console.log(\"The response is here\",res) \r\n              msgNotify();})\r\n            .catch((err) => console.log(err));\r\n        }\r\n        console.log(\"user matched\")\r\n      });\r\n    });\r\n    //console.log(\"fr\", fr);\r\n    localStorage.setItem(\"friendId\", fr.id);\r\n    localStorage.setItem(\"recName\", fr.name);\r\n    localStorage.setItem(\"recLang\", fr.lang);\r\n    localStorage.setItem(\"profileUrl\", fr.img);\r\n    history.push(\"/chat/\" + fr.email + \" \" + fr.id);\r\n    \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.recipients.map((r, index) => {\r\n        return (\r\n           \r\n             <Paper style={{padding:  '12px 10px', marginBottom:\"1rem\" }}  >\r\n              <Grid container>\r\n               <Grid item xs={1}  >\r\n                  <img src={r.img} alt='img'    style={{ height: \"50px\", width: \"50px\", borderRadius: \"30%\",display:\"inline\" }}/>\r\n               </Grid>\r\n           <Grid item    xs ={11}  >\r\n\r\n              <Typography className={classes.listText}>{r.name}</Typography>\r\n                 {props.lastMsg.emails.forEach((u, ind) => {\r\n                   if (u === r.email) {\r\n                    if (props.lastMsg.types[ind] === \"read\") {\r\n                      //console.log(\"in 1\",props.lastMsg.msgs[ind])\r\n                      elem = (\r\n                        <div >\r\n                            <Typography\r\n                              className={classes.listText1}\r\n                              onClick={() =>\r\n                                recipientClickHandler(\r\n                                  r,\r\n                                  props.lastMsg.types[ind],\r\n                                  props.lastMsg.msgId[ind]\r\n                                )\r\n                              }\r\n                            >\r\n                              {props.lastMsg.msgs[ind]}\r\n                              \r\n                            </Typography>\r\n                            <Typography className={classes.listTime}>\r\n                            {format(props.lastMsg.time[ind])}\r\n                            </Typography>\r\n                        </div>\r\n                        \r\n                      );\r\n                    } else if (props.lastMsg.types[ind] === \"unread\") {\r\n                      //console.log(\"in 2\")\r\n                      elem = (\r\n                        <div>\r\n                        <Typography\r\n                          style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                          className={classes.listText1}\r\n                          onClick={() =>\r\n                            recipientClickHandler(\r\n                              r,\r\n                              props.lastMsg.types[ind],\r\n                              props.lastMsg.msgId[ind]\r\n                            )\r\n                          }\r\n                        >\r\n                          {props.lastMsg.msgs[ind]}\r\n                        </Typography>\r\n                        <Typography className={classes.listTime}>\r\n                            {format(props.lastMsg.time[ind])}\r\n                        </Typography>\r\n                        </div>\r\n                      );\r\n                    } else if (\r\n                      props.lastMsg.types[ind] === \"offline\" &&\r\n                      props.lastMsg.senders[ind] !== user.email\r\n                    ) {\r\n                      //console.log(\"in 3\")\r\n                      elem = (\r\n                        <div>\r\n                        <Typography\r\n                       style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                          className={classes.listText1}\r\n                          onClick={() =>\r\n                            recipientClickHandler(\r\n                              r,\r\n                              props.lastMsg.types[ind]\r\n                            )\r\n                          }\r\n                        >\r\n                          {props.lastMsg.msgs[ind]}\r\n                        </Typography>\r\n                        <Typography className={classes.listTime}>\r\n                            {format(props.lastMsg.time[ind])}\r\n                        </Typography>\r\n                        </div> \r\n                        \r\n                      );\r\n                    } else {\r\n                      console.log(\"in nothing\", props.lastMsg.types[ind]);\r\n                       console.log(\"in nothing1\", props.lastMsg.senders[ind]);\r\n                      elem = (\r\n                        <div>\r\n                          <Typography\r\n                         //  style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                            className={classes.listText1}\r\n                            onClick={() =>\r\n                              recipientClickHandler(\r\n                                r,\r\n                                props.lastMsg.types[ind],\r\n                              )\r\n                            }\r\n                          >\r\n                            {props.lastMsg.msgs[ind]}\r\n                          </Typography>\r\n                          <Typography className={classes.listTime}>\r\n                              {format(props.lastMsg.time[ind])}\r\n                          </Typography>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  }\r\n                })}\r\n\r\n                {elem}\r\n           </Grid>\r\n          \r\n           </Grid>\r\n          </Paper>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default SingleChat;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\DeleteMsg.js",["333","334","335","336"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Settings.js",[],["337","338"],{"ruleId":"339","replacedBy":"340"},{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","severity":1,"message":"344","line":23,"column":7,"nodeType":"345","endLine":23,"endColumn":15,"suggestions":"346"},{"ruleId":"347","severity":1,"message":"348","line":45,"column":45,"nodeType":"349","messageId":"350","endLine":45,"endColumn":47},{"ruleId":"343","severity":1,"message":"351","line":34,"column":5,"nodeType":"345","endLine":34,"endColumn":7,"suggestions":"352"},{"ruleId":"343","severity":1,"message":"353","line":44,"column":32,"nodeType":"345","endLine":44,"endColumn":34,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":20,"column":7,"nodeType":"357","messageId":"358","endLine":20,"endColumn":13},{"ruleId":"343","severity":1,"message":"359","line":23,"column":25,"nodeType":"345","endLine":23,"endColumn":27,"suggestions":"360"},{"ruleId":"343","severity":1,"message":"361","line":24,"column":37,"nodeType":"345","endLine":24,"endColumn":39,"suggestions":"362"},{"ruleId":"343","severity":1,"message":"363","line":53,"column":6,"nodeType":"345","endLine":53,"endColumn":8,"suggestions":"364"},{"ruleId":"343","severity":1,"message":"365","line":58,"column":6,"nodeType":"345","endLine":58,"endColumn":8,"suggestions":"366"},{"ruleId":"343","severity":1,"message":"367","line":62,"column":5,"nodeType":"345","endLine":62,"endColumn":7,"suggestions":"368"},{"ruleId":"355","severity":1,"message":"369","line":33,"column":8,"nodeType":"357","messageId":"358","endLine":33,"endColumn":17},{"ruleId":"355","severity":1,"message":"370","line":1,"column":27,"nodeType":"357","messageId":"358","endLine":1,"endColumn":36},{"ruleId":"355","severity":1,"message":"369","line":26,"column":8,"nodeType":"357","messageId":"358","endLine":26,"endColumn":17},{"ruleId":"355","severity":1,"message":"371","line":27,"column":8,"nodeType":"357","messageId":"358","endLine":27,"endColumn":10},{"ruleId":"355","severity":1,"message":"372","line":47,"column":10,"nodeType":"357","messageId":"358","endLine":47,"endColumn":19},{"ruleId":"355","severity":1,"message":"373","line":47,"column":20,"nodeType":"357","messageId":"358","endLine":47,"endColumn":28},{"ruleId":"355","severity":1,"message":"374","line":47,"column":29,"nodeType":"357","messageId":"358","endLine":47,"endColumn":41},{"ruleId":"355","severity":1,"message":"375","line":50,"column":7,"nodeType":"357","messageId":"358","endLine":50,"endColumn":20},{"ruleId":"376","severity":1,"message":"377","line":125,"column":18,"nodeType":"378","messageId":"379","endLine":125,"endColumn":20},{"ruleId":"355","severity":1,"message":"380","line":23,"column":9,"nodeType":"357","messageId":"358","endLine":23,"endColumn":16},{"ruleId":"355","severity":1,"message":"381","line":24,"column":7,"nodeType":"357","messageId":"358","endLine":24,"endColumn":14},{"ruleId":"355","severity":1,"message":"382","line":44,"column":7,"nodeType":"357","messageId":"358","endLine":44,"endColumn":17},{"ruleId":"355","severity":1,"message":"383","line":47,"column":7,"nodeType":"357","messageId":"358","endLine":47,"endColumn":14},{"ruleId":"355","severity":1,"message":"384","line":48,"column":7,"nodeType":"357","messageId":"358","endLine":48,"endColumn":12},{"ruleId":"343","severity":1,"message":"385","line":175,"column":6,"nodeType":"345","endLine":175,"endColumn":8,"suggestions":"386"},{"ruleId":"343","severity":1,"message":"363","line":185,"column":5,"nodeType":"345","endLine":185,"endColumn":7,"suggestions":"387"},{"ruleId":"343","severity":1,"message":"388","line":229,"column":6,"nodeType":"345","endLine":229,"endColumn":15,"suggestions":"389"},{"ruleId":"343","severity":1,"message":"390","line":14,"column":7,"nodeType":"345","endLine":14,"endColumn":15,"suggestions":"391"},{"ruleId":"355","severity":1,"message":"392","line":4,"column":10,"nodeType":"357","messageId":"358","endLine":4,"endColumn":16},{"ruleId":"355","severity":1,"message":"393","line":9,"column":8,"nodeType":"357","messageId":"358","endLine":9,"endColumn":21},{"ruleId":"355","severity":1,"message":"394","line":11,"column":9,"nodeType":"357","messageId":"358","endLine":11,"endColumn":23},{"ruleId":"355","severity":1,"message":"395","line":12,"column":8,"nodeType":"357","messageId":"358","endLine":12,"endColumn":21},{"ruleId":"355","severity":1,"message":"396","line":13,"column":10,"nodeType":"357","messageId":"358","endLine":13,"endColumn":14},{"ruleId":"355","severity":1,"message":"381","line":22,"column":10,"nodeType":"357","messageId":"358","endLine":22,"endColumn":17},{"ruleId":"343","severity":1,"message":"397","line":61,"column":8,"nodeType":"345","endLine":61,"endColumn":10,"suggestions":"398"},{"ruleId":"347","severity":1,"message":"399","line":125,"column":34,"nodeType":"349","messageId":"400","endLine":125,"endColumn":36},{"ruleId":"376","severity":1,"message":"377","line":126,"column":28,"nodeType":"378","messageId":"379","endLine":126,"endColumn":30},{"ruleId":"355","severity":1,"message":"384","line":22,"column":7,"nodeType":"357","messageId":"358","endLine":22,"endColumn":12},{"ruleId":"355","severity":1,"message":"401","line":29,"column":7,"nodeType":"357","messageId":"358","endLine":29,"endColumn":17},{"ruleId":"355","severity":1,"message":"402","line":100,"column":7,"nodeType":"357","messageId":"358","endLine":100,"endColumn":12},{"ruleId":"343","severity":1,"message":"363","line":133,"column":6,"nodeType":"345","endLine":133,"endColumn":8,"suggestions":"403"},{"ruleId":"376","severity":1,"message":"377","line":137,"column":17,"nodeType":"378","messageId":"379","endLine":137,"endColumn":19},{"ruleId":"355","severity":1,"message":"404","line":146,"column":10,"nodeType":"357","messageId":"358","endLine":146,"endColumn":14},{"ruleId":"343","severity":1,"message":"405","line":241,"column":4,"nodeType":"345","endLine":241,"endColumn":16,"suggestions":"406"},{"ruleId":"376","severity":1,"message":"377","line":251,"column":33,"nodeType":"378","messageId":"379","endLine":251,"endColumn":35},{"ruleId":"355","severity":1,"message":"407","line":19,"column":32,"nodeType":"357","messageId":"358","endLine":19,"endColumn":37},{"ruleId":"343","severity":1,"message":"408","line":46,"column":9,"nodeType":"345","endLine":46,"endColumn":23,"suggestions":"409"},{"ruleId":"343","severity":1,"message":"410","line":65,"column":8,"nodeType":"345","endLine":65,"endColumn":10,"suggestions":"411"},{"ruleId":"343","severity":1,"message":"410","line":155,"column":8,"nodeType":"345","endLine":155,"endColumn":10,"suggestions":"412"},{"ruleId":"343","severity":1,"message":"413","line":185,"column":5,"nodeType":"345","endLine":185,"endColumn":16,"suggestions":"414"},{"ruleId":"415","severity":1,"message":"416","line":234,"column":14,"nodeType":"417","endLine":234,"endColumn":54},{"ruleId":"355","severity":1,"message":"370","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"418","line":1,"column":28,"nodeType":"357","messageId":"358","endLine":1,"endColumn":36},{"ruleId":"355","severity":1,"message":"392","line":4,"column":10,"nodeType":"357","messageId":"358","endLine":4,"endColumn":16},{"ruleId":"355","severity":1,"message":"395","line":9,"column":8,"nodeType":"357","messageId":"358","endLine":9,"endColumn":21},{"ruleId":"355","severity":1,"message":"396","line":10,"column":10,"nodeType":"357","messageId":"358","endLine":10,"endColumn":14},{"ruleId":"355","severity":1,"message":"381","line":28,"column":10,"nodeType":"357","messageId":"358","endLine":28,"endColumn":17},{"ruleId":"343","severity":1,"message":"419","line":57,"column":34,"nodeType":"345","endLine":57,"endColumn":36,"suggestions":"420"},{"ruleId":"347","severity":1,"message":"399","line":122,"column":40,"nodeType":"349","messageId":"400","endLine":122,"endColumn":42},{"ruleId":"376","severity":1,"message":"377","line":123,"column":28,"nodeType":"378","messageId":"379","endLine":123,"endColumn":30},{"ruleId":"343","severity":1,"message":"421","line":181,"column":6,"nodeType":"345","endLine":181,"endColumn":8,"suggestions":"422"},{"ruleId":"343","severity":1,"message":"413","line":213,"column":5,"nodeType":"345","endLine":213,"endColumn":16,"suggestions":"423"},{"ruleId":"424","severity":1,"message":"425","line":220,"column":53,"nodeType":"426","messageId":"427","endLine":220,"endColumn":54,"fix":"428"},{"ruleId":"415","severity":1,"message":"416","line":265,"column":14,"nodeType":"417","endLine":265,"endColumn":54},{"ruleId":"355","severity":1,"message":"392","line":4,"column":10,"nodeType":"357","messageId":"358","endLine":4,"endColumn":16},{"ruleId":"355","severity":1,"message":"395","line":9,"column":8,"nodeType":"357","messageId":"358","endLine":9,"endColumn":21},{"ruleId":"355","severity":1,"message":"381","line":19,"column":9,"nodeType":"357","messageId":"358","endLine":19,"endColumn":16},{"ruleId":"343","severity":1,"message":"429","line":63,"column":5,"nodeType":"345","endLine":63,"endColumn":7,"suggestions":"430"},{"ruleId":"347","severity":1,"message":"399","line":112,"column":39,"nodeType":"349","messageId":"400","endLine":112,"endColumn":41},{"ruleId":"355","severity":1,"message":"370","line":1,"column":27,"nodeType":"357","messageId":"358","endLine":1,"endColumn":36},{"ruleId":"355","severity":1,"message":"431","line":2,"column":8,"nodeType":"357","messageId":"358","endLine":2,"endColumn":16},{"ruleId":"355","severity":1,"message":"432","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":20},{"ruleId":"355","severity":1,"message":"369","line":4,"column":8,"nodeType":"357","messageId":"358","endLine":4,"endColumn":17},{"ruleId":"355","severity":1,"message":"433","line":5,"column":8,"nodeType":"357","messageId":"358","endLine":5,"endColumn":14},{"ruleId":"355","severity":1,"message":"434","line":7,"column":8,"nodeType":"357","messageId":"358","endLine":7,"endColumn":15},{"ruleId":"355","severity":1,"message":"435","line":8,"column":16,"nodeType":"357","messageId":"358","endLine":8,"endColumn":20},{"ruleId":"355","severity":1,"message":"436","line":10,"column":10,"nodeType":"357","messageId":"358","endLine":10,"endColumn":20},{"ruleId":"355","severity":1,"message":"437","line":11,"column":8,"nodeType":"357","messageId":"358","endLine":11,"endColumn":14},{"ruleId":"355","severity":1,"message":"438","line":15,"column":7,"nodeType":"357","messageId":"358","endLine":15,"endColumn":16},{"ruleId":"415","severity":1,"message":"416","line":20,"column":16,"nodeType":"417","endLine":20,"endColumn":94},{"ruleId":"355","severity":1,"message":"439","line":15,"column":10,"nodeType":"357","messageId":"358","endLine":15,"endColumn":22},{"ruleId":"355","severity":1,"message":"372","line":15,"column":23,"nodeType":"357","messageId":"358","endLine":15,"endColumn":32},{"ruleId":"355","severity":1,"message":"374","line":15,"column":33,"nodeType":"357","messageId":"358","endLine":15,"endColumn":45},{"ruleId":"355","severity":1,"message":"440","line":15,"column":55,"nodeType":"357","messageId":"358","endLine":15,"endColumn":64},{"ruleId":"343","severity":1,"message":"441","line":23,"column":5,"nodeType":"345","endLine":23,"endColumn":18,"suggestions":"442"},{"ruleId":"343","severity":1,"message":"367","line":26,"column":5,"nodeType":"345","endLine":26,"endColumn":7,"suggestions":"443"},{"ruleId":"355","severity":1,"message":"444","line":4,"column":9,"nodeType":"357","messageId":"358","endLine":4,"endColumn":15},{"ruleId":"355","severity":1,"message":"444","line":13,"column":9,"nodeType":"357","messageId":"358","endLine":13,"endColumn":15},{"ruleId":"355","severity":1,"message":"445","line":67,"column":11,"nodeType":"357","messageId":"358","endLine":67,"endColumn":30},{"ruleId":"355","severity":1,"message":"446","line":10,"column":8,"nodeType":"357","messageId":"358","endLine":10,"endColumn":20},{"ruleId":"355","severity":1,"message":"447","line":14,"column":8,"nodeType":"357","messageId":"358","endLine":14,"endColumn":14},{"ruleId":"355","severity":1,"message":"448","line":15,"column":8,"nodeType":"357","messageId":"358","endLine":15,"endColumn":19},{"ruleId":"355","severity":1,"message":"449","line":16,"column":10,"nodeType":"357","messageId":"358","endLine":16,"endColumn":15},{"ruleId":"355","severity":1,"message":"392","line":19,"column":9,"nodeType":"357","messageId":"358","endLine":19,"endColumn":15},{"ruleId":"355","severity":1,"message":"450","line":31,"column":9,"nodeType":"357","messageId":"358","endLine":31,"endColumn":16},{"ruleId":"355","severity":1,"message":"451","line":63,"column":9,"nodeType":"357","messageId":"358","endLine":63,"endColumn":15},{"ruleId":"355","severity":1,"message":"452","line":1,"column":25,"nodeType":"357","messageId":"358","endLine":1,"endColumn":31},{"ruleId":"355","severity":1,"message":"453","line":11,"column":10,"nodeType":"357","messageId":"358","endLine":11,"endColumn":14},{"ruleId":"355","severity":1,"message":"454","line":15,"column":9,"nodeType":"357","messageId":"358","endLine":15,"endColumn":20},{"ruleId":"355","severity":1,"message":"455","line":20,"column":7,"nodeType":"357","messageId":"358","endLine":20,"endColumn":18},{"ruleId":"355","severity":1,"message":"456","line":21,"column":7,"nodeType":"357","messageId":"358","endLine":21,"endColumn":13},{"ruleId":"355","severity":1,"message":"457","line":14,"column":31,"nodeType":"357","messageId":"358","endLine":14,"endColumn":38},{"ruleId":"355","severity":1,"message":"370","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"418","line":1,"column":36,"nodeType":"357","messageId":"358","endLine":1,"endColumn":44},{"ruleId":"347","severity":1,"message":"348","line":84,"column":32,"nodeType":"349","messageId":"350","endLine":84,"endColumn":34},{"ruleId":"355","severity":1,"message":"458","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":16},{"ruleId":"355","severity":1,"message":"459","line":12,"column":10,"nodeType":"357","messageId":"358","endLine":12,"endColumn":20},{"ruleId":"355","severity":1,"message":"453","line":20,"column":12,"nodeType":"357","messageId":"358","endLine":20,"endColumn":16},{"ruleId":"355","severity":1,"message":"460","line":20,"column":18,"nodeType":"357","messageId":"358","endLine":20,"endColumn":25},{"ruleId":"339","replacedBy":"461"},{"ruleId":"341","replacedBy":"462"},"no-native-reassign",["463"],"no-negated-in-lhs",["464"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecData'. Either include it or remove the dependency array.","ArrayExpression",["465"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["466"],"React Hook useEffect has a missing dependency: 'messageCounter'. Either include it or remove the dependency array.",["467"],"no-unused-vars","'counte' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'msgNotify'. Either include it or remove the dependency array.",["468"],"React Hook useEffect has a missing dependency: 'acceptRejectCounter'. Either include it or remove the dependency array.",["469"],"React Hook useEffect has a missing dependency: 'clientSocket'. Either include it or remove the dependency array.",["470"],"React Hook useEffect has a missing dependency: 'messageEvent'. Either include it or remove the dependency array.",["471"],"React Hook useEffect has missing dependencies: 'myId' and 'roomJoin'. Either include them or remove the dependency array.",["472"],"'PageTitle' is defined but never used.","'useEffect' is defined but never used.","'io' is defined but never used.","'setSocket' is assigned a value but never used.","'roomJoin' is assigned a value but never used.","'messageEvent' is assigned a value but never used.","'clientSocket1' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'classes' is assigned a value but never used.","'history' is assigned a value but never used.","'notPresent' is assigned a value but never used.","'recMsgs' is assigned a value but never used.","'dummy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientSocket', 'getRecData', and 'uId'. Either include them or remove the dependency array.",["473"],["474"],"React Hook useEffect has missing dependencies: 'lastMsg', 'setNewRecipient', 'setRecArray', and 'usersData'. Either include them or remove the dependency array.",["475"],"React Hook useEffect has a missing dependency: 'getUnreadMsgs'. Either include it or remove the dependency array.",["476"],"'Button' is defined but never used.","'PersonAddIcon' is defined but never used.","'MyChatsContext' is defined but never used.","'ArrowBackIcon' is defined but never used.","'grey' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllMyFriends'. Either include it or remove the dependency array.",["477"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'returndata' is defined but never used.","'count' is assigned a value but never used.",["478"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chat.messages'. Either include it or remove the dependency array.",["479"],"'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["480"],"React Hook useEffect has missing dependencies: 'match.params.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["481"],["482"],"React Hook React.useCallback has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["483"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'acceptRejectCounter' and 'myId'. Either include them or remove the dependency array.",["484"],"React Hook useEffect has missing dependencies: 'myId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["485"],["486"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"487","text":"488"},"React Hook useEffect has missing dependencies: 'getData' and 'getSingleContact'. Either include them or remove the dependency array.",["489"],"'AlertBar' is defined but never used.","'LinearBuffer' is defined but never used.","'Select' is defined but never used.","'Resizer' is defined but never used.","'cyan' is defined but never used.","'useHistory' is defined but never used.","'Webcam' is defined but never used.","'useStyles' is assigned a value but never used.","'clientSocket' is assigned a value but never used.","'friendReq' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRequest'. Either include it or remove the dependency array.",["490"],["491"],"'config' is assigned a value but never used.","'contactClickHandler' is assigned a value but never used.","'ListItemIcon' is defined but never used.","'Header' is defined but never used.","'chatservice' is defined but never used.","'toast' is defined but never used.","'options' is assigned a value but never used.","'imgUrl' is assigned a value but never used.","'useRef' is defined but never used.","'open' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'indexOfTerm' is assigned a value but never used.","'msgArr' is assigned a value but never used.","'chatRec' is assigned a value but never used.","'Checkbox' is defined but never used.","'Typography' is defined but never used.","'setOpen' is assigned a value but never used.",["463"],["464"],"no-global-assign","no-unsafe-negation",{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"502","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"502","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"522","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"525","fix":"531"},[7523,7537],"\r\n           .",{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"506","fix":"536"},"Update the dependencies array to be: [getRecData, userId]",{"range":"537","text":"538"},"Update the dependencies array to be: [id]",{"range":"539","text":"540"},"Update the dependencies array to be: [messageCounter]",{"range":"541","text":"542"},"Update the dependencies array to be: [msgNotify]",{"range":"543","text":"544"},"Update the dependencies array to be: [acceptRejectCounter]",{"range":"545","text":"546"},"Update the dependencies array to be: [clientSocket]",{"range":"547","text":"548"},"Update the dependencies array to be: [messageEvent]",{"range":"549","text":"550"},"Update the dependencies array to be: [myId, roomJoin]",{"range":"551","text":"552"},"Update the dependencies array to be: [clientSocket, getRecData, uId]",{"range":"553","text":"554"},{"range":"555","text":"548"},"Update the dependencies array to be: [lastMsg, payload, setNewRecipient, setRecArray, usersData]",{"range":"556","text":"557"},"Update the dependencies array to be: [getUnreadMsgs, userId]",{"range":"558","text":"559"},"Update the dependencies array to be: [getAllMyFriends]",{"range":"560","text":"561"},{"range":"562","text":"548"},"Update the dependencies array to be: [chat.messages, searchTerm]",{"range":"563","text":"564"},"Update the dependencies array to be: [formData, match.params]",{"range":"565","text":"566"},"Update the dependencies array to be: [match.params.token, values]",{"range":"567","text":"568"},{"range":"569","text":"568"},"Update the dependencies array to be: [values]",{"range":"570","text":"571"},"Update the dependencies array to be: [acceptRejectCounter, myId]",{"range":"572","text":"573"},"Update the dependencies array to be: [myId, values]",{"range":"574","text":"575"},{"range":"576","text":"571"},"Update the dependencies array to be: [getData, getSingleContact]",{"range":"577","text":"578"},"Update the dependencies array to be: [frndcounter, getRequest]",{"range":"579","text":"580"},{"range":"581","text":"552"},[742,750],"[getRecData, userId]",[1151,1153],"[id]",[1537,1539],"[messageCounter]",[1086,1088],"[msgNotify]",[1127,1129],"[acceptRejectCounter]",[1875,1877],"[clientSocket]",[1963,1965],"[messageEvent]",[2016,2018],"[myId, roomJoin]",[6052,6054],"[clientSocket, getRecData, uId]",[6248,6250],[7724,7733],"[lastMsg, payload, setNewRecipient, setRecArray, usersData]",[553,561],"[getUnreadMsgs, userId]",[2197,2199],"[getAllMyFriends]",[4300,4302],[7149,7161],"[chat.messages, searchTerm]",[1648,1662],"[formData, match.params]",[1681,1683],"[match.params.token, values]",[5157,5159],[6381,6392],"[values]",[2202,2204],"[acceptRejectCounter, myId]",[6003,6005],"[myId, values]",[7272,7283],[2267,2269],"[getData, getSingleContact]",[799,812],"[frndcounter, getRequest]",[862,864]]