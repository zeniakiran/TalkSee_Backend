[{"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js":"1","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js":"2","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js":"3","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js":"4","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js":"5","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js":"6","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js":"7","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js":"8","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js":"9","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js":"10","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js":"11","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js":"12","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js":"13","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js":"14","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js":"15","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js":"16","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js":"17","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js":"18","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js":"19","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js":"20","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js":"21","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js":"22","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js":"23","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js":"24","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js":"25","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js":"26","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js":"27","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js":"28","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js":"29","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js":"30","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js":"31","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js":"32","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js":"33","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js":"34","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js":"35","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js":"36","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js":"37","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js":"38","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js":"39","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js":"40","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js":"41","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js":"42","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\DeleteMsg.js":"43"},{"size":1664,"mtime":1618506463362,"results":"44","hashOfConfig":"45"},{"size":375,"mtime":1616782544565,"results":"46","hashOfConfig":"45"},{"size":3931,"mtime":1622718923915,"results":"47","hashOfConfig":"45"},{"size":3708,"mtime":1621345934275,"results":"48","hashOfConfig":"45"},{"size":12441,"mtime":1622695915436,"results":"49","hashOfConfig":"45"},{"size":453,"mtime":1616782544553,"results":"50","hashOfConfig":"45"},{"size":3893,"mtime":1619043543177,"results":"51","hashOfConfig":"45"},{"size":4158,"mtime":1616842370700,"results":"52","hashOfConfig":"45"},{"size":11582,"mtime":1618506463215,"results":"53","hashOfConfig":"45"},{"size":7992,"mtime":1619043543247,"results":"54","hashOfConfig":"45"},{"size":1638,"mtime":1622718923927,"results":"55","hashOfConfig":"45"},{"size":2807,"mtime":1622718923928,"results":"56","hashOfConfig":"45"},{"size":8261,"mtime":1622993863257,"results":"57","hashOfConfig":"45"},{"size":8651,"mtime":1622718923927,"results":"58","hashOfConfig":"45"},{"size":7953,"mtime":1622718923923,"results":"59","hashOfConfig":"45"},{"size":11516,"mtime":1622718923915,"results":"60","hashOfConfig":"45"},{"size":4447,"mtime":1622718923921,"results":"61","hashOfConfig":"45"},{"size":4744,"mtime":1622718923921,"results":"62","hashOfConfig":"45"},{"size":3429,"mtime":1622718923923,"results":"63","hashOfConfig":"45"},{"size":4722,"mtime":1622718923923,"results":"64","hashOfConfig":"45"},{"size":12774,"mtime":1622718923926,"results":"65","hashOfConfig":"45"},{"size":781,"mtime":1619043543240,"results":"66","hashOfConfig":"45"},{"size":425,"mtime":1621345934278,"results":"67","hashOfConfig":"45"},{"size":2341,"mtime":1616782544527,"results":"68","hashOfConfig":"45"},{"size":1137,"mtime":1616782544530,"results":"69","hashOfConfig":"45"},{"size":593,"mtime":1618506463181,"results":"70","hashOfConfig":"45"},{"size":994,"mtime":1622718923928,"results":"71","hashOfConfig":"45"},{"size":679,"mtime":1622718923929,"results":"72","hashOfConfig":"45"},{"size":6049,"mtime":1622992577086,"results":"73","hashOfConfig":"45"},{"size":522,"mtime":1616840429624,"results":"74","hashOfConfig":"45"},{"size":873,"mtime":1622718923929,"results":"75","hashOfConfig":"45"},{"size":2971,"mtime":1622718923923,"results":"76","hashOfConfig":"45"},{"size":1643,"mtime":1616782544570,"results":"77","hashOfConfig":"45"},{"size":2483,"mtime":1622718923924,"results":"78","hashOfConfig":"45"},{"size":284,"mtime":1616840482236,"results":"79","hashOfConfig":"45"},{"size":268,"mtime":1616840453924,"results":"80","hashOfConfig":"45"},{"size":308,"mtime":1619043543315,"results":"81","hashOfConfig":"45"},{"size":1894,"mtime":1622718923919,"results":"82","hashOfConfig":"45"},{"size":3856,"mtime":1622718923924,"results":"83","hashOfConfig":"45"},{"size":2690,"mtime":1622718923925,"results":"84","hashOfConfig":"45"},{"size":8188,"mtime":1622718923918,"results":"85","hashOfConfig":"45"},{"size":3251,"mtime":1622991903987,"results":"86","hashOfConfig":"45"},{"size":2155,"mtime":1622985701665,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"ydvxbn",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"91"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"91"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"91"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"91"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"91"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"91"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"91"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"91"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"145","usedDeprecatedRules":"91"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"91"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"91"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js",["192","193","194","195"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n//import Pusher from 'pusher-js';\r\n//import Reducer from './Redux/reducers/chat_reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n//Pusher.logToConsole = true;\r\n\r\n//useEffect (()=>{\r\n  /* const pusher = new Pusher('18cb37e3146179a6a80e', {\r\n  cluster: 'ap2',\r\n  authEndpoint: 'http://localhost:5000/api/chatapi/pusher/auth'\r\n}); */\r\n/* usher.connection.bind('connected', function () {\r\n  // attach the socket ID to all outgoing Axios requests\r\n  axios.defaults.headers.common['X-Socket-Id'] = pusher.connection.socket_id;\r\n  console.log(\"id:\",pusher.connection.socket_id)\r\n}); */\r\n//},[])\r\n/* var channel = pusher.subscribe('private-my-channel');\r\nchannel.bind('my-event', function(data) {\r\n  console.log(\"in bind\")\r\n  alert(JSON.stringify(data));\r\n  console.log(\"pusher data:\",data)\r\n}); */\r\n\r\n//const myStore = createStore(Reducer, window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                            //window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\n/* ReactDOM.render(\r\n  <Provider\r\n        store={myStore}\r\n        >\r\n        <App />\r\n  </Provider>\r\n    \r\n  ,\r\n  document.getElementById('root')\r\n); */\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["196","197"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js",["198","199","200","201"],"import React ,{createContext, useRef,useEffect,useState} from 'react'\r\nimport chatservice from \"../services/ChatService\"\r\nimport userservice from \"../services/UserService\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const MyChatsContext = createContext();\r\nexport function MyChatsProvider({userId,children}) {\r\n    const [chatRecipients,setChatRecipients] = useState([])\r\n    let recData = []\r\n    let recMsgs = []\r\n    let msgType = []\r\n    let recName = []\r\n    let recId=[]\r\n    let imgUrl =[]\r\n    useEffect(()=>{\r\n        //userId.current = localStorage.getItem(\"userId\")\r\n        if(userId !== undefined){\r\n        getRecData(userId,undefined)\r\n        //console.log(userId)\r\n        }\r\n        console.log(\"undefined\")\r\n        \r\n    },[userId])\r\n\r\n    const getRecData = (uId)=>{\r\n         recData = []; recName =[]; recMsgs = []; msgType = []; imgUrl=[]; recId=[]\r\n        //console.log(\"in getdata\")\r\n        chatservice.getChatRecipients(uId).then((data)=>{    \r\n            if(data.length>0){\r\n                //console.log(\"data getchat\",data)\r\n                /* dataFromDb.push(data)\r\n                console.log(\"data from db getchat\",dataFromDb) */\r\n                data.map((rec) =>{\r\n                    //console.log('single rec',rec)\r\n                    return recData.push(rec)\r\n                })\r\n                console.log(\"rec data\",recData)\r\n                recData = Array.from(new Set(recData));\r\n                console.log(\"rec data updated\",recData)\r\n                setChatRecipients((r)=>{\r\n                    r.Rname=recData\r\n                    //console.log(chatRecipients)\r\n                    return r\r\n                })\r\n                chatRecipients.Rname.map((r)=>{\r\n                    //console.log(\"r\",r)\r\n                    chatservice.getLastMsg(uId, r)\r\n                    .then((data1)=>{\r\n                        //console.log(\"data\",data1.type)\r\n                        recMsgs.push(data1.lastMsg)\r\n                        msgType.push(data1.type)\r\n                        //return {recMsgs,msgType}\r\n                    })\r\n                    .catch((err)=>console.log(err))\r\n\r\n                    userservice.getUserByEmail(r).then((data2)=>{\r\n                        //console.log(\"data 2\",data2)\r\n                        recId.push(data2[0]._id)\r\n                        imgUrl.push(data2[0].profileImg)\r\n                        recName.push(data2[0].firstName+' '+data2[0].lastName)\r\n                        setChatRecipients((r)=>{\r\n                            r.lastMsg = recMsgs\r\n                            r.msgType = msgType\r\n                            r.recId = recId\r\n                            r.imgUrl= imgUrl\r\n                            r.name = recName\r\n                            console.log(chatRecipients)\r\n                            return r\r\n                        })\r\n                       /*  if(cb === undefined)\r\n                            console.log(\"do nothing\")\r\n                        else\r\n                            cb() */\r\n                    }).catch((err)=>console.log(err))\r\n                })\r\n                \r\n            }\r\n            else\r\n                console.log(\"no data\")\r\n            \r\n            })\r\n            .catch((err)=>console.log(err))\r\n            return chatRecipients\r\n    }\r\n\r\n    /* useEffect(()=>{\r\n        \r\n    },[chatRecipients]) */\r\n    //getRecData()\r\n  const value = {\r\n      chatRecipients : chatRecipients,\r\n      getRecData : getRecData,\r\n      setRecipients : setChatRecipients,\r\n      /* setuuIdFunc : setuuId,\r\n      uuId : uuId */\r\n  }\r\n  return (\r\n    <MyChatsContext.Provider value={value}>\r\n      {children}\r\n    </MyChatsContext.Provider>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js",["202","203","204"],"import React, { useState, useEffect } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst ProfileSetup = ( {match}) => {\r\n    const classes = useStyles();\r\n      let history = useHistory();\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n    const [values, setValues] = useState({\r\n    img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n    language:\"\",\r\n    token:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language,token, successMsg, errorMessage,infoMessage, loading } = values;\r\nuseEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       const data = new FormData();\r\n      data.append(\"file\", imageSrc);\r\n      axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n          })\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n   \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data)\r\n         .then(async (response) => {\r\n         setValues({ ...values , errorMessage :\"\", successMsg:\"response.data.successMessage\"})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst SetProfile =()=>{\r\n  accountService.profileSetup({profileImg: img, langPreference: language, token})\r\n .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n            language:\"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n                   <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div>\r\n                 <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div> \r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.label === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => {\r\n                      console.log(e)\r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1.5rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={SetProfile}\r\n            \r\n          >\r\n            Set Profile\r\n          </Button>\r\n                   {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n      </div> \r\n         \r\n     \r\n \r\n\r\n \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <h3 className=\"modal-title\" id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n     <PageTitle name= {\"Profile Setup\"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default ProfileSetup;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js",["205","206"],"import React, { useState, useEffect } from 'react';\r\nimport accountService from \"../../../services/accountService\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { grey,green, cyan,red} from '@material-ui/core/colors';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport PageTitle from \"./pageTitle\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst Activate = ({ match }) => {\r\n let token1 = match.params.token;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    token: '',\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n  });\r\n   const { firstName,lastName, token, errorMessage, successMsg} = formData;\r\n   let history = useHistory()\r\n  useEffect(() => {\r\n    let token = match.params.token;\r\n    let { firstName } = jwt.decode(token);\r\n    let { lastName } = jwt.decode(token);\r\n    if (token) {\r\n      setFormData({ ...formData, firstName,lastName,  token });  \r\n      accountService.accountActivation({token})\r\n      .then(response => {\r\n        setFormData({\r\n          ...formData,\r\n          errorMessage: false,\r\n          successMsg: response.successMessage,\r\n          firstName: response.firstName,\r\n          lastName: response.lastName,\r\n        });\r\n      })\r\n      .catch(err => {\r\n      setFormData({\r\n          ...formData,\r\n          successMsg: false,\r\n         errorMessage: err.response.data.errorMessage,\r\n          firstName: err.response.data.firstName,\r\n          lastName: err.response.data.lastName,\r\n        });\r\n      });\r\n    }}, [match.params]);\r\n     \r\n  \r\n  const ActivationSuccess=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName +\" \"+lastName}</strong></p>\r\n        <div>  <CheckCircleRoundedIcon \r\n              style = {{ color: green[600],paddingTop:\"0.3rem\" }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > Your account has been successfully verified. Click below to create your profile</span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n              variant=\"contained\"\r\n              className= \"loginbtn\"\r\n              onClick={event =>  history.push('/profile-setup/'+token1)}\r\n             \r\n          >\r\n            Create Profile\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n   const ActivationFailure=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName+\" \"+lastName}</strong></p>\r\n        <div>  <CancelRoundedIcon \r\n              style = {{ color: red[600]  }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > <strong>{errorMessage}</strong> </span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n            variant=\"contained\"\r\n             className= \"loginbtn\"\r\n            onClick={event =>  history.push('/signup')}\r\n             \r\n          >\r\n               Try  Again   \r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n  return (\r\n  <div>\r\n        <PageTitle name= {\"Activation\"}/>\r\n       {errorMessage && ( ActivationFailure())}\r\n       {successMsg && (ActivationSuccess())}\r\n  </div>)\r\n      }\r\nexport default Activate;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js",["207"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport accountService from \"../../../services/accountService\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n import { grey, cyan,indigo} from '@material-ui/core/colors';\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n const useStyles = makeStyles((theme) => ({\r\n  textfield: {\r\n     margin: theme.spacing(1),\r\n  },\r\n   margin:{\r\n     marginTop: \"1.2rem\"\r\n   } \r\n}));\r\n\r\nconst ResetPassword = ({ match }) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [values, setValues] = useState({\r\n    token: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  \r\n   const {\r\n    token,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n\r\n    useEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n    const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   const ResetPasswordBtn = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)\r\n    ) {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n    } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Passwords do not match\" });\r\n    } else {\r\n  \r\n     \r\n      setValues({ ...values, loading: true });\r\n     accountService.resetPassword( { newPassword: password, resetPasswordLink: token})\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n             password: \"\",\r\n            confirmPassword: \"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n     \r\n  const ResetPasswordForm=()=>(\r\n      \r\n    <Grid container >\r\n      <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper style={{padding: '30px 50px'}} >\r\n          <Button  \r\n            className= \"loginbtn\"\r\n            href=\"https://mail.google.com/mail/u/0/#inbox\"\r\n            color=\"primary\"\r\n           style={{marginBottom:\"2rem\" ,paddingLeft:\"0rem\",color:indigo[800]  }}\r\n          >\r\n           <ArrowBackIcon style={{fontWeight:\"bold\",marginRight:\"0.3rem\"}}/> Go Back\r\n          </Button>\r\n             <FormControl className={clsx( classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> New Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    \r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={ResetPasswordBtn}\r\n          >\r\n            Reset Password \r\n          </Button>\r\n          {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n           </Paper>\r\n        </Grid>\r\n     <Grid item xs={1} sm={3} md={4}></Grid>\r\n    </Grid>\r\n       \r\n  );   \r\n  return (\r\n  <div>\r\n        {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <PageTitle name= {\"Reset Password\"}/>\r\n      {ResetPasswordForm()}\r\n      \r\n  </div>)\r\n      }\r\nexport default ResetPassword;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js",["208","209","210","211","212"],"import React ,{createContext, useEffect} from 'react'\r\nimport chatservice from '../services/ChatService'\r\n//import {showNotification} from '../components/FrontendComponents/Alerts/showMessage'\r\n//import Notification from '../components/FrontendComponents/Alerts/Notification'\r\nimport { toast } from 'react-toastify';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({userId,setMsg,children}) =>{\r\n    let elem = null\r\n    let msg = ''\r\n    useEffect(()=>{\r\n        getUnreadMsgs(userId)\r\n    },[userId])\r\n    const getUnreadMsgs =(email)=>{\r\n        chatservice.offlinemessages(email)\r\n        .then((res)=>{\r\n            if(res.count > 0){\r\n                console.log(\"count\",res.count)\r\n                msg = 'You have '+res.count+ ' new messages!'\r\n                /* elem = (\r\n                    <Notification msg = {msg}/>\r\n                ) */\r\n                //setMsg(msg)\r\n                if(res.info.sender[0] !== userId){\r\n                    console.log(\"sender\",res.info.sender)\r\n                    console.log(\"user\",userId)\r\n                toast.info(msg,{\r\n                position: toast.POSITION.TOP_LEFT,\r\n                transition: Zoom\r\n            })\r\n                }\r\n                else{\r\n                    console.log(\"is sender\")\r\n                }\r\n        \r\n            }\r\n        })\r\n        .catch((err)=>console.log(err))\r\n    }\r\n    \r\n    return (\r\n        <ChatContext.Provider value = {{getUnreadMsgs: getUnreadMsgs}}>\r\n        \r\n            {children}\r\n        </ChatContext.Provider>\r\n    );\r\n}\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js",["213","214","215","216","217"],"import React ,{createContext,useEffect,useState,useRef} from 'react'\r\nimport io from \"socket.io-client\";\r\nimport { toast } from 'react-toastify';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const SocketContext = createContext();\r\nexport function SocketProvider({id,children}) {\r\n  \r\n  const [clientSocket, setSocket] = useState()\r\n  let count=0;\r\n  let roomId = useRef()\r\n  \r\n  useEffect(() => {\r\n    \r\n    const socket = io(\r\n      'http://localhost:5000',\r\n    )\r\n    setSocket(socket)\r\n    return () => socket.close()\r\n    /* clientSocket.current = io(\"http://127.0.0.1:5000\");\r\n    clientSocket.current.on('connect' , () => {\r\n      console.log(clientSocket.current.id);\r\n    }); */\r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    roomId.current= '/'+id\r\n    console.log(roomId)\r\n  },[])\r\n\r\n  const newMessageEvent = () => {\r\n    if(clientSocket){\r\n      clientSocket.on(\"newMessage\", (payload) => {\r\n      <button onClick={()=>console.log(\"clicked\")}>{toast(payload.RecipientName +':'+\r\n        payload.payload.messageBody, {\r\n          onOpen: () => console.log('Called when I open'),\r\n          position: toast.POSITION.TOP_LEFT,\r\n          toastId: '007',\r\n          transition: Bounce\r\n        })}\r\n      </button>\r\n      //count=count+1\r\n      console.log(\"new message\",payload)\r\n      })\r\n    }\r\n    else {\r\n      console.log(\"no socket\")\r\n    }  \r\n  //return () => {clientSocket.removeAllListeners(\"newMessage\");}\r\n  }\r\n\r\n  /* useEffect(()=>{\r\n    newMessageEvent()\r\n    console.log(\"2\")\r\n  },[])\r\n */\r\n  const roomJoin = (did) =>{\r\n    //did = did || roomId.current\r\n    did = '/'+did\r\n    if(clientSocket){\r\n      clientSocket.emit(\r\n        \"NotificationRoom\",\r\n        { myNotificationRoom : did},\r\n        ({error,room}) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  const friendReqEvent = () =>{\r\n    console.log(\"friend Req event\")\r\n    if(clientSocket){\r\n      clientSocket.on(\"newRequest\", (payload) => {\r\n          console.log(\"payload : \",payload)\r\n          toast.info(\r\n          payload.sender+ ' has sent you a friend request!', {\r\n          position: toast.POSITION.TOP_LEFT,\r\n          //toastId: '009',\r\n          autoClose: 7000,\r\n          transition: Bounce\r\n        })\r\n      })\r\n    }\r\n    else{\r\n      console.log(\"no socket\")\r\n    }\r\n  }\r\n  \r\n\r\n  let value={\r\n    clientSocket : clientSocket,\r\n    setSocket : setSocket,\r\n    messageEvent : newMessageEvent,\r\n    roomJoin : roomJoin,\r\n    friendReq : friendReqEvent\r\n  }\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n\r\n  \r\n}","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js",["218","219","220","221","222","223","224","225"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js",["226","227","228","229","230","231"],"import React, { useEffect, useState,useContext,useRef } from \"react\";\r\nimport Header from \"./Header\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n//import {MyChatsContext} from '../../../context/MyChatsContext';\r\nimport io from \"socket.io-client\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {ChatContext} from '../../../context/ChatContext';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport GroupAddRoundedIcon from '@material-ui/icons/GroupAddRounded';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport chatservice from '../../../services/ChatService';\r\nimport accountService from '../../../services/accountService';\r\nimport friendService from '../../../services/friendService';\r\n //import { ToastContainer } from 'react-toastify';\r\n//import Toast from 'react-bootstrap/Toast' \r\nimport '../../ChatComponents/chat.css'\r\nimport PageTitle from \"./pageTitle\";\r\n\r\n\r\nconst UserDashboard = ({uuId}) => {\r\n  //const {chatRecipients,setRecipients,getRecData} = useContext(MyChatsContext);\r\n  const [obj, setObj] = useState({})\r\n  const myId= isAuthenticated()._id;\r\n  const [count,setCount]= useState(0)\r\n  const [friendCount,setFriendCount]=useState(0);\r\n  let showBtn = useRef(0)\r\n  let userEmail = useRef()\r\n  let history = useHistory()\r\n  userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n  console.log(userEmail)\r\n  const {clientSocket,setSocket,messageEvent,roomJoin,friendReq} = useContext(SocketContext);\r\n\r\n  let clientSocket1 = useRef()\r\n   \r\n   window.onload = () => {\r\n       friendReq()\r\n     messageEvent()\r\n    roomJoin(myId)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n  setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n        \r\n      });\r\n      return s;\r\n    })\r\n  };\r\nconst DeleteAccount =()=>{\r\naccountService.deleteMyAccount(myId)\r\n .then((res) =>history.push('/signup'))\r\n  .catch((err) => console.log(err));\r\n}\r\n  useEffect(()=>{\r\n    chatservice.offlinemessages(isAuthenticated().email)\r\n        .then((res)=>{\r\n            if(res.count > 0){\r\n              setObj((o)=>{\r\n                o = {sender: res.info.sender, receiver: res.info.receiver}\r\n                return o\r\n              })\r\n              //obj = {sender: res.info.sender, receiver: res.info.receiver}\r\n              console.log(\"obj\",obj)\r\n              setCount((c)=>{\r\n                c = res.count\r\n                return c\r\n              })\r\n       \r\n            }\r\n        })\r\n        .catch((err)=>console.log(err))\r\n\r\n  },[])\r\nuseEffect(()=>{\r\n  friendService.getFriendRequestsCount(myId)\r\n  .then((res)=>{ \r\n     if(res> 0)\r\n     setFriendCount(res)\r\n  })\r\n  .catch((err)=>console.log(err))\r\n},[])\r\n  \r\n  \r\n   useEffect(()=>{\r\n    if(clientSocket!==undefined){\r\n        console.log(clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }\r\n   },[],[clientSocket])\r\n\r\n   useEffect (()=>{\r\n    //friendReq()\r\n     messageEvent()\r\n     //friendReq()\r\n   },[]);\r\n\r\n   useEffect (()=>{\r\n    roomJoin(myId)\r\n  },[]);\r\n\r\n  return <div style={{height:\"100vh\"}} className=\"back_divs\">\r\n    <Header/>\r\n    <PageTitle name={\"Dashboard\"}/>\r\n   {/* <ToastContainer/> */}\r\n     <Grid container>\r\n       <Grid item xs={1} md={4}></Grid>\r\n       <Grid item xs={10} md={4}>\r\n          <Button className= \"loginbtn\"\r\n             style={{padding:\"10px 20px\",display:\"block\",backgroundColor:\"#C8906A\"}}\r\n            variant=\"contained\" \r\n            color=\"Secondary\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/all-contacts/'+myId)}>\r\n              <PersonAddIcon className='chaticon'\r\n              color = \"white\"/> Add New friend\r\n            </Button>\r\n            <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 40px\",marginTop:\"2rem\",display:\"block\",backgroundColor:\"#C0C86A\"}}\r\n            variant=\"contained\" \r\n            color=\"Secondary\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/all-my-friends/'+myId)}>\r\n              < PeopleAltIcon className='chaticon'\r\n              color = \"white\"/> My Friends\r\n            </Button>\r\n            {\r\n    obj.sender !== undefined ?\r\n        obj.sender.forEach((o)=>\r\n        {\r\n            o !== userEmail.current ?\r\n            showBtn.current = showBtn.current + 1\r\n          :\r\n          showBtn.current = 0\r\n          })\r\n    :\r\n    null\r\n    }\r\n    \r\n        {\r\n          showBtn.current >= 1 ?\r\n           <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 20px\" , marginTop:\"2rem\",display:\"block\",backgroundColor:\"#D582BD\"}}\r\n           variant=\"contained\" \r\n            color=\"Secondary\" \r\n            fullWidth\r\n             onClick={event =>  history.push('/mychats/'+myId)}>\r\n            <Badge badgeContent={count} color=\"secondary\" style={{marginRight:\"0.5rem\"}}>\r\n              <ChatIcon className='chaticon'\r\n              onClick={event =>  history.push('/mychats/'+myId)}\r\n              color = \"white\"\r\n              />  \r\n            </Badge>\r\n            My Chats\r\n            </Button>\r\n          :\r\n         <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 50px\" ,marginTop:\"2rem\",display:\"block\",backgroundColor:\"#D582BD\"}}\r\n           variant=\"contained\" \r\n            color=\"Secondary\" \r\n            fullWidth\r\n             onClick={event =>  history.push('/mychats/'+myId)}>\r\n          <ChatIcon className='chaticon'\r\n              color = \"white\"\r\n              />  My Chats\r\n            </Button>\r\n            \r\n        }    \r\n         {\r\n          friendCount >= 1 ?\r\n           <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 20px\" , marginTop:\"2rem\",display:\"block\",backgroundColor:\"#F08080 \"}}\r\n           variant=\"contained\" \r\n            color=\"Secondary\" \r\n            fullWidth\r\n             onClick={event =>  history.push('/all-friend-requests/'+myId)}>\r\n            <Badge badgeContent={friendCount} color=\"secondary\" style={{marginRight:\"0.5rem\"}}>\r\n              <PeopleAltIcon className='chaticon'\r\n              onClick={event =>  history.push('/all-friend-requests/'+myId)}\r\n              color = \"white\"\r\n              />  \r\n            </Badge>\r\n            My Friend Requests\r\n            </Button>\r\n          :\r\n         <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 50px\" ,marginTop:\"2rem\",display:\"block\",backgroundColor:\"#F08080 \"}}\r\n           variant=\"contained\" \r\n            color=\"Secondary\" \r\n            fullWidth\r\n             onClick={event =>  history.push('/all-friend-requests/'+myId)}>\r\n          <PeopleAltIcon className='chaticon'\r\n              color = \"white\"\r\n              />  My Friend Requests\r\n            </Button>\r\n            \r\n        }\r\n         <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 27px\",marginTop:\"2rem\",display:\"block\",backgroundColor:\"#69B6CF\"}}\r\n           variant=\"contained\" \r\n            color=\"Secondary\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/update-my-profile-setup/'+myId)}>\r\n              <SettingsIcon className='chaticon'\r\n              color = \"white\"/>Update Profile\r\n            </Button>\r\n       <Button className= \"loginbtn\"\r\n             style={{ padding:\"10px 21px\",marginTop:\"2rem\",display:\"block\",backgroundColor:\"#8298D5\"}}\r\n           variant=\"contained\" \r\n            color=\"Secondary\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/all-friend-requests/'+myId)}>\r\n              <GroupAddRoundedIcon className='chaticon'\r\n              color = \"white\"/>Friend Requests\r\n            </Button>\r\n             <Button className= \"loginbtn\"\r\n             style={{padding:\"10px 20px\",marginTop:\"2rem\",display:\"block\",backgroundColor:\"#C3767F\"}}\r\n            variant=\"contained\" \r\n            color=\"Secondary\"\r\n            fullWidth\r\n            onClick={DeleteAccount}>\r\n              <DeleteIcon className='chaticon'\r\n              color = \"white\"/> Delete Account\r\n            </Button>\r\n             \r\n       </Grid>\r\n        <Grid item xs={1} md={4}></Grid>\r\n     </Grid>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    </div>\r\n};\r\n\r\nexport default UserDashboard;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js",["232","233","234","235","236"],"import React, { useState, useEffect ,useContext} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from 'clsx';\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  FormControl,\r\n  Input,\r\n  InputAdornment,\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport { login } from \"../api/auth\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport io from \"socket.io-client\";\r\n//import { toast } from \"react-toastify\";\r\n\r\n\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n//import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { authentication, isAuthenticated } from \"../clientStorages/auth\";\r\n \r\nconst useStyles = makeStyles((theme) => ({\r\n   textField: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  margin:{\r\n    marginBottom: theme.spacing(2),\r\n    \r\n  }\r\n}));\r\nconst LogIn = ({onIdSubmit,setId}) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n  let clientSocket1 = React.useRef()\r\n  useEffect(() => {\r\n    if (isAuthenticated() && isAuthenticated().role === 1)\r\n      history.push(\"/admin/dashboard\");\r\n    else if (isAuthenticated() && isAuthenticated().role === 0)\r\n      history.push(\"/user/dashboard\");\r\n     \r\n      \r\n  }, [history]);\r\n  window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n   /* let did = isAuthenticated()._id;\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n \r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: isAuthenticated().email})\r\n\r\n      });\r\n      return s;\r\n    })*/\r\n  }\r\n  \r\n\r\n  useEffect(()=>{\r\n   friendReq()\r\n \r\n  },[])\r\n  const [values, setValues] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    errorMessage: \"\",\r\n    showPassword: false,\r\n    loading: false,\r\n  });\r\n  const { email, password, errorMessage, loading } = values;\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n   const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleTextChange = (evt) => {\r\n    setValues({\r\n      ...values,\r\n      [evt.target.name]: evt.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n  const Register = (event) => {\r\n    event.preventDefault();\r\n    if (isEmpty(email) || isEmpty(password)) {\r\n      setValues({ ...values, errorMessage: \"Both fields are required\" });\r\n    } else if (!isEmail(email)) {\r\n      setValues({ ...values, errorMessage: \"Invalid Email\" });\r\n    } else {\r\n      setValues({ ...values, loading: true });\r\n      const { email, password } = values;\r\n      const data = { email, password };\r\n\r\n      login(data)\r\n        .then((response) => {\r\n          authentication(response.data.token, response.data.user);\r\n          console.log(response)\r\n          if (isAuthenticated() && isAuthenticated().role === 1)\r\n            history.push(\"/dashboard/\"+isAuthenticated()._id);\r\n          else {\r\n        history.push(\"/dashboard/\"+isAuthenticated()._id);};\r\n          setValues({ ...values, loading: false });\r\n          console.log(isAuthenticated()._id)\r\n          setId(isAuthenticated()._id)\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n            password:\"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n        //var id \r\n        onIdSubmit(email)\r\n        \r\n        console.log(\"email\",email)\r\n        //generateUU(uuidv4())\r\n    }\r\n  };\r\n  \r\n  const LogInForm = () => (\r\n    <div className=\"Login-container\">\r\n      <Grid container>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm={6} md={4}>\r\n           <Paper style={{padding: '30px 50px'}} > \r\n            <Grid container style={{textAlign:\"center\"}}>\r\n          <Grid item xs={6} >\r\n            <Link className=\"active-header\"  to=\"/login\">Sign In</Link>      \r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Link className=\"header\" to=\"/signup\">Sign Up</Link>\r\n          </Grid>\r\n\r\n        </Grid>\r\n           <TextField\r\n           className={classes.textField}\r\n           style={{marginTop:\"2rem\"}}\r\n            label={\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Email Address </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"}}>*</Typography>\r\n                  </div>\r\n                  }\r\n            id=\"email-field\"\r\n            name=\"email\"\r\n            value={values.email}\r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <EmailIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n          />\r\n          \r\n         <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\"}}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n         </FormControl>\r\n            <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginBottom: \"1.2rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={Register}\r\n          >\r\n            Sign in\r\n          </Button>\r\n           <Link to=\"/forgot-password\" style={{textDecoration:\"none\",marginLeft:\"1rem auto\"}}  >Forgot Password?</Link>\r\n   </Paper>\r\n         </Grid>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      {loading && <LinearBuffer />}\r\n     \r\n             <PageTitle name= {\"TalkSee\"}/>\r\n      {LogInForm()}\r\n      \r\n     \r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n       \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js",["237","238","239","240","241","242","243","244"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PageTitle from \"../FrontendComponents/components/pageTitle\";\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\nimport \"./chat.css\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n}));\r\nconst AllChats = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { clientSocket } = useContext(SocketContext);\r\n  let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n  const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n  let emails = useRef([]);\r\n  //let usersData = useRef([])\r\n  const [usersData, setData] = useState({uData:[]});\r\n  const [lastMsg, setLastMsg] = useState({\r\n    msgs: [],\r\n    msgId: [],\r\n    emails: [],\r\n    types: [],\r\n    senders: [],\r\n    time : []\r\n  });\r\n  const [payload, setPayload] = useState()\r\n  //const [recipients, setRecipients] = useState([])\r\n  let roomId = useRef();\r\n  let count = useRef(0);\r\n  let notPresent = useRef(0);\r\n  roomId.current = \"mychats/\" + props.match.params.id;\r\n  let recData = [];\r\n  let recMsgs = [];\r\n  let dummy = [];\r\n let clientSocket1 = useRef()\r\n\r\n  window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n\r\n      });\r\n      return s;\r\n    })\r\n  };\r\n  const getRecData = (uId) => {\r\n    emails.current = []\r\n    lastMsg.msgs = []; lastMsg.msgId = []; lastMsg.emails = []; \r\n    lastMsg.types = []; lastMsg.senders = []; lastMsg.time = []; \r\n    chatservice\r\n      .getChatRecipients(uId)\r\n      .then((data) => {\r\n        if (data.length > 0) {\r\n          //console.log(\"emails before sorting\", data);\r\n          emails.current = data.sort();\r\n          emails.current = Array.from(new Set(emails.current));\r\n          console.log(\"emails after sorting\", emails.current);\r\n          userservice\r\n            .getUserByEmail({ userArray: emails.current })\r\n            .then((datafromdb) => {\r\n              recData = datafromdb;\r\n              //console.log(\"recdata\", recData);\r\n              setData((d) => {\r\n                d.uData = recData;\r\n                return d;\r\n              });\r\n            });\r\n          // let index = 0\r\n          emails.current.forEach((r, index) => {\r\n            chatservice\r\n              .getLastMsg(uId, r)\r\n              .then((data1) => {\r\n                //console.log(\"data1\", data1);\r\n                if(data1){\r\n                  setLastMsg((msg) => {\r\n                    if (\r\n                      msg.msgs.length >= 1 &&\r\n                      msg.emails.length >= 1 &&\r\n                      msg.types.length >= 1 &&\r\n                      msg.msgId.length >= 1 &&\r\n                      msg.senders.length >= 1\r\n                    ) {\r\n                      let newMsg = [...msg.msgs];\r\n                      let newR = [...msg.emails];\r\n                      let newT = [...msg.types];\r\n                      let id = [...msg.msgId];\r\n                      let sender = [...msg.senders];\r\n                      let newTime = [...msg.time]\r\n                      newMsg = [...newMsg, data1.lastMsg];\r\n                      newR = [...newR, r];\r\n                      newT = [...newT, data1.type];\r\n                      id = [...id, data1.msgId];\r\n                      sender = [...sender, data1.sender];\r\n                      newTime = [...newTime, data1.time]\r\n                      \r\n                      return {\r\n                        ...msg,\r\n                        msgs: newMsg,\r\n                        msgId: id,\r\n                        emails: newR,\r\n                        types: newT,\r\n                        senders: sender,\r\n                        time : newTime\r\n                      };\r\n                    } else {\r\n                      console.log(\"first: \", data1.lastMsg, r);\r\n                      let myMsg =  {\r\n                        msgs: [data1.lastMsg],\r\n                        msgId: [data1.msgId],\r\n                        emails: [r],\r\n                        types: [data1.type],\r\n                        senders: [data1.sender],\r\n                        time : [data1.time]\r\n                      };\r\n                      console.log(\"MY MSG: \",myMsg)\r\n                      return myMsg\r\n                    }\r\n                  });\r\n                }\r\n\r\n              })\r\n              .catch((err) => console.log(err));\r\n          });\r\n\r\n          //setLastMsg(recMsgs)\r\n\r\n          //console.log(\"recipients\",recipients)\r\n        } else console.log(\"no data\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    count.current = 0\r\n    if (clientSocket) {\r\n      clientSocket.emit(\r\n        \"myChatsRoom\",\r\n        { myChatsRoom: roomId.current },\r\n        ({ error, room }) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    //console.log(\"in useEffect 1\");\r\n    getRecData(uId);\r\n    //console.log(\"usersData 1\", usersData);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    if (clientSocket) {\r\n      clientSocket.on(\"newRecipient\", (payload) => {\r\n        setPayload((p)=>{\r\n          return p = payload\r\n        })\r\n      })\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    console.log(\"IN PAYLOAD\")\r\n    if (payload) {\r\n      console.log(\"payload\",payload)\r\n        let index;\r\n\r\n        if (usersData.uData.length !== 0 && lastMsg.msgs.length !== 0) {\r\n          console.log(\"check:\", usersData);\r\n          count.current = 0;\r\n          /* present.current =0\r\n        notPresent.current =0 */\r\n          usersData.uData.forEach((u, indx) => {\r\n            //console.log(\"emails from map\", payload.message.from, u.email);\r\n            if (payload.message.from === u.email) {\r\n              index = indx;\r\n              console.log(\"index: \", index);\r\n              count.current = count.current + 1;\r\n              console.log(\"count: \", count.current)\r\n              \r\n            } else {\r\n              //count.current.current = notPresent.current + 1 ;\r\n              console.log(\"false\");\r\n            }\r\n          });\r\n          if (count.current !== 0) {\r\n            console.log(\"before setRecArray\",lastMsg.msgs)\r\n            console.log(\"in setRecArray\",count.current);\r\n            setRecArray(\r\n              index,\r\n              payload.message\r\n            );\r\n          } else if (count.current === 0) {\r\n            setNewRecipient(\r\n              payload.message\r\n            );\r\n            console.log(\"in setNewArray\",count.current);\r\n          } else console.log(\"nothing \", count.current);\r\n        } else {\r\n          console.log(\"usersData 1\", lastMsg);\r\n        }\r\n      //});\r\n    }\r\n  }, [payload]);\r\n\r\n  const setRecArray = (index, message) => {\r\n    //if(lastMsg)\r\n    console.log(\"Last msg array and index\",lastMsg.msgs, index )\r\n    let items = []\r\n    items = [...lastMsg.msgs];\r\n    let mtypes = [...lastMsg.types]\r\n    let mTime = [...lastMsg.time]\r\n    console.log(\"items before change\", items);\r\n    items[index] = message.messageBody;\r\n    mtypes[index] = message.type\r\n    mTime[index] = message.time\r\n    console.log(\"items\", items);\r\n    setLastMsg((m) => {\r\n      return { ...m, msgs: items,types: mtypes, time: mTime };\r\n      //}\r\n    });\r\n  };\r\n\r\n  const setNewRecipient = (message) => {\r\n    console.log(\"in new chattt\",message.type)\r\n    userservice\r\n      .getUserByEmail({ userEmail: message.from })\r\n      .then((data) => {\r\n        console.log(\"data\",data);\r\n        setData((d) => {\r\n          let obj = { email: message.from, gender : data[0].gender, id : data[0]._id, \r\n                      name : data[0].firstName + ' '+ data[0].lastName,\r\n                      img : data[0].profileImg }\r\n          let uData = [...d.uData]\r\n          uData = [...uData,obj]\r\n          console.log(\"u\",uData)\r\n          return { ...d, uData}\r\n        });\r\n      })\r\n      if(usersData.uData.length !==0){\r\n        console.log(\"not first recipient\")\r\n        /* setLastMsg((msg) => {\r\n          \r\n            let newMsg = [...msg.msgs];\r\n            let newR = [...msg.emails];\r\n            let newT = [...msg.types];\r\n            let sender = [...msg.senders];\r\n            newMsg = [...newMsg, msg];\r\n            newR = [...newR, rec];\r\n            newT = [...newT, type];\r\n            sender = [...sender, rec];\r\n            let myMsg = {\r\n              ...msg,\r\n              msgs: newMsg,\r\n              emails: newR,\r\n              types: newT,\r\n              senders: sender,\r\n            };\r\n            console.log(\"My new Msg\",myMsg)\r\n            return myMsg\r\n          \r\n        });  */\r\n        setLastMsg({msgs: [...lastMsg.msgs,message.messageBody], emails: [...lastMsg.emails,message.from], \r\n                  types:[...lastMsg.types,message.type], senders:[...lastMsg.senders,message.from],\r\n                  time : [...lastMsg.time,message.time ]})\r\n      }\r\n      else{\r\n        console.log(\"first recipient\")\r\n        setLastMsg({msgs: [message.messageBody], emails: [message.from], \r\n                    types:[message.type], senders:[message.from], time:[message.time]})\r\n      }\r\n      \r\n   \r\n      /*chatservice\r\n      .getLastMsg(uId, rec)\r\n      .then((data1) => {\r\n        console.log(\"data new\", data1);\r\n        \r\n          setLastMsg((msg) => {\r\n          let newMsg = [...msg.msgs];\r\n          let newR = [...msg.emails];\r\n          let newT = [...msg.types];\r\n          let id = [...msg.msgId];\r\n          let sender = [...msg.senders];\r\n          newMsg = [...newMsg, data1.lastMsg];\r\n          newR = [...newR, rec];\r\n          newT = [...newT, data1.type];\r\n          id = [...id, data1.msgId];\r\n          sender = [...sender, data1.sender];\r\n          //console.log(\"newMsg: \", newMsg, newR, newT,id,sender);\r\n          return {\r\n            ...msg,\r\n            msgs: newMsg,\r\n            msgId: id,\r\n            emails: newR,\r\n            types: newT,\r\n            senders: sender,\r\n          };\r\n    });\r\n      }).catch((err)=>console.log(err))\r\n      */\r\n    \r\n  };\r\n\r\n  return (\r\n      <div  style={{height:\"100vh\"}} className=\"back_divs\">\r\n      <Header />\r\n      <PageTitle name={\"My Chats\"} />\r\n      {usersData.uData.length !== 0  && lastMsg.msgs.length !==0? (\r\n        <div>\r\n            <Grid container   style={{marginTop:\"0.9rem\" }}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n     \r\n          <SingleChat recipients={usersData.uData} lastMsg={lastMsg} />\r\n         \r\n        </Grid>\r\n        <Grid item xs ={1} md={3}> </Grid>\r\n        </Grid>\r\n        </div>\r\n      ) : (\r\n        <h5 style={{ textAlign: \"center\" }}>No Chats Yet!</h5>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AllChats;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js",["245","246","247","248"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleFriendRequest from \"./SingleFriendRequest\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport io from \"socket.io-client\";\r\n \r\nconst AllFriendRequest = ({match}) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friendreqs, setFrndRequest] =React.useState([]);\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     let userEmail = isAuthenticated().email\r\n     const {setSocket,roomJoin,messageEvent,friendReq} = useContext(SocketContext);\r\n     let roomId = useRef()\r\n     roomId.current = '/'+match.params.id\r\n     let history = useHistory()\r\n\r\n     window.onload = () => {\r\n        friendReq()\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getFriendRequest = () => \r\n     {\r\n      friendService.getFriendRequest(myId).then((data)=>{\r\n                setFrndRequest(data)})\r\n            .catch((err=>{console.log(err)}))\r\n     }\r\n    useEffect(getFriendRequest , []);\r\n\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n   /*  useEffect(()=>{\r\n      if(clientSocket){\r\n        clientSocket.emit(\r\n          \"myChatsRoom\",\r\n          { myChatsRoom : roomId.current},\r\n          ({error,room}) => {\r\n            if (!error) {\r\n              console.log(\"joined room with id\", room);\r\n            } else {\r\n              console.log(\"error joining room\", error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n     },[]) */\r\n\r\n     return ( \r\n    <div  style={{height:\"100vh\"}} className=\"back_divs\">\r\n      <Header/>\r\n      <PageTitle name= {\"Friend Requests\"}/>\r\n      {\r\n      friendreqs.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",height:\"100vh\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Request</div>) \r\n        :\r\n        (\r\n          <div>\r\n        <Grid container   style={{marginTop:\"0.9rem\" }}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n            <Grid container   style={{marginBottom:\"1rem\" }}>\r\n          <Grid item xs ={0} md={7}> </Grid>\r\n          <Grid item xs ={12} md={5}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              \r\n            </Grid>\r\n          {\r\n          friendreqs.filter((friendreq)=>{\r\n             if(searchTerm == \"\") return friendreq\r\n             else if (friendreq.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friendreq\r\n           }).map((friendreq, index) => (\r\n               <SingleFriendRequest key={index} friendreq={friendreq} onAcceptReject={getFriendRequest}/> )\r\n          )}\r\n          <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-contacts/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n        </div> )\r\n         \r\n      }\r\n       \r\n    </div> );\r\n\r\n}\r\nexport default AllFriendRequest;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js",["249","250","251"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleContact from \"./SingleContact\";\r\nimport contactService from \"../../../services/contactService\";\r\nimport { Button, Grid ,InputAdornment, TextField} from \"@material-ui/core\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport Header from \"./Header\";\r\nimport { grey } from '@material-ui/core/colors';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst AllContact = ({match}) => {\r\n    const myId=isAuthenticated()._id;\r\n    let userEmail = isAuthenticated().email;\r\n    let history = useHistory()\r\n     const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n    const [contacts, setContacts] = React.useState([]);\r\n    let roomId = useRef()\r\n    let clientSocket1 = useRef()\r\n    roomId.current = '/'+match.params.id;\r\n    const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n    window.onload = () => {\r\n       friendReq()\r\n      messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n    const getData = () => {\r\n   friendService.getSentFriendRequest(myId)\r\n   .then((data)=>{\r\n      localStorage.setItem(\"user\",JSON.stringify(data));})\r\n   .catch((err=>{console.log(err)}))\r\n   }\r\n     \r\n  const getSingleContact = () => {\r\n    contactService.getSingleContact(myId)\r\n    .then((data) => { setContacts(data);})\r\n    .catch((err) => {console.log(err);});\r\n  };\r\n\r\n   useEffect(()=> {\r\n     getData();\r\n     getSingleContact();\r\n }, []);\r\n \r\n   useEffect(()=>{\r\n    //roomJoin(myId)\r\n    //messageEvent()\r\n   },[])\r\n    \r\n   \r\n    return ( \r\n    <div style={{height:\"100vh\"}} className=\"back_divs\"  >\r\n      <Header/>\r\n      <PageTitle name= {\"Add Friend\"}/>\r\n      {\r\n      contacts.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\", height:\"100vh\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No User Found</div>) \r\n        :\r\n        (<div >\r\n          \r\n            <Grid container  style={{marginTop:\"0.9rem\"}}>\r\n          <Grid item xs ={1} md={2}> </Grid>\r\n          <Grid item xs ={10} md={8} >\r\n            <Grid container   style={{marginBottom:\"1rem\" }}>\r\n          <Grid item xs ={0} md={8}> </Grid>\r\n          <Grid item xs ={12} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n     \r\n           { contacts.filter((contact)=>{\r\n             if(searchTerm === \"\") return contact\r\n             else if (contact.firstName.toLowerCase().startsWith(searchTerm.toLowerCase()) || contact.lastName.toLowerCase().startsWith(searchTerm.toLowerCase()) )\r\n                return contact\r\n           }).map((contact, index) => {\r\n              return contact._id === myId ? \r\n              <div></div>\r\n            : <SingleContact key={index} contact={contact}  roomId={roomId.current}/>\r\n                 \r\n            } )\r\n          }\r\n           <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"right\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-friend-requests/'+myId)}> My Friend Requests</Button>\r\n        \r\n        <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n           </Grid>\r\n          <Grid item xs={1}   md={2}></Grid>\r\n        </Grid>\r\n         \r\n         \r\n       </div> )\r\n          }\r\n        \r\n        \r\n      )\r\n             \r\n    </div> );\r\n}\r\n \r\nexport default AllContact;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js",["252","253","254","255","256","257","258","259","260","261"],"import React, { useState, useEffect,useContext } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan,lightBlue} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nimport { SocketContext } from \"../../../context/SocketContext\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nconst useStyles = makeStyles({\r\n\r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\nconst Profile = ( {match}) => {\r\n     console.log(match.params.id)\r\n     const contactId = match.params.id\r\n     const roomId = '/'+contactId\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n    const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contactId)?false:true)\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const { clientSocket } = useContext(SocketContext);\r\n    //console.log(\"Props \",props.match)\r\n    const sentFriendRequest=() => {\r\n        console.log(\"contact Id\",contactId)\r\n        friendService.sendRequest(\r\n            {friendId:contactId,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n\r\n            })\r\n         .catch((err) => {console.log(err);});\r\n\r\n         clientSocket.emit(\r\n            \"friendRequest\",\r\n            { myName,roomId },\r\n            (err) => {\r\n              if (!err) console.log(\"emitted event\");\r\n              else console.log(err);\r\n            }\r\n          );\r\n    }\r\n     const cancelFriendRequest=()=>{\r\n\r\n        friendService.cancelRequest(\r\n            {friendId:contactId,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n\r\n         })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n\r\nreturn (\r\n    <div>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{display:\"inline-block\"  ,position:\"relative\",float:\"right\",marginTop:\"1rem\", backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{display:\"inline-block\" ,position:\"relative\",float:\"right\" ,marginTop:\"1rem\", backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js",["262","263","264","265","266","267"],"import React, { useEffect,useRef,useContext,useState } from \"react\";\r\nimport SingleFriend from \"./SingleFriend\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport {MyChatsContext} from '../../../context/MyChatsContext';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport io from \"socket.io-client\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst AllFriends = (props) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friends, setFriends] =React.useState([]);\r\n     let history = useHistory()\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n      const {setSocket,roomJoin, messageEvent, friendReq} =  useContext(SocketContext);\r\n     let userEmail = useRef()\r\n     userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n\r\n     window.onload = () => {\r\n         friendReq()\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getAllMyFriends = () => \r\n     {\r\n       friendService.getAllFriends(myId)\r\n        .then((data)=>{\r\n         setFriends(data);})\r\n      .catch((err=>{console.log(err)}))\r\n   \r\n     }\r\n    useEffect(()=>{\r\n\r\n      getAllMyFriends()\r\n      \r\n    }, []);\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n     useEffect(()=>{\r\n      //messageEvent()\r\n      \r\n     },[])\r\n\r\n    useEffect(()=>{\r\n      /* if(clientSocket!==null){\r\n        console.log(props.clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:props.clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }  */\r\n    },[])\r\n\r\n     return ( \r\n    <div style={{height:\"100vh\"}} className=\"back_divs\">\r\n      <Header/>\r\n      <PageTitle name= {\"My Friends\"}/>\r\n           \r\n   \r\n     {\r\n      friends.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",height:\"100vh\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Found</div>) \r\n        :\r\n        (\r\n          <div>\r\n             \r\n        <Grid container   style={{marginTop:\"0.9rem\", display :\"flex\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n            <Grid container   style={{marginBottom:\"1rem\"}}>\r\n          <Grid item xs ={0} md={7}> </Grid>\r\n          <Grid item xs ={12} md={5}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n     \r\n          {\r\n          friends.filter((friend)=>{\r\n             if(searchTerm == \"\") return friend\r\n             else if (friend.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friend\r\n           }).map((friend, index) => (\r\n               <SingleFriend key={index} friend={friend} onRemove={getAllMyFriends} /> )\r\n          )}\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         </div>)\r\n         \r\n      }\r\n       <Grid container   style={{display:\"flex\" ,marginBottom:\"0.9rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n      \r\n <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n  \r\n      \r\n \r\n    </div> );\r\n\r\n}\r\nexport default AllFriends;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js",["268","269","270","271"],"import React, { useState, useEffect,useContext, useRef } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n \r\nimport io from \"socket.io-client\";\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst UpdateProfileSetup = ( ) => {\r\n    const classes = useStyles();\r\n    const myId=isAuthenticated()._id;\r\n    let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n    const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n    let clientSocket1 = useRef()\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n \r\n    const [values, setValues] = useState({\r\n    img: \"\",\r\n    language:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language, successMsg, errorMessage,infoMessage, loading } = values;\r\n \r\n   window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n      });\r\n      return s;\r\n    })\r\n  };\r\n\r\n useEffect(() => {\r\n     accountService.getMyAccount(myId).then((data) => {\r\n     setValues({ ...values , img: data.profileImg, language:data.langPreference});\r\n    }).catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n  }, []);\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       setCapturedPic(true);\r\n       const data = new FormData();\r\n       data.append(\"file\", imageSrc);\r\n       axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading.... \"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n           }\r\n        )\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n    \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data).\r\n           then(async (response) => {\r\n           setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst updateProfile =()=>{\r\n  accountService.updateProfileSetup(myId,{profileImg: img, langPreference: language})\r\n .then((response) => {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.userData));\r\n          setValues({\r\n            ...values,\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n           \r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n    \r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n            <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div> \r\n             <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div>\r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.value === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => { \r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1rem\",\r\n              marginBottom: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={updateProfile}\r\n            \r\n          >\r\n            Update Profile\r\n          </Button>\r\n                   \r\n      </div> \r\n                \r\n  \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <h3 className=\"modal-title\" id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n    <Header/>\r\n     <PageTitle name= {\"Update Profile \"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default UpdateProfileSetup;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js",["272","273"],"import axios from \"axios\";\r\naxios.defaults.headers.common[\"x-auth-token\"] =localStorage.getItem(\"token\");\r\nexport const signup = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/signup\", data);\r\n  return response;\r\n};\r\nexport const login = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/login\", data);\r\n  return response;\r\n};\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js",["274","275","276","277"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js",["278","279","280","281","282","283","284"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport \"./chat.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n  },\r\n   \r\n  listText: {\r\n    fontSize: \"1.5rem\",\r\n    fontFamily: \"Roboto\",\r\n    marginLeft: \"0.5rem\",\r\n    marginTop:\"2rem\",\r\n    fontWeight:\"bold\",\r\n    display:\"inline\"\r\n   \r\n  },\r\n  listText1: {\r\n    fontSize: \"1.3rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n   marginLeft: \"0.5rem\",\r\n    \r\n    \r\n  },\r\n  listTime:{\r\n    fontSize: \"0.8rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n    marginLeft: \"0.5rem\",\r\n    display:\"inline\"\r\n     \r\n  },\r\n  listBtn: {\r\n    backgroundColor: \"rgb(0, 172, 193)\",\r\n    color: \"white\",\r\n    fontSize: \"1rem\",\r\n  },\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n  mygrid1: {\r\n    padding: \"20px\",\r\n  },\r\n  img: {\r\n    width: \"4rem\",\r\n    height: \"4rem\",\r\n    borderRadius: \"60px\",\r\n  },\r\n}));\r\nconst SingleChat = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  let elem = null;\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n  let messages = useRef([]);\r\n\r\n  console.log(\"props\",props.lastMsg)\r\n  const recipientClickHandler = (fr, type) => {\r\n    chatservice.getMessagesbyEmail(user.email, fr.email).then((res) => {\r\n      messages.current = res;\r\n      messages.current.map((m) => {\r\n        if (m.type === \"offline\" && m.from !== user.email) {\r\n          chatservice\r\n            .changeMessageType({ type: \"read\" }, m._id)\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err));\r\n        }\r\n        console.log(\"user matched\")\r\n      });\r\n    });\r\n    //console.log(\"fr\", fr);\r\n    localStorage.setItem(\"friendId\", fr.id);\r\n    localStorage.setItem(\"recName\", fr.name);\r\n    localStorage.setItem(\"recLang\", fr.lang);\r\n    localStorage.setItem(\"profileUrl\", fr.img);\r\n    history.push(\"/chat/\" + fr.email + \" \" + fr.id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.recipients.map((r, index) => {\r\n        return (\r\n           \r\n             <Paper style={{padding:  '12px 10px', marginBottom:\"1rem\" }}  >\r\n              <Grid container>\r\n               <Grid item xs={1}  >\r\n                  <img src={r.img} alt='img'    style={{ height: \"50px\", width: \"50px\", borderRadius: \"50%\",display:\"inline\" }}/>\r\n               </Grid>\r\n           <Grid item    xs ={11}  >\r\n              <Typography className={classes.listText}>{r.name}</Typography>\r\n                 {props.lastMsg.emails.forEach((u, ind) => {\r\n                  //console.log(\"inside for each lastMsg\", u,ind)\r\n                  //console.log(\"inside map:\",props.lastMsg.types[ind])\r\n                  //console.log(\"inside map:\",props.lastMsg.senders[ind])\r\n                   if (u === r.email) {\r\n                    if (props.lastMsg.types[ind] === \"read\") {\r\n                      //console.log(\"in 1\",props.lastMsg.msgs[ind])\r\n                      elem = (\r\n                        <div>\r\n                            <Typography\r\n                              className={classes.listText1}\r\n                              onClick={() =>\r\n                                recipientClickHandler(\r\n                                  r,\r\n                                  props.lastMsg.types[ind],\r\n                                  props.lastMsg.msgId[ind]\r\n                                )\r\n                              }\r\n                            >\r\n                              {props.lastMsg.msgs[ind]}\r\n                              \r\n                            </Typography>\r\n                            <Typography className={classes.listTime}>\r\n                            {props.lastMsg.time[ind]}\r\n                            </Typography>\r\n                        </div>\r\n                        \r\n                      );\r\n                    } else if (props.lastMsg.types[ind] === \"unread\") {\r\n                      //console.log(\"in 2\")\r\n                      elem = (\r\n                        <div>\r\n                        <Typography\r\n                          style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                          className={classes.listText1}\r\n                          onClick={() =>\r\n                            recipientClickHandler(\r\n                              r,\r\n                              props.lastMsg.types[ind],\r\n                              props.lastMsg.msgId[ind]\r\n                            )\r\n                          }\r\n                        >\r\n                          {props.lastMsg.msgs[ind]}\r\n                        </Typography>\r\n                        <Typography className={classes.listTime}>\r\n                            {props.lastMsg.time[ind]}\r\n                        </Typography>\r\n                        </div>\r\n                      );\r\n                    } else if (\r\n                      props.lastMsg.types[ind] === \"offline\" &&\r\n                      props.lastMsg.senders[ind] !== user.email\r\n                    ) {\r\n                      //console.log(\"in 3\")\r\n                      elem = (\r\n                        <div>\r\n                        <Typography\r\n                       style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                          className={classes.listText1}\r\n                          onClick={() =>\r\n                            recipientClickHandler(\r\n                              r,\r\n                              props.lastMsg.types[ind]\r\n                            )\r\n                          }\r\n                        >\r\n                          {props.lastMsg.msgs[ind]}\r\n                        </Typography>\r\n                        <Typography className={classes.listTime}>\r\n                            {props.lastMsg.time[ind]}\r\n                        </Typography>\r\n                        </div>\r\n                        \r\n                      );\r\n                    } else {\r\n                      console.log(\"in nothing\", props.lastMsg.types[ind]);\r\n                       console.log(\"in nothing1\", props.lastMsg.senders[ind]);\r\n                      elem = (\r\n                        <div>\r\n                          <Typography\r\n                         //  style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                            className={classes.listText1}\r\n                            onClick={() =>\r\n                              recipientClickHandler(\r\n                                r,\r\n                                props.lastMsg.types[ind],\r\n                              )\r\n                            }\r\n                          >\r\n                            {props.lastMsg.msgs[ind]}\r\n                          </Typography>\r\n                          <Typography className={classes.listTime}>\r\n                              {props.lastMsg.time[ind]}\r\n                          </Typography>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  }\r\n                })}\r\n\r\n                {elem}\r\n           </Grid>\r\n               \r\n               \r\n                \r\n              <div>\r\n                {/*  {setText(r,chatRecipients.lastMsg[index],chatRecipients.msgType[index])}\r\n                {elem}*/\r\n                 }\r\n              </div>\r\n              \r\n          \r\n           </Grid>\r\n          </Paper>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default SingleChat;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js",["285","286","287","288","289"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\DeleteMsg.js",["290","291","292","293"],{"ruleId":"294","severity":1,"message":"295","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":19},{"ruleId":"294","severity":1,"message":"298","line":4,"column":8,"nodeType":"296","messageId":"297","endLine":4,"endColumn":13},{"ruleId":"294","severity":1,"message":"299","line":10,"column":10,"nodeType":"296","messageId":"297","endLine":10,"endColumn":18},{"ruleId":"294","severity":1,"message":"300","line":11,"column":10,"nodeType":"296","messageId":"297","endLine":11,"endColumn":21},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","replacedBy":"304"},{"ruleId":"294","severity":1,"message":"305","line":1,"column":31,"nodeType":"296","messageId":"297","endLine":1,"endColumn":37},{"ruleId":"294","severity":1,"message":"306","line":4,"column":16,"nodeType":"296","messageId":"297","endLine":4,"endColumn":22},{"ruleId":"307","severity":1,"message":"308","line":23,"column":7,"nodeType":"309","endLine":23,"endColumn":15,"suggestions":"310"},{"ruleId":"311","severity":1,"message":"312","line":45,"column":45,"nodeType":"313","messageId":"314","endLine":45,"endColumn":47},{"ruleId":"307","severity":1,"message":"315","line":155,"column":8,"nodeType":"309","endLine":155,"endColumn":10,"suggestions":"316"},{"ruleId":"307","severity":1,"message":"317","line":185,"column":5,"nodeType":"309","endLine":185,"endColumn":16,"suggestions":"318"},{"ruleId":"319","severity":1,"message":"320","line":234,"column":14,"nodeType":"321","endLine":234,"endColumn":54},{"ruleId":"294","severity":1,"message":"322","line":19,"column":32,"nodeType":"296","messageId":"297","endLine":19,"endColumn":37},{"ruleId":"307","severity":1,"message":"323","line":46,"column":9,"nodeType":"309","endLine":46,"endColumn":23,"suggestions":"324"},{"ruleId":"307","severity":1,"message":"315","line":65,"column":8,"nodeType":"309","endLine":65,"endColumn":10,"suggestions":"325"},{"ruleId":"294","severity":1,"message":"326","line":6,"column":10,"nodeType":"296","messageId":"297","endLine":6,"endColumn":15},{"ruleId":"294","severity":1,"message":"327","line":6,"column":23,"nodeType":"296","messageId":"297","endLine":6,"endColumn":27},{"ruleId":"294","severity":1,"message":"328","line":6,"column":29,"nodeType":"296","messageId":"297","endLine":6,"endColumn":35},{"ruleId":"294","severity":1,"message":"329","line":10,"column":9,"nodeType":"296","messageId":"297","endLine":10,"endColumn":13},{"ruleId":"307","severity":1,"message":"330","line":14,"column":7,"nodeType":"309","endLine":14,"endColumn":15,"suggestions":"331"},{"ruleId":"294","severity":1,"message":"326","line":4,"column":10,"nodeType":"296","messageId":"297","endLine":4,"endColumn":15},{"ruleId":"294","severity":1,"message":"332","line":4,"column":17,"nodeType":"296","messageId":"297","endLine":4,"endColumn":21},{"ruleId":"294","severity":1,"message":"327","line":4,"column":23,"nodeType":"296","messageId":"297","endLine":4,"endColumn":27},{"ruleId":"294","severity":1,"message":"333","line":11,"column":7,"nodeType":"296","messageId":"297","endLine":11,"endColumn":12},{"ruleId":"307","severity":1,"message":"334","line":30,"column":5,"nodeType":"309","endLine":30,"endColumn":7,"suggestions":"335"},{"ruleId":"294","severity":1,"message":"336","line":20,"column":7,"nodeType":"296","messageId":"297","endLine":20,"endColumn":12},{"ruleId":"294","severity":1,"message":"337","line":27,"column":7,"nodeType":"296","messageId":"297","endLine":27,"endColumn":17},{"ruleId":"307","severity":1,"message":"338","line":45,"column":6,"nodeType":"309","endLine":45,"endColumn":8,"suggestions":"339"},{"ruleId":"294","severity":1,"message":"333","line":88,"column":7,"nodeType":"296","messageId":"297","endLine":88,"endColumn":12},{"ruleId":"307","severity":1,"message":"340","line":121,"column":6,"nodeType":"309","endLine":121,"endColumn":8,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":125,"column":17,"nodeType":"344","messageId":"345","endLine":125,"endColumn":19},{"ruleId":"294","severity":1,"message":"346","line":133,"column":10,"nodeType":"296","messageId":"297","endLine":133,"endColumn":14},{"ruleId":"307","severity":1,"message":"347","line":235,"column":4,"nodeType":"309","endLine":235,"endColumn":16,"suggestions":"348"},{"ruleId":"294","severity":1,"message":"349","line":9,"column":9,"nodeType":"296","messageId":"297","endLine":9,"endColumn":20},{"ruleId":"307","severity":1,"message":"350","line":80,"column":5,"nodeType":"309","endLine":80,"endColumn":7,"suggestions":"351"},{"ruleId":"307","severity":1,"message":"352","line":88,"column":3,"nodeType":"309","endLine":88,"endColumn":5,"suggestions":"353"},{"ruleId":"307","severity":1,"message":"340","line":99,"column":6,"nodeType":"309","endLine":99,"endColumn":8,"suggestions":"354"},{"ruleId":"307","severity":1,"message":"355","line":105,"column":6,"nodeType":"309","endLine":105,"endColumn":8,"suggestions":"356"},{"ruleId":"307","severity":1,"message":"357","line":109,"column":5,"nodeType":"309","endLine":109,"endColumn":7,"suggestions":"358"},{"ruleId":"294","severity":1,"message":"359","line":27,"column":8,"nodeType":"296","messageId":"297","endLine":27,"endColumn":10},{"ruleId":"294","severity":1,"message":"360","line":48,"column":10,"nodeType":"296","messageId":"297","endLine":48,"endColumn":19},{"ruleId":"294","severity":1,"message":"361","line":48,"column":20,"nodeType":"296","messageId":"297","endLine":48,"endColumn":28},{"ruleId":"294","severity":1,"message":"362","line":49,"column":7,"nodeType":"296","messageId":"297","endLine":49,"endColumn":20},{"ruleId":"307","severity":1,"message":"363","line":80,"column":5,"nodeType":"309","endLine":80,"endColumn":7,"suggestions":"364"},{"ruleId":"294","severity":1,"message":"365","line":22,"column":9,"nodeType":"296","messageId":"297","endLine":22,"endColumn":16},{"ruleId":"294","severity":1,"message":"366","line":23,"column":7,"nodeType":"296","messageId":"297","endLine":23,"endColumn":14},{"ruleId":"294","severity":1,"message":"367","line":42,"column":7,"nodeType":"296","messageId":"297","endLine":42,"endColumn":17},{"ruleId":"294","severity":1,"message":"368","line":45,"column":7,"nodeType":"296","messageId":"297","endLine":45,"endColumn":14},{"ruleId":"294","severity":1,"message":"336","line":46,"column":7,"nodeType":"296","messageId":"297","endLine":46,"endColumn":12},{"ruleId":"307","severity":1,"message":"369","line":170,"column":6,"nodeType":"309","endLine":170,"endColumn":8,"suggestions":"370"},{"ruleId":"307","severity":1,"message":"340","line":180,"column":5,"nodeType":"309","endLine":180,"endColumn":7,"suggestions":"371"},{"ruleId":"307","severity":1,"message":"372","line":224,"column":6,"nodeType":"309","endLine":224,"endColumn":15,"suggestions":"373"},{"ruleId":"294","severity":1,"message":"374","line":10,"column":10,"nodeType":"296","messageId":"297","endLine":10,"endColumn":14},{"ruleId":"307","severity":1,"message":"352","line":51,"column":34,"nodeType":"309","endLine":51,"endColumn":36,"suggestions":"375"},{"ruleId":"311","severity":1,"message":"376","line":108,"column":40,"nodeType":"313","messageId":"377","endLine":108,"endColumn":42},{"ruleId":"342","severity":1,"message":"343","line":109,"column":28,"nodeType":"344","messageId":"345","endLine":109,"endColumn":30},{"ruleId":"294","severity":1,"message":"374","line":13,"column":10,"nodeType":"296","messageId":"297","endLine":13,"endColumn":14},{"ruleId":"307","severity":1,"message":"378","line":61,"column":5,"nodeType":"309","endLine":61,"endColumn":7,"suggestions":"379"},{"ruleId":"311","severity":1,"message":"376","line":102,"column":39,"nodeType":"313","messageId":"377","endLine":102,"endColumn":41},{"ruleId":"294","severity":1,"message":"295","line":1,"column":27,"nodeType":"296","messageId":"297","endLine":1,"endColumn":36},{"ruleId":"294","severity":1,"message":"380","line":2,"column":8,"nodeType":"296","messageId":"297","endLine":2,"endColumn":16},{"ruleId":"294","severity":1,"message":"381","line":3,"column":8,"nodeType":"296","messageId":"297","endLine":3,"endColumn":20},{"ruleId":"294","severity":1,"message":"382","line":4,"column":8,"nodeType":"296","messageId":"297","endLine":4,"endColumn":17},{"ruleId":"294","severity":1,"message":"383","line":5,"column":8,"nodeType":"296","messageId":"297","endLine":5,"endColumn":14},{"ruleId":"294","severity":1,"message":"384","line":7,"column":8,"nodeType":"296","messageId":"297","endLine":7,"endColumn":15},{"ruleId":"294","severity":1,"message":"385","line":8,"column":16,"nodeType":"296","messageId":"297","endLine":8,"endColumn":20},{"ruleId":"294","severity":1,"message":"386","line":10,"column":10,"nodeType":"296","messageId":"297","endLine":10,"endColumn":20},{"ruleId":"294","severity":1,"message":"387","line":11,"column":8,"nodeType":"296","messageId":"297","endLine":11,"endColumn":14},{"ruleId":"294","severity":1,"message":"388","line":15,"column":7,"nodeType":"296","messageId":"297","endLine":15,"endColumn":16},{"ruleId":"294","severity":1,"message":"389","line":9,"column":8,"nodeType":"296","messageId":"297","endLine":9,"endColumn":21},{"ruleId":"294","severity":1,"message":"390","line":11,"column":9,"nodeType":"296","messageId":"297","endLine":11,"endColumn":23},{"ruleId":"294","severity":1,"message":"374","line":13,"column":10,"nodeType":"296","messageId":"297","endLine":13,"endColumn":14},{"ruleId":"307","severity":1,"message":"391","line":58,"column":8,"nodeType":"309","endLine":58,"endColumn":10,"suggestions":"392"},{"ruleId":"311","severity":1,"message":"376","line":116,"column":34,"nodeType":"313","messageId":"377","endLine":116,"endColumn":36},{"ruleId":"342","severity":1,"message":"343","line":117,"column":28,"nodeType":"344","messageId":"345","endLine":117,"endColumn":30},{"ruleId":"307","severity":1,"message":"393","line":180,"column":6,"nodeType":"309","endLine":180,"endColumn":8,"suggestions":"394"},{"ruleId":"307","severity":1,"message":"317","line":212,"column":5,"nodeType":"309","endLine":212,"endColumn":16,"suggestions":"395"},{"ruleId":"396","severity":1,"message":"397","line":219,"column":53,"nodeType":"398","messageId":"399","endLine":219,"endColumn":54,"fix":"400"},{"ruleId":"319","severity":1,"message":"320","line":262,"column":14,"nodeType":"321","endLine":262,"endColumn":54},{"ruleId":"294","severity":1,"message":"401","line":4,"column":9,"nodeType":"296","messageId":"297","endLine":4,"endColumn":15},{"ruleId":"294","severity":1,"message":"401","line":13,"column":9,"nodeType":"296","messageId":"297","endLine":13,"endColumn":15},{"ruleId":"294","severity":1,"message":"402","line":16,"column":8,"nodeType":"296","messageId":"297","endLine":16,"endColumn":19},{"ruleId":"294","severity":1,"message":"403","line":17,"column":10,"nodeType":"296","messageId":"297","endLine":17,"endColumn":15},{"ruleId":"294","severity":1,"message":"404","line":29,"column":9,"nodeType":"296","messageId":"297","endLine":29,"endColumn":16},{"ruleId":"294","severity":1,"message":"405","line":61,"column":9,"nodeType":"296","messageId":"297","endLine":61,"endColumn":15},{"ruleId":"294","severity":1,"message":"295","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"406","line":1,"column":36,"nodeType":"296","messageId":"297","endLine":1,"endColumn":44},{"ruleId":"294","severity":1,"message":"407","line":5,"column":8,"nodeType":"296","messageId":"297","endLine":5,"endColumn":22},{"ruleId":"294","severity":1,"message":"408","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":16},{"ruleId":"294","severity":1,"message":"409","line":7,"column":8,"nodeType":"296","messageId":"297","endLine":7,"endColumn":20},{"ruleId":"294","severity":1,"message":"410","line":11,"column":8,"nodeType":"296","messageId":"297","endLine":11,"endColumn":14},{"ruleId":"311","severity":1,"message":"312","line":87,"column":32,"nodeType":"313","messageId":"314","endLine":87,"endColumn":34},{"ruleId":"294","severity":1,"message":"305","line":1,"column":25,"nodeType":"296","messageId":"297","endLine":1,"endColumn":31},{"ruleId":"294","severity":1,"message":"411","line":13,"column":10,"nodeType":"296","messageId":"297","endLine":13,"endColumn":14},{"ruleId":"294","severity":1,"message":"412","line":17,"column":9,"nodeType":"296","messageId":"297","endLine":17,"endColumn":20},{"ruleId":"294","severity":1,"message":"413","line":22,"column":7,"nodeType":"296","messageId":"297","endLine":22,"endColumn":18},{"ruleId":"294","severity":1,"message":"414","line":23,"column":7,"nodeType":"296","messageId":"297","endLine":23,"endColumn":13},{"ruleId":"294","severity":1,"message":"415","line":3,"column":8,"nodeType":"296","messageId":"297","endLine":3,"endColumn":16},{"ruleId":"294","severity":1,"message":"416","line":12,"column":10,"nodeType":"296","messageId":"297","endLine":12,"endColumn":20},{"ruleId":"294","severity":1,"message":"411","line":16,"column":12,"nodeType":"296","messageId":"297","endLine":16,"endColumn":16},{"ruleId":"294","severity":1,"message":"417","line":16,"column":18,"nodeType":"296","messageId":"297","endLine":16,"endColumn":25},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Provider' is defined but never used.","'createStore' is defined but never used.","no-native-reassign",["418"],"no-negated-in-lhs",["419"],"'useRef' is defined but never used.","'uuidv4' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecData'. Either include it or remove the dependency array.","ArrayExpression",["420"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'match.params.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["421"],"React Hook React.useCallback has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["422"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["423"],["424"],"'Slide' is defined but never used.","'Flip' is defined but never used.","'Bounce' is defined but never used.","'elem' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUnreadMsgs'. Either include it or remove the dependency array.",["425"],"'Zoom' is defined but never used.","'count' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["426"],"'dummy' is assigned a value but never used.","'returndata' is defined but never used.","React Hook useEffect has missing dependencies: 'id', 'us.email', 'us.firstName', 'us.lastName', and 'us.profileImg'. Either include them or remove the dependency array.",["427"],"React Hook useEffect has a missing dependency: 'clientSocket'. Either include it or remove the dependency array.",["428"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chat.messages'. Either include it or remove the dependency array.",["429"],"'ChatContext' is defined but never used.","React Hook useEffect has a missing dependency: 'obj'. Either include it or remove the dependency array.",["430"],"React Hook useEffect has a missing dependency: 'myId'. Either include it or remove the dependency array.",["431"],["432"],"React Hook useEffect has a missing dependency: 'messageEvent'. Either include it or remove the dependency array.",["433"],"React Hook useEffect has missing dependencies: 'myId' and 'roomJoin'. Either include them or remove the dependency array.",["434"],"'io' is defined but never used.","'setSocket' is assigned a value but never used.","'roomJoin' is assigned a value but never used.","'clientSocket1' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'friendReq'. Either include it or remove the dependency array.",["435"],"'classes' is assigned a value but never used.","'history' is assigned a value but never used.","'notPresent' is assigned a value but never used.","'recMsgs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientSocket', 'getRecData', and 'uId'. Either include them or remove the dependency array.",["436"],["437"],"React Hook useEffect has missing dependencies: 'lastMsg', 'setNewRecipient', 'setRecArray', and 'usersData'. Either include them or remove the dependency array.",["438"],"'grey' is defined but never used.",["439"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'getData' and 'getSingleContact'. Either include them or remove the dependency array.",["440"],"'AlertBar' is defined but never used.","'LinearBuffer' is defined but never used.","'PageTitle' is defined but never used.","'Select' is defined but never used.","'Resizer' is defined but never used.","'cyan' is defined but never used.","'useHistory' is defined but never used.","'Webcam' is defined but never used.","'useStyles' is assigned a value but never used.","'PersonAddIcon' is defined but never used.","'MyChatsContext' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllMyFriends'. Either include it or remove the dependency array.",["441"],"React Hook useEffect has missing dependencies: 'myId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["442"],["443"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"444","text":"445"},"'config' is assigned a value but never used.","'chatservice' is defined but never used.","'toast' is defined but never used.","'options' is assigned a value but never used.","'imgUrl' is assigned a value but never used.","'useState' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Button' is defined but never used.","'open' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'indexOfTerm' is assigned a value but never used.","'msgArr' is assigned a value but never used.","'Checkbox' is defined but never used.","'Typography' is defined but never used.","'setOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"448","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"461","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"461","fix":"478"},{"desc":"479","fix":"480"},{"desc":"467","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"450","fix":"488"},[7475,7489],"\r\n           .","Update the dependencies array to be: [getRecData, userId]",{"range":"489","text":"490"},"Update the dependencies array to be: [match.params.token, values]",{"range":"491","text":"492"},"Update the dependencies array to be: [values]",{"range":"493","text":"494"},"Update the dependencies array to be: [formData, match.params]",{"range":"495","text":"496"},{"range":"497","text":"492"},"Update the dependencies array to be: [getUnreadMsgs, userId]",{"range":"498","text":"499"},"Update the dependencies array to be: [id]",{"range":"500","text":"501"},"Update the dependencies array to be: [id, us.email, us.firstName, us.lastName, us.profileImg]",{"range":"502","text":"503"},"Update the dependencies array to be: [clientSocket]",{"range":"504","text":"505"},"Update the dependencies array to be: [chat.messages, searchTerm]",{"range":"506","text":"507"},"Update the dependencies array to be: [obj]",{"range":"508","text":"509"},"Update the dependencies array to be: [myId]",{"range":"510","text":"511"},{"range":"512","text":"505"},"Update the dependencies array to be: [messageEvent]",{"range":"513","text":"514"},"Update the dependencies array to be: [myId, roomJoin]",{"range":"515","text":"516"},"Update the dependencies array to be: [friendReq]",{"range":"517","text":"518"},"Update the dependencies array to be: [clientSocket, getRecData, uId]",{"range":"519","text":"520"},{"range":"521","text":"505"},"Update the dependencies array to be: [lastMsg, payload, setNewRecipient, setRecArray, usersData]",{"range":"522","text":"523"},{"range":"524","text":"511"},"Update the dependencies array to be: [getData, getSingleContact]",{"range":"525","text":"526"},"Update the dependencies array to be: [getAllMyFriends]",{"range":"527","text":"528"},"Update the dependencies array to be: [myId, values]",{"range":"529","text":"530"},{"range":"531","text":"494"},[747,755],"[getRecData, userId]",[5157,5159],"[match.params.token, values]",[6381,6392],"[values]",[1648,1662],"[formData, match.params]",[1681,1683],[590,598],"[getUnreadMsgs, userId]",[854,856],"[id]",[1986,1988],"[id, us.email, us.firstName, us.lastName, us.profileImg]",[3997,3999],"[clientSocket]",[6966,6978],"[chat.messages, searchTerm]",[2950,2952],"[obj]",[3123,3125],"[myId]",[3380,3382],[3488,3490],"[messageEvent]",[3541,3543],"[myId, roomJoin]",[2232,2234],"[friendReq]",[5830,5832],"[clientSocket, getRecData, uId]",[6026,6028],[7502,7511],"[lastMsg, payload, setNewRecipient, setRecArray, usersData]",[1969,1971],[2204,2206],"[getData, getSingleContact]",[2079,2081],"[getAllMyFriends]",[5955,5957],"[myId, values]",[7224,7235]]