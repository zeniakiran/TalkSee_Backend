[{"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js":"1","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js":"2","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js":"3","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\DeletePermissionContext.js":"4","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js":"5","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js":"6","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js":"7","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js":"8","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js":"9","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js":"10","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js":"11","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userRoutes.js":"12","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js":"13","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js":"14","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js":"15","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js":"16","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js":"17","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js":"18","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js":"19","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js":"20","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js":"21","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js":"22","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\ContactManagement.js":"23","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Settings.js":"24","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogoPage.js":"25","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reducers\\DeletePermissionReducer.js":"26","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js":"27","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js":"28","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js":"29","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js":"30","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js":"31","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js":"32","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js":"33","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js":"34","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SideBar.js":"35","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js":"36","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js":"37","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js":"38","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js":"39","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js":"40","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js":"41","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js":"42","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js":"43","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js":"44","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js":"45","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js":"46","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js":"47","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\DeleteMsg.js":"48","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js":"49","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userProfile.js":"50"},{"size":1524,"mtime":1624695955336,"results":"51","hashOfConfig":"52"},{"size":375,"mtime":1620755202368,"results":"53","hashOfConfig":"52"},{"size":5622,"mtime":1625999205687,"results":"54","hashOfConfig":"52"},{"size":729,"mtime":1623064471481,"results":"55","hashOfConfig":"52"},{"size":8072,"mtime":1625828858476,"results":"56","hashOfConfig":"52"},{"size":3893,"mtime":1620755202312,"results":"57","hashOfConfig":"52"},{"size":4229,"mtime":1625828865076,"results":"58","hashOfConfig":"52"},{"size":3429,"mtime":1622654193075,"results":"59","hashOfConfig":"52"},{"size":5020,"mtime":1625832793934,"results":"60","hashOfConfig":"52"},{"size":2075,"mtime":1625832793914,"results":"61","hashOfConfig":"52"},{"size":453,"mtime":1620755202332,"results":"62","hashOfConfig":"52"},{"size":484,"mtime":1625772772739,"results":"63","hashOfConfig":"52"},{"size":10954,"mtime":1626005365992,"results":"64","hashOfConfig":"52"},{"size":9877,"mtime":1625824924800,"results":"65","hashOfConfig":"52"},{"size":11164,"mtime":1625820484470,"results":"66","hashOfConfig":"52"},{"size":11658,"mtime":1625832376272,"results":"67","hashOfConfig":"52"},{"size":8416,"mtime":1625828773148,"results":"68","hashOfConfig":"52"},{"size":13611,"mtime":1625822486533,"results":"69","hashOfConfig":"52"},{"size":12570,"mtime":1625832353301,"results":"70","hashOfConfig":"52"},{"size":4455,"mtime":1625998209368,"results":"71","hashOfConfig":"52"},{"size":4933,"mtime":1626005224107,"results":"72","hashOfConfig":"52"},{"size":5083,"mtime":1625998216623,"results":"73","hashOfConfig":"52"},{"size":3887,"mtime":1625829396470,"results":"74","hashOfConfig":"52"},{"size":3522,"mtime":1625825254704,"results":"75","hashOfConfig":"52"},{"size":908,"mtime":1625828743765,"results":"76","hashOfConfig":"52"},{"size":192,"mtime":1623065594863,"results":"77","hashOfConfig":"52"},{"size":1137,"mtime":1620755202297,"results":"78","hashOfConfig":"52"},{"size":2341,"mtime":1620755202296,"results":"79","hashOfConfig":"52"},{"size":778,"mtime":1625820484738,"results":"80","hashOfConfig":"52"},{"size":994,"mtime":1622009599503,"results":"81","hashOfConfig":"52"},{"size":679,"mtime":1622572690008,"results":"82","hashOfConfig":"52"},{"size":873,"mtime":1622549479404,"results":"83","hashOfConfig":"52"},{"size":742,"mtime":1624777948716,"results":"84","hashOfConfig":"52"},{"size":4197,"mtime":1625822486492,"results":"85","hashOfConfig":"52"},{"size":3637,"mtime":1625832793905,"results":"86","hashOfConfig":"52"},{"size":308,"mtime":1620755202381,"results":"87","hashOfConfig":"52"},{"size":2823,"mtime":1626004856559,"results":"88","hashOfConfig":"52"},{"size":3857,"mtime":1626005404237,"results":"89","hashOfConfig":"52"},{"size":4998,"mtime":1626005033961,"results":"90","hashOfConfig":"52"},{"size":284,"mtime":1620755202309,"results":"91","hashOfConfig":"52"},{"size":268,"mtime":1620755202308,"results":"92","hashOfConfig":"52"},{"size":1688,"mtime":1626004716114,"results":"93","hashOfConfig":"52"},{"size":590,"mtime":1625827927779,"results":"94","hashOfConfig":"52"},{"size":425,"mtime":1620755202377,"results":"95","hashOfConfig":"52"},{"size":4112,"mtime":1625820484521,"results":"96","hashOfConfig":"52"},{"size":7180,"mtime":1625997117312,"results":"97","hashOfConfig":"52"},{"size":8387,"mtime":1625820484478,"results":"98","hashOfConfig":"52"},{"size":2646,"mtime":1625829058810,"results":"99","hashOfConfig":"52"},{"size":1884,"mtime":1625829063635,"results":"100","hashOfConfig":"52"},{"size":3877,"mtime":1626005546474,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1rylyem",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147","usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js",[],["221","222"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\DeletePermissionContext.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js",["223"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport accountService from \"../../../services/accountService\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n import { grey, cyan,indigo} from '@material-ui/core/colors';\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useHistory } from 'react-router-dom';\r\nimport LogoPage from \"./LogoPage\";\r\n\r\n const useStyles = makeStyles((theme) => ({\r\n  textfield: {\r\n     margin: theme.spacing(1),\r\n  },\r\n   margin:{\r\n     marginTop: \"1.2rem\"\r\n   } \r\n}));\r\n\r\nconst ResetPassword = ({ match }) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [values, setValues] = useState({\r\n    token: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  \r\n   const {\r\n    token,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n\r\n    useEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n    const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   const ResetPasswordBtn = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)\r\n    ) {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n    } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Passwords do not match\" });\r\n    } else {\r\n  \r\n     \r\n      setValues({ ...values, loading: true });\r\n     accountService.resetPassword( { newPassword: password, resetPasswordLink: token})\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n             password: \"\",\r\n            confirmPassword: \"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n     \r\n  const ResetPasswordForm=()=>(\r\n      \r\n    <Grid container >\r\n      <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper  className=\"Login-container\" style={{padding: '30px 50px'}} >\r\n          <Button  \r\n            className= \"loginbtn\"\r\n            href=\"https://mail.google.com/mail/u/0/#inbox\"\r\n            color=\"primary\"\r\n           style={{marginBottom:\"2rem\" ,paddingLeft:\"0rem\",color:indigo[800]  }}\r\n          >\r\n           <ArrowBackIcon style={{fontWeight:\"bold\",marginRight:\"0.3rem\"}}/> Go Back\r\n          </Button>\r\n             <FormControl className={clsx( classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> New Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    \r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={ResetPasswordBtn}\r\n          >\r\n            Reset Password \r\n          </Button>\r\n          {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n           </Paper>\r\n        </Grid>\r\n     <Grid item xs={1} sm={3} md={4}></Grid>\r\n    </Grid>\r\n       \r\n  );   \r\n  return (\r\n  <div className=\"login_div\">\r\n        {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <LogoPage className=\"title\" name= {\"Reset Password\"} logo ={false}/>\r\n      {ResetPasswordForm()}\r\n      \r\n  </div>)\r\n      }\r\nexport default ResetPassword;\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js",["224","225"],"import React, { useState, useEffect } from 'react';\r\nimport accountService from \"../../../services/accountService\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { grey,green, cyan,red} from '@material-ui/core/colors';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport PageTitle from \"./pageTitle\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst Activate = ({ match }) => {\r\n let token1 = match.params.token;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    token: '',\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n  });\r\n   const { firstName,lastName, token, errorMessage, successMsg} = formData;\r\n   let history = useHistory()\r\n  useEffect(() => {\r\n    let token = match.params.token;\r\n    let { firstName } = jwt.decode(token);\r\n    let { lastName } = jwt.decode(token);\r\n    if (token) {\r\n      setFormData({ ...formData, firstName,lastName,  token });  \r\n      accountService.accountActivation({token})\r\n      .then(response => {\r\n        setFormData({\r\n          ...formData,\r\n          errorMessage: false,\r\n          successMsg: response.successMessage,\r\n          firstName: response.firstName,\r\n          lastName: response.lastName,\r\n        });\r\n      })\r\n      .catch(err => {\r\n      setFormData({\r\n          ...formData,\r\n          successMsg: false,\r\n         errorMessage: err.response.data.errorMessage,\r\n          firstName: err.response.data.firstName,\r\n          lastName: err.response.data.lastName,\r\n        });\r\n      });\r\n    }}, [match.params]);\r\n     \r\n  \r\n  const ActivationSuccess=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName +\" \"+lastName}</strong></p>\r\n        <div>  <CheckCircleRoundedIcon \r\n              style = {{ color: green[600],paddingTop:\"0.3rem\" }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > Your account has been successfully verified. Click below to create your profile</span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n              variant=\"contained\"\r\n              className= \"loginbtn\"\r\n              onClick={event =>  history.push('/profile-setup/'+token1)}\r\n             \r\n          >\r\n            Create Profile\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n   const ActivationFailure=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName+\" \"+lastName}</strong></p>\r\n        <div>  <CancelRoundedIcon \r\n              style = {{ color: red[600]  }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > <strong>{errorMessage}</strong> </span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n            variant=\"contained\"\r\n             className= \"loginbtn\"\r\n            onClick={event =>  history.push('/signup')}\r\n             \r\n          >\r\n               Try  Again   \r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n  return (\r\n  <div>\r\n        <PageTitle name= {\"Activation\"}/>\r\n       {errorMessage && ( ActivationFailure())}\r\n       {successMsg && (ActivationSuccess())}\r\n  </div>)\r\n      }\r\nexport default Activate;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js",["226","227","228","229","230","231","232","233","234","235"],"import React, { useState, useEffect,useContext } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan,lightBlue} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nimport { SocketContext } from \"../../../context/SocketContext\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nconst useStyles = makeStyles({\r\n\r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\nconst Profile = ( {match}) => {\r\n     console.log(match.params.id)\r\n     const contactId = match.params.id\r\n     const roomId = '/'+contactId\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n    const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contactId)?false:true)\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const { clientSocket } = useContext(SocketContext);\r\n    //console.log(\"Props \",props.match)\r\n    const sentFriendRequest=() => {\r\n        console.log(\"contact Id\",contactId)\r\n        friendService.sendRequest(\r\n            {friendId:contactId,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n\r\n            })\r\n         .catch((err) => {console.log(err);});\r\n\r\n         clientSocket.emit(\r\n            \"friendRequest\",\r\n            { myName,roomId },\r\n            (err) => {\r\n              if (!err) console.log(\"emitted event\");\r\n              else console.log(err);\r\n            }\r\n          );\r\n    }\r\n     const cancelFriendRequest=()=>{\r\n\r\n        friendService.cancelRequest(\r\n            {friendId:contactId,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n\r\n         })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n\r\nreturn (\r\n    <div>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{display:\"inline-block\"  ,position:\"relative\",float:\"right\",marginTop:\"1rem\", backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{display:\"inline-block\" ,position:\"relative\",float:\"right\" ,marginTop:\"1rem\", backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js",["236","237","238","239","240","241","242","243"],"import React ,{createContext,useEffect,useState,useRef} from 'react'\r\nimport io from \"socket.io-client\";\r\nimport { toast } from 'react-toastify';\r\nimport { isAuthenticated } from \"../components/FrontendComponents/clientStorages/auth\";\r\nimport friendService from \"../services/friendService\";\r\nimport chatservice from '../services/ChatService';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const SocketContext = createContext();\r\nexport function SocketProvider({id,email,isLogin,children}) {\r\n  \r\n  const [obj, setObj] = useState({})\r\n  const [frndcounter,setFrndCounter]= useState(0)\r\n  const [msgCount,setMsgCount]=useState(0);\r\n  const [clientSocket, setSocket] = useState()\r\n  //let msgCount = useRef(0)\r\n  let count=0;\r\n  let roomId = useRef()\r\n  \r\n  useEffect(() => {\r\n    \r\n    /* const socket = io(\r\n      process.env.REACT_APP_IP_URL,\r\n    ) */\r\n    const socket = io(\r\n      process.env.REACT_APP_IP_URL)\r\n    setSocket(socket)\r\n    return () => socket.close()\r\n    \r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    roomId.current= '/'+id\r\n    console.log(roomId)\r\n  },[])\r\n\r\n  const messageCounter=()=>{\r\n\r\n    chatservice.offlinemessages(email)\r\n        .then((res)=>{  \r\n          setObj((o)=>{\r\n            o = {sender: res.info.sender, receiver: res.info.receiver}\r\n            return o\r\n          })\r\n                setMsgCount((c)=>{   \r\n                      c= res.count\r\n                   return c\r\n                })\r\n                console.log(\"Message Count is\",msgCount);\r\n                 localStorage.setItem(\"messagecount\",JSON.stringify(msgCount))\r\n        })\r\n        .catch((err)=>console.log(err))}\r\n\r\n  //useEffect(()=>messageCounter,[])\r\n\r\n  useEffect(()=>{\r\n    console.log(\"is login\", isLogin)\r\n    if(isLogin){\r\n    newMessageEvent()\r\n    friendReqEvent()\r\n    messageCounter()\r\n    console.log(\"new message event mounted\")\r\n    }\r\n    else{\r\n      console.log(\"not mounted\")\r\n    }\r\n  },[isLogin])\r\n  \r\n\r\n  const newMessageEvent = () => {\r\n    let counter = JSON.parse(localStorage.getItem(\"messagecount\"))\r\n    console.log(\" new msg event \")\r\n    if(clientSocket){\r\n      clientSocket.on(\"newMessage\", (payload) => {\r\n      toast(payload.RecipientName +':'+\r\n        payload.payload.messageBody, {\r\n          onOpen: () => console.log('Called when I open'),\r\n          position: toast.POSITION.TOP_LEFT,\r\n          //toastId: '007',\r\n          transition: Bounce\r\n        })\r\n      //count=count+1\r\n      console.log(\"new message\",payload)\r\n      //messageCounter();\r\n      \r\n      setMsgCount((c)=>{\r\n        c =  c + 1\r\n        localStorage.setItem(\"messagecount\",JSON.stringify(c))\r\n        localStorage.setItem(\"MyC\",JSON.stringify(c))\r\n        return c\r\n      })\r\n      })\r\n    }\r\n    else {\r\n      console.log(\"no socket\")\r\n    }  \r\n  //return () => {clientSocket.removeAllListeners(\"newMessage\");}\r\n  }\r\n\r\n  const roomJoin = (did) =>{\r\n    //did = did || roomId.current\r\n    did = '/'+did\r\n    if(clientSocket){\r\n      clientSocket.emit(\r\n        \"NotificationRoom\",\r\n        { myNotificationRoom : did},\r\n        ({error,room}) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  const getAllRequests=()=>{\r\n    friendService.getFriendRequest(id).then((data)=>{\r\n      setFrndCounter(data.length);\r\n      localStorage.setItem(\"friendRequests\",JSON.stringify(data.length))\r\n     })\r\n     .catch((err=>{console.log(err)}))\r\n}\r\n  //useEffect(()=>getAllRequests,[frndcounter])\r\n\r\n  const getFriendRequest = () => {\r\n    if(clientSocket)\r\n    {\r\n    clientSocket.on(\"newRequest\", () => getAllRequests())\r\n    clientSocket.on(\"rejectRequest\", (payload) => getAllRequests())\r\n    }\r\n    else\r\n    console.log(\"no socket\")\r\n  }\r\n\r\n  const friendReqEvent = () =>{\r\n    console.log(\"friend Req event\")\r\n    if(clientSocket){\r\n      clientSocket.on(\"newRequest\", (payload) => {\r\n          console.log(\"payload : \",payload)\r\n          toast.info(\r\n          payload.sender+ ' has sent you a friend request!', {\r\n          position: toast.POSITION.TOP_LEFT,\r\n          //toastId: '009',\r\n          autoClose: 7000,\r\n          transition: Bounce\r\n        })\r\n        setFrndCounter((c)=>{\r\n          c =  c + 1\r\n          localStorage.setItem(\"friendRequests\",JSON.stringify(c))\r\n          return c;\r\n        })\r\n      })\r\n    }\r\n    else{\r\n      console.log(\"no socket\")\r\n    }\r\n  }\r\n  \r\n\r\n  let value={\r\n    clientSocket : clientSocket,\r\n    setSocket : setSocket,\r\n    messageEvent : newMessageEvent,\r\n    roomJoin : roomJoin,\r\n    friendReq : friendReqEvent,\r\n    getRequest: getFriendRequest,\r\n    frndcounter:frndcounter,\r\n    acceptRejectCounter:getAllRequests,\r\n    msgCounter:msgCount,\r\n    msgNotify:messageCounter,\r\n    obj : obj\r\n  }\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n\r\n  \r\n}","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js",["244","245","246"],"import React ,{createContext, useEffect, useState} from 'react'\r\nimport chatservice from '../services/ChatService'\r\n//import {showNotification} from '../components/FrontendComponents/Alerts/showMessage'\r\n//import Notification from '../components/FrontendComponents/Alerts/Notification'\r\nimport { toast } from 'react-toastify';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\nimport { isAuthenticated } from \"../components/FrontendComponents/clientStorages/auth\";\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({userId,isLogin, users, children}) =>{\r\n    let elem = null\r\n    let msg = ''\r\n    let email;\r\n    const [obj, setObj] = useState({})\r\n    const [count,setCount]= useState(0)\r\n    /* window.onload =()=>{\r\n        email = JSON.parse(localStorage.getItem(\"user\").email)\r\n        getUnreadMsgs(email)\r\n    } */\r\n    useEffect(()=>{\r\n        console.log(\"is Login\",isLogin)\r\n        if(isLogin){\r\n            getUnreadMsgs(userId)\r\n        }\r\n        \r\n    },[isLogin])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"Users online:\",users)\r\n    },[isLogin])\r\n\r\n    const getUnreadMsgs =(email)=>{\r\n        chatservice.offlinemessages(email)\r\n        .then((res)=>{\r\n            if(res.count > 0){\r\n                console.log(\"count\",res.count)\r\n                msg = 'You have '+res.count+ ' new messages!'\r\n                if(res.info.sender[0] !== userId){\r\n                    console.log(\"sender\",res.info.sender)\r\n                    console.log(\"user\",userId)\r\n                toast.info(msg,{\r\n                position: toast.POSITION.TOP_LEFT,\r\n                transition: Zoom\r\n            })\r\n                }\r\n                else{\r\n                    console.log(\"is sender\")\r\n                }\r\n        \r\n            }\r\n        })\r\n        .catch((err)=>console.log(err))\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <ChatContext.Provider value = {{getUnreadMsgs: getUnreadMsgs, count: count, obj:obj, setCounter : setCount}}>\r\n        \r\n            {children}\r\n        </ChatContext.Provider>\r\n    );\r\n}\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userRoutes.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js",["247","248","249","250","251","252"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js",["253","254","255","256","257","258","259","260","261","262","263","264"],"import React, { useEffect, useState, useRef, useContext } from \"react\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport friendService from \"../../services/friendService\";\r\nimport \"./chat.css\";\r\nimport SettingMessage from \"./SettingMessage\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RenderChat from './RenderChat'\r\nimport { toast } from 'react-toastify';\r\nimport { Zoom } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport io from \"socket.io-client\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function SingleChat(props) {\r\n  const [chat, setChat] = useState([{ from: \"\", to: \"\", messages: [] }]);\r\n  const [searchChats, setSearchChats] = useState({messages :['']})\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFriend, setIsFriend] = useState(true)\r\n  const scrollRef = useRef();\r\n  let chats = useRef([]);\r\n  let friends = useRef()\r\n  let dummy = [];\r\n  let user = useRef({ uId: \"\", uImg: \"\", uName: \"\" });\r\n  let recipient = useRef(\"\");\r\n  let recipientInfo = useRef({ name: \"\", lang: \"\", url: \"\" });\r\n  let roomId = useRef(\"\");\r\n  let myChatsRoom = useRef();\r\n  let notificationRoom = useRef();\r\n  let returndata;\r\n  let id = props.match.params.id.split(\" \");\r\n  const { clientSocket,setSocket,roomJoin, messageEvent, friendReq } = useContext(SocketContext);\r\n  const { count, setCounter } = useContext(SocketContext);\r\n  const [isDel , setDel] = useState(false)\r\n  const [isChat, setIsChat] = React.useState(false)\r\n  let clientSocket1 = useRef()\r\n  var us = JSON.parse(localStorage.getItem(\"user\"));\r\n  const IP_URL = localStorage.getItem('IP_URL')\r\n  const IP = localStorage.getItem('IP')\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chat]); \r\n  \r\n  //useEffect(() => {\r\n    recipientInfo.current.name = localStorage.getItem(\"recName\");\r\n    recipientInfo.current.lang = localStorage.getItem(\"recLang\");\r\n    recipientInfo.current.url = localStorage.getItem(\"profileUrl\");\r\n    myChatsRoom.current = \"mychats/\" + localStorage.getItem(\"friendId\");\r\n    notificationRoom.current = \"/\" + id[1];\r\n    recipient.current = id[0];\r\n    user.current.uId = us.email;\r\n    user.current.uName = us.firstName + \" \" + us.lastName;\r\n    user.current.uImg = us.profileImg\r\n // }, [us]);\r\n\r\n window.onload = () => {\r\n  friendReq()\r\n  messageEvent()\r\n  let did = JSON.parse(localStorage.getItem('user'))._id\r\n  roomJoin(did)\r\n  clientSocket1 = io(process.env.REACT_APP_IP_URL)\r\n  setSocket((s)=>{\r\n  s = clientSocket1\r\n  s.on('connect' , () => {\r\n    console.log(\"connected\",s.id);\r\n    s.emit(\"adduser\",{id:s.id, name: user.current.uId})\r\n    \r\n  });\r\n  return s;\r\n  })\r\n};\r\n\r\n  const getData = () => {\r\n    console.log(\"in get Data\",user)\r\n    chatservice\r\n      .getMessagesbyEmail(user.current.uId, recipient.current)\r\n      .then((data) => {\r\n        if(data)\r\n        {\r\n          console.log(\"This data\",data)\r\n          chats.current = data;\r\n          setChat({ messages: chats.current });\r\n          setIsChat(true)\r\n        }\r\n        \r\n      })\r\n      .catch((err) => toast.error(\r\n        'Database Connection Error', {\r\n        position: toast.POSITION.TOP_LEFT,\r\n        autoClose: 3000,\r\n        transition: Zoom\r\n      }));\r\n      \r\n  };\r\n\r\n  \r\n\r\n  useEffect (()=>{\r\n    let mycount=0;\r\n    friendService.getAllFriends(us._id)\r\n    .then((data)=>{\r\n      friends.current = data\r\n      friends.current.forEach((f) => {\r\n        if(f.email === recipient.current)\r\n          mycount=mycount+1\r\n        \r\n      })\r\n      if(mycount<1)\r\n       setIsFriend(false)\r\n      })\r\n      .catch((err=>toast.error(\r\n        'Database Connection Error', {\r\n        position: toast.POSITION.TOP_LEFT,\r\n        autoClose: 3000,\r\n        transition: Zoom\r\n      })))\r\n  })\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (clientSocket !== undefined) {\r\n      clientSocket.emit(\r\n        \"roomJoin\",\r\n        { from: user.current.uId, to: recipient.current },\r\n        ({ error, room }) => {\r\n          if (!error) {\r\n            roomId.current = room;\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n\r\n      clientSocket.on(\"messageReceived\", (payload) => {\r\n        setChat((chatState) => {\r\n          if (chatState.messages) {\r\n            let newMessages = [...chatState.messages];\r\n            newMessages = [...newMessages, payload];\r\n            return { ...chatState, messages: newMessages };\r\n          } else {\r\n            return { messages: [payload] };\r\n          }\r\n        });\r\n\r\n        /* setCounter((c)=>{\r\n          c = c+1\r\n          console.log(\" counter val from chat\",c)\r\n          return c\r\n        }) */\r\n      })\r\n\r\n      return function cleanup() {\r\n        clientSocket.off(\"messageReceived\");\r\n        console.log(\"in cleanup\");\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = (message) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },};\r\n    console.log(IP+'80/')\r\n    let msgId = uuidv4()\r\n    if (message == \"\"){\r\n       toast.error(\"Please Type something\",{\r\n          position: toast.POSITION.TOP_LEFT,\r\n        })\r\n    }\r\n   else\r\n   {\r\n     setLoading(true); \r\n     let data = {\r\n      msg: message,\r\n      lang: recipientInfo.current.lang,\r\n      userImgUrl: user.current.uImg,\r\n    };\r\n   // axios.post(process.env.REACT_APP_IP,data) // flask ka post method call kre ga\r\n   // .then((response )=> {\r\n    setLoading(false);\r\n   // console.log(\" Response\" ,response.data);\r\n   // returndata = response.data\r\n    let messageS = {\r\n      from: user.current.uId,\r\n      to: recipient.current,\r\n      userName: user.current.uName,\r\n      room: roomId.current,\r\n      messageBody: message,\r\n      messageVideo: returndata,\r\n      time: new Date().toLocaleString(),\r\n      type: \"offline\",\r\n      msgId : msgId\r\n    };\r\n    clientSocket.emit(\"messageSend\", messageS, (err) => {\r\n      if (!err) {\r\n        chatservice.createMessage(messageS)\r\n            .then((response)=>console.log(response,msgId))\r\n            .catch((err)=>toast.error(\r\n              'Database Connection Error! Please try again', {\r\n              position: toast.POSITION.TOP_LEFT,\r\n              autoClose: 3000,\r\n              transition: Zoom\r\n            }))\r\n        \r\n        if (chat.messages) {\r\n          setChat({ messages: [...chat.messages, messageS] });\r\n        } else {\r\n          setChat({ messages: [messageS] });\r\n        }\r\n      } else {\r\n        toast.error(\r\n          'Error in sending message! Please try again', {\r\n          position: toast.POSITION.TOP_LEFT,\r\n          autoClose: 3000,\r\n          transition: Zoom\r\n        })\r\n      }\r\n    });\r\n    clientSocket.emit(\r\n      \"messageSend1\",\r\n      {\r\n        message: messageS,\r\n        roomId: notificationRoom.current,\r\n        name: user.current.uName,\r\n      },\r\n      (err) => {\r\n        if (!err) console.log(\"testing\");\r\n        else console.log(err);\r\n      }\r\n    \r\n    );\r\n\r\n    clientSocket.emit(\r\n      \"myChats\",\r\n      { roomId: myChatsRoom.current, message: messageS, userImg: us.profileImg },\r\n      (err) => {\r\n        if (!err) console.log(\"testing\");\r\n        else console.log(err);\r\n      }\r\n    );\r\n  //}).catch((err)=>console.log(err.body))\r\n    }\r\n  };\r\n  \r\n  /* const chatDeleteHandler = (message)=>{\r\n    console.log(\"Message\",message)\r\n    setMsgs(message.msg)\r\n}\r\n */\r\n  const searchChatHandler = (keywords)=>{\r\n    setSearchTerm((term)=>{\r\n      //console.log(\"keywords\",term)\r\n      term = keywords\r\n      return term\r\n    })\r\n    \r\n  }\r\n  let elem = null;\r\n  useEffect(() => {\r\n    if(chat.messages){\r\n      \r\n    const list = chat.messages.filter(msg => msg.messageBody.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    setSearchChats({messages : list});\r\n    }\r\n    else{\r\n      console.log(\"no chat\")\r\n    }\r\n}, [searchTerm]);\r\n\r\n  \r\n  if (chat.messages === undefined) {\r\n    \r\n    elem = (\r\n      <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n      <div class=\"spinner-border\" role=\"status\">\r\n    </div>\r\n    </div>\r\n    );\r\n  }\r\n  else if(chat.messages.length == 0 ){\r\n    elem = (<div  style= {{textAlign: \"center\",fontSize:\"1.3rem\",height:\"100%\", \r\n    backgroundImage: \"linear-gradient(to right, #CECECE, #ebebeb)\"\r\n       }}><p style={{position:\"relative\",top:\"40%\"}}>Say Hi👋, to <strong>{recipientInfo.current.name}</strong></p></div>)\r\n    } \r\n   else {\r\n    if(searchTerm !== \"\" && searchChats.messages !== undefined){\r\n      elem = (searchChats.messages.map((msg) =>{\r\n        return <SettingMessage message={msg} user={user.current.uId} isDel={isDel} term={searchTerm}/>;\r\n      })\r\n      )\r\n    }\r\n    else{\r\n      elem = (chat.messages.map((msg) =>{\r\n        return ( <div ref={scrollRef}>\r\n          <SettingMessage message={msg} user={user.current.uId} isDel={isDel} getData = {getData} id={id[1]} rec={recipient.current}/>\r\n          </div>)\r\n      })\r\n      )\r\n    }\r\n\r\n    if(searchChats.messages.length === 0){\r\n      console.log(\"no match\")\r\n      elem = (\r\n        <h5 style={{ textAlign: \"center\" }}>No match found!</h5>\r\n      )\r\n    }\r\n    \r\n    \r\n  }\r\n\r\n  \r\n  return (    \r\n    <RenderChat recipientInfo={recipientInfo.current} \r\n     setLogin={props.setLogin}\r\n     element={elem}\r\n     loading = {loading}\r\n     sendMessage = {sendMessage}\r\n     isDel ={isDel}\r\n     setDel = {setDel}\r\n     isFriend = {isFriend}\r\n     isChat={isChat}\r\n     getData ={getData}\r\n     searchTerm = {searchTerm}\r\n     setTerm = {setSearchTerm}\r\n     searchHandler ={searchChatHandler}\r\n    />\r\n  );\r\n}","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js",["265","266","267","268","269","270","271","272","273","274"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PageTitle from \"../FrontendComponents/components/pageTitle\";\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\nimport \"./chat.css\";\r\nimport { Grid, Hidden } from \"@material-ui/core\";\r\nimport SideBar from \"../FrontendComponents/components/SideBar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n}));\r\nconst AllChats = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { clientSocket } = useContext(SocketContext);\r\n  let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n  const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n  let emails = useRef([]);\r\n  //let usersData = useRef([])\r\n  const [usersData, setData] = useState({uData:[]});\r\n  const [lastMsg, setLastMsg] = useState({\r\n    msgs: [],\r\n    msgId: [],\r\n    emails: [],\r\n    types: [],\r\n    senders: [],\r\n    time : [],\r\n    userName :[],\r\n    userImg: [],\r\n    userId: [],\r\n    userLang:[]\r\n  });\r\n  const [payload, setPayload] = useState()\r\n  //const [recipients, setRecipients] = useState([])\r\n  let roomId = useRef();\r\n  let count = useRef(0);\r\n  let notPresent = useRef(0);\r\n  roomId.current = \"mychats/\" + props.match.params.id;\r\n  let recData = [];\r\n  let recMsgs = [];\r\n  let dummy = [];\r\n  const [loading,setLoading]=useState(false);\r\n let clientSocket1 = useRef()\r\n\r\n  window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(process.env.REACT_APP_IP_URL)\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n\r\n      });\r\n      return s;\r\n    })\r\n  };\r\n  const getRecData = (uId) => {\r\n    emails.current = []\r\n    lastMsg.msgs = []; lastMsg.msgId = []; lastMsg.emails = []; \r\n    lastMsg.types = []; lastMsg.senders = []; lastMsg.time = []; \r\n    chatservice\r\n      .getChatRecipients(uId)\r\n      .then((data) => {\r\n        if (data.length > 0) {\r\n          \r\n          emails.current = data.sort();\r\n          emails.current = Array.from(new Set(emails.current));\r\n          /* userservice\r\n            .getUserByEmail({ userArray: emails.current })\r\n            .then((datafromdb) => {\r\n              recData = datafromdb;\r\n              //console.log(\"recdata\", recData);\r\n              setData((d) => {\r\n                d.uData = recData;\r\n                return d;\r\n              });\r\n            }); */\r\n          // let index = 0\r\n          emails.current.forEach((r, index) => {\r\n            chatservice\r\n              .getLastMsg(uId, r)\r\n              .then((data1) => {\r\n                console.log(\"data1\", data1);\r\n                if(data1){\r\n                  setLastMsg((msg) => {\r\n                    console.log(\"msg\",msg)\r\n                    if (\r\n                      msg.msgs.length >= 1 &&\r\n                      msg.emails.length >= 1 &&\r\n                      msg.types.length >= 1 &&\r\n                      msg.msgId.length >= 1 &&\r\n                      msg.senders.length >= 1 &&\r\n                      msg.userName.length >=1 && msg.userImg.length >=1\r\n                      && msg.userId.length >=1\r\n                    ) {\r\n                      let newMsg = [...msg.msgs];\r\n                      let newR = [...msg.emails];\r\n                      let newT = [...msg.types];\r\n                      let id = [...msg.msgId];\r\n                      let sender = [...msg.senders];\r\n                      let newTime = [...msg.time]\r\n                      let uName = [...msg.userName]\r\n                      let uImg = [...msg.userImg]\r\n                      let uLang= [...msg.userLang]\r\n                      let uId=[...msg.userId]\r\n\r\n                      newMsg = [...newMsg, data1.lastMsg];\r\n                      newR = [...newR, r];\r\n                      newT = [...newT, data1.type];\r\n                      id = [...id, data1.msgId];\r\n                      sender = [...sender, data1.sender];\r\n                      newTime = [...newTime, data1.time]\r\n                      uName =[...uName,data1.userName]\r\n                      uImg=[...uImg,data1.img]\r\n                      uLang=[...uLang, data1.lang]\r\n                      uId=[...uId,data1.id]\r\n\r\n                      return {\r\n                        ...msg,\r\n                        msgs: newMsg,\r\n                        msgId: id,\r\n                        emails: newR,\r\n                        types: newT,\r\n                        senders: sender,\r\n                        time : newTime,\r\n                        userName : uName,\r\n                        userImg : uImg,\r\n                        userId: uId,\r\n                        userLang: uLang\r\n                      };\r\n                    } else {\r\n                      \r\n                      let myMsg =  {\r\n                        msgs: [data1.lastMsg],\r\n                        msgId: [data1.msgId],\r\n                        emails: [r],\r\n                        types: [data1.type],\r\n                        senders: [data1.sender],\r\n                        time : [data1.time],\r\n                        userName : [data1.userName],\r\n                        userImg : [data1.img],\r\n                        userId: [data1.id],\r\n                        userLang: [data1.lang]\r\n                      };\r\n      \r\n                      return myMsg\r\n                    }\r\n                  });\r\n                }\r\n                setLoading(true);\r\n              })\r\n              .catch((err) => console.log(err));\r\n          });\r\n\r\n          //setLastMsg(recMsgs)\r\n\r\n          //console.log(\"recipients\",lastMsg)\r\n        } else console.log(\"no data\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    count.current = 0\r\n    if (clientSocket) {\r\n      clientSocket.emit(\r\n        \"myChatsRoom\",\r\n        { myChatsRoom: roomId.current },\r\n        ({ error, room }) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    //console.log(\"in useEffect 1\");\r\n    getRecData(uId);\r\n    console.log(\"usersData 1\", props.users);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    if (clientSocket) {\r\n      clientSocket.on(\"newRecipient\", (payload) => {\r\n        setPayload((p)=>{\r\n          return p = payload\r\n        })\r\n      })\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    if (payload) {\r\n        let index;\r\n\r\n        if (lastMsg.emails.length !== 0) {\r\n          count.current = 0;\r\n          /* present.current =0\r\n        notPresent.current =0 */\r\n          lastMsg.emails.forEach((u, indx) => {\r\n            //console.log(\"emails from map\", payload.message.from, u.email);\r\n            if (payload.message.from === u) {\r\n              index = indx;\r\n              count.current = count.current + 1;\r\n              \r\n            } else {\r\n              //count.current.current = notPresent.current + 1 ;\r\n              console.log(\"false\");\r\n            }\r\n          });\r\n          if (count.current !== 0) {\r\n            setRecArray(\r\n              index,\r\n              payload.message\r\n            );\r\n          } else if (count.current === 0) {\r\n            setNewRecipient(\r\n              payload.message\r\n            );\r\n          } else console.log(\"nothing \", count.current);\r\n        } else {\r\n          console.log(\"usersData 1\", lastMsg);\r\n        }\r\n      //});\r\n    }\r\n  }, [payload]);\r\n\r\n  const setRecArray = (index, message) => {\r\n    //console.log(lastMsg,usersData)\r\n    let items = []\r\n    items = [...lastMsg.msgs];\r\n    //let email = [...lastMsg.emails]\r\n    let mtypes = [...lastMsg.types]\r\n    let mTime = [...lastMsg.time]\r\n    //let sender = [...lastMsg.senders]\r\n    items[index] = message.messageBody;\r\n    mtypes[index] = message.type\r\n    mTime[index] = message.time\r\n    //sender[index] = message.from\r\n    //email[index] = message.from\r\n    //email = email.sort()\r\n    setLastMsg((m) => {\r\n      //return { ...m, msgs: items, emails: email, types: mtypes, time: mTime, senders: sender };\r\n      return { ...m, msgs: items, types: mtypes, time: mTime};\r\n     \r\n    });\r\n  };\r\n\r\n  const setNewRecipient = (message) => {\r\n    console.log(\"in new chattt\",message.type)\r\n    userservice\r\n      .getUserByEmail({ userEmail: message.from })\r\n      .then((data) => {\r\n        console.log(\"dataa\",data)\r\n        setLastMsg((msg) => {\r\n          console.log(\"msg\",msg)\r\n          if (msg.emails.length >= 1) {\r\n        \r\n            return {\r\n              ...msg, msgs: [...msg.msgs,message.messageBody ], emails: [...msg.emails,message.from], \r\n              types: [...msg.types,message.type], senders: [...msg.senders,message.from], time : [...msg.time,message.time],\r\n              userName : [...msg.userName,data[0].firstName + ' ' + data[0].lastName], userImg : [...msg.userImg,data[0].profileImg],\r\n              userId: [...msg.userId,data[0]._id], userLang: [...msg.userLang,data[0].langPreference]\r\n            };\r\n          }\r\n          else {\r\n                      \r\n            let myMsg =  {\r\n              msgs: [message.messageBody], emails: [message.from], types: [message.type],senders: [message.from],\r\n              time : [message.time], userName : [data[0].firstName + ' ' + data[0].lastName],userImg : [data[0].profileImg],\r\n              userId: [data[0]._id],userLang: [data[0].langPreference]\r\n            };\r\n\r\n            return myMsg\r\n          }\r\n          \r\n        })\r\n      })\r\n      \r\n   \r\n    \r\n  };\r\n\r\n  return (\r\n    <div  style={{height:\"100vh\"}} className=\"back_divs\">\r\n    <Grid container>\r\n       <Hidden only={['xs', 'sm']}>\r\n      <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n      </Hidden>\r\n        <Hidden only={['md', 'lg']}>\r\n      <Grid item xs={12} ><Header/></Grid>\r\n      </Hidden>\r\n   <Grid item xs={12} md={10}>\r\n  <PageTitle name={\"My Chats\"} />\r\n  {loading?\r\n  <div>\r\n  {lastMsg.msgs.length !==0? (\r\n    <div>\r\n        <Grid container   style={{marginTop:\"0.9rem\" }}>\r\n      <Grid item xs ={1} md={1}> </Grid>\r\n      <Grid item xs ={10} md={10}>\r\n      <SingleChat recipients={usersData.uData} lastMsg={lastMsg} />\r\n     \r\n    </Grid>\r\n    <Grid item xs ={1} md={1}> </Grid>\r\n    </Grid>\r\n    </div>\r\n  ) : (\r\n    <h5 style={{ textAlign: \"center\" }}>No Chats Yet!</h5>\r\n  )}\r\n  </div>:\r\n      <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    \r\n  </div>\r\n</div>\r\n}\r\n  </Grid>\r\n   </Grid>\r\n</div>\r\n  );\r\n};\r\nexport default AllChats;\r\n\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js",["275","276","277","278","279","280","281","282"],"import React, { useState, useEffect ,useContext} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from 'clsx';\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  FormControl,\r\n  Input,\r\n  InputAdornment,\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport { login } from \"../api/auth\";\r\nimport io from \"socket.io-client\";\r\nimport LogoPage from \"./LogoPage\"\r\n//import { toast } from \"react-toastify\";\r\n\r\n\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport {ChatContext} from '../../../context/ChatContext';\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport { authentication, isAuthenticated } from \"../clientStorages/auth\";\r\nimport { DeletePermission } from \"../../../context/DeletePermissionContext\";\r\n \r\nconst useStyles = makeStyles((theme) => ({\r\n   textField: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  margin:{\r\n    marginBottom: theme.spacing(2),\r\n    \r\n  }\r\n}));\r\nconst LogIn = ({onIdSubmit,setId, isLogin,setLogin}) => {\r\n  let history = useHistory();\r\n  const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n  const classes = useStyles(); \r\n  const { dispatch } = useContext(DeletePermission);\r\n  const { getUnreadMsgs } = useContext(ChatContext);\r\n  let clientSocket1 = React.useRef()\r\n  useEffect(() => {\r\n    if (isAuthenticated() && isAuthenticated().role === 1)\r\n      history.push(\"/admin/dashboard\");\r\n    else if (isAuthenticated() && isAuthenticated().role === 0)\r\n      history.push(\"/user/dashboard\");\r\n     \r\n      \r\n  }, [history]);\r\n  /* window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    //getUnreadMsgs()\r\n  }\r\n   */\r\n  const [values, setValues] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    errorMessage: \"\",\r\n    showPassword: false,\r\n    loading: false,\r\n  });\r\n  const { email, password, errorMessage, loading } = values;\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n\r\n  useEffect(()=>{\r\n    console.log(\"helloooo\")\r\n    //if(isLogin){\r\n      /* friendReq()\r\n      messageEvent() */\r\n    //}\r\n  // console.log(\"not authentiated\")\r\n \r\n  },[])\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n   const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleTextChange = (evt) => {\r\n    setValues({\r\n      ...values,\r\n      [evt.target.name]: evt.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n  const Register = (event) => {\r\n    event.preventDefault();\r\n    if (isEmpty(email) || isEmpty(password)) {\r\n      setValues({ ...values, errorMessage: \"Both fields are required\" });\r\n    } else if (!isEmail(email)) {\r\n      setValues({ ...values, errorMessage: \"Invalid Email\" });\r\n    } else {\r\n      setValues({ ...values, loading: true });\r\n      const { email, password } = values;\r\n      const data = { email, password };\r\n\r\n      login(data)\r\n        .then((response) => {\r\n          authentication(response.data.token, response.data.user);\r\n          console.log(response)\r\n          if (isAuthenticated() && isAuthenticated().role === 1)\r\n            history.push(\"/dashboard/\"+isAuthenticated()._id);\r\n          else {\r\n            /* friendReq()\r\n            messageEvent() */\r\n            setLogin((l)=>{\r\n              l = true\r\n              localStorage.setItem('isLogin',l)\r\n              return l\r\n            })\r\n            \r\n            history.push(\"/dashboard/\"+isAuthenticated()._id);\r\n      };\r\n          setValues({ ...values, loading: false });\r\n          setId(isAuthenticated()._id)\r\n         var del=  JSON.parse(localStorage.getItem(\"deletion\"));\r\n         if (del == \"\")\r\n            dispatch({ type: \"updatePermission\", value: false })\r\n         \r\n           \r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n            password:\"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n       \r\n        onIdSubmit(email)\r\n        \r\n        console.log(\"email\",email)\r\n        \r\n    }\r\n  };\r\n  \r\n  const LogInForm = () => (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm={6} md={4}>\r\n        <Paper  className=\"Login-container\" style={{padding: '30px 50px'}} > \r\n            <Grid container style={{textAlign:\"center\"}}>\r\n          <Grid item xs={6} >\r\n            <Link className=\"active-header\"  to=\"/login\">Sign In</Link>      \r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Link className=\"header\" to=\"/signup\">Sign Up</Link>\r\n          </Grid>\r\n\r\n        </Grid>\r\n           <TextField\r\n           className={classes.textField}\r\n           style={{marginTop:\"2rem\"}}\r\n            label={\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"   }}> Email Address </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"}}>*</Typography>\r\n                  </div>\r\n                  }\r\n            id=\"email-field\"\r\n            name=\"email\"\r\n            value={values.email}\r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <EmailIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n          />\r\n          \r\n         <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n         <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"    }}> Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\"}}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n         </FormControl>\r\n            <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginBottom: \"1.2rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={Register}\r\n          >\r\n            Sign in\r\n          </Button>\r\n           <Link to=\"/forgot-password\" style={{textDecoration:\"none\",marginLeft:\"1rem auto\"}}  >Forgot Password?</Link>\r\n   </Paper>\r\n         </Grid>\r\n         <Grid item xs={1} sm={3} md={4} >\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"login_div\">\r\n      {loading && <LinearBuffer />}\r\n     \r\n      <LogoPage className=\"title\" name= {\"TalkSee\"} logo={true}/>\r\n                  {LogInForm()} \r\n     \r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n       \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js",["283","284","285","286","287"],"import React, { useState, useEffect,useContext, useRef } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button, Grid, Hidden} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport SideBar from \"./SideBar\";\r\n \r\nimport io from \"socket.io-client\";\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst UpdateProfileSetup = ({setLogin}) => {\r\n    const classes = useStyles();\r\n    const myId=isAuthenticated()._id;\r\n    let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n    const {clientSocket,setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n    let clientSocket1 = useRef()\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n \r\n    const [values, setValues] = useState({\r\n    img: \"\",\r\n    language:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language, successMsg, errorMessage,infoMessage, loading } = values;\r\n \r\n   window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io('http://192.168.10.4:5000/')\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n      });\r\n      return s;\r\n    })\r\n  };\r\n\r\n useEffect(() => {\r\n     accountService.getMyAccount(myId).then((data) => {\r\n     setValues({ ...values , img: data.profileImg, language:data.langPreference});\r\n    }).catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n  }, []);\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       setCapturedPic(true);\r\n       const data = new FormData();\r\n       data.append(\"file\", imageSrc);\r\n       axios.post(process.env.REACT_APP_IP_FACEDET+\"webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading.... \"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n           }\r\n        )\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n    \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(process.env.REACT_APP_IP_FACEDET,data).\r\n           then(async (response) => {\r\n           setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst updateProfile =()=>{\r\n  accountService.updateProfileSetup(myId,{profileImg: img, langPreference: language})\r\n .then((response) => {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.userData));\r\n          setValues({\r\n            ...values,\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n           \r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n    <Grid container>\r\n    <Grid item xs={1} sm={4} md={4}></Grid>\r\n    <Grid item xs={10} sm={4} md={4}>\r\n  <div className=\"profile-page\">\r\n    \r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n            <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div> \r\n             <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div>\r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.value === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => { \r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              fontSize:\"1rem\",\r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1rem\",\r\n              marginBottom: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              textTransform:\"capitalize\"\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={updateProfile}\r\n            \r\n          >\r\n            Update Profile\r\n          </Button>\r\n                   \r\n      </div> \r\n                \r\n  \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n      <div className=\"modal-title\">\r\n        <h3  id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <p style={{color:\"red\"}}><i>Your picture's quality will be low</i></p>\r\n        </div>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n  </Grid>\r\n  <Grid item xs={1} sm={4} md={3}></Grid>\r\n  </Grid>\r\n)\r\nreturn (\r\n    <div  style={{height:\"100vh\"}} className=\"back_divs\">    \r\n    {loading && <LinearBuffer />}\r\n        <Grid container>\r\n          <Hidden only={['xs', 'sm']}>\r\n          <Grid item     md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n           <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} sm={12}><Header setLogin={setLogin}/></Grid>\r\n          </Hidden>\r\n       <Grid item  xs={12} sm={12} md={10}>\r\n     <PageTitle name= {\"Update Profile \"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n      </Grid>\r\n       </Grid>\r\n    </div>\r\n     )\r\n};\r\n\r\nexport default UpdateProfileSetup;\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js",["288","289"],"import React, { useState, useEffect } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst ProfileSetup = ( {match}) => {\r\n    const classes = useStyles();\r\n      let history = useHistory();\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n    const [values, setValues] = useState({\r\n    img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n    language:\"\",\r\n    token:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language,token, successMsg, errorMessage,infoMessage, loading } = values;\r\nuseEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       const data = new FormData();\r\n      data.append(\"file\", imageSrc);\r\n      axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n          })\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n   \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data)\r\n         .then(async (response) => {\r\n         setValues({ ...values , errorMessage :\"\", successMsg:\"response.data.successMessage\"})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst SetProfile =()=>{\r\n  accountService.profileSetup({profileImg: img, langPreference: language, token})\r\n .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n            language:\"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\" alt=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n                   <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div>\r\n                 <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div> \r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.label === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => {\r\n                      console.log(e)\r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1.5rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={SetProfile}\r\n            \r\n          >\r\n            Set Profile\r\n          </Button>\r\n                   {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n      </div> \r\n         \r\n     \r\n \r\n\r\n \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n      <div className=\"modal-title\">\r\n        <h3  id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <p style={{color:\"red\"}} ><i>Your picture's quality will be low</i></p>\r\n        </div>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n     <PageTitle name= {\"Profile Setup\"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default ProfileSetup;\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js",["290","291","292","293","294"],"import React, { useEffect,useRef,useContext,useState } from \"react\";\r\nimport SingleFriend from \"./SingleFriend\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,Hidden,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport Header from \"./Header\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SideBar from \"./SideBar\";\r\n\r\nconst AllFriends = ({setLogin}) => {\r\n\r\n  console.log(\"props\",setLogin)\r\n     const myId=isAuthenticated()._id;\r\n     const [friends, setFriends] =React.useState([]);\r\n     const [loading,setLoading]=useState(false);\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n      const {clientSocket,setSocket,roomJoin, messageEvent, friendReq} =  useContext(SocketContext);\r\n     let userEmail = useRef()\r\n     userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n    // const IP_URL = localStorage.getItem('IP_URL')\r\n\r\n     window.onload = () => {\r\n         friendReq()\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(process.env.REACT_APP_IP_URL)\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getAllMyFriends = () => \r\n     {\r\n       friendService.getAllFriends(myId)\r\n        .then((data)=>{\r\n         setFriends(data);\r\n         setLoading(true);\r\n        })\r\n      .catch((err=>{console.log(err)}))\r\n   \r\n     }\r\n    useEffect(()=>{\r\n\r\n      getAllMyFriends()\r\n      \r\n    }, []);\r\n    \r\n\r\n     return (\r\n      <div style={{height:\"100vh\"}} className=\"back_divs\">\r\n      <Grid container>\r\n       <Hidden only={['xs', 'sm']}>\r\n          <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            <Hidden only={['md', 'lg']}>\r\n          <Grid item xs={12} ><Header setLogin={setLogin}/></Grid>\r\n          </Hidden>\r\n           <Grid item xs={12} md={10}>\r\n      <PageTitle name= {\"My Friends\"}/>\r\n    {loading?\r\n      <div> {\r\n      friends.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",fontSize:\"1.4rem\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>You have no TalkSee Friend😞</div>) \r\n        :\r\n        (\r\n          <div>\r\n             \r\n        <Grid container   style={{marginTop:\"0.9rem\", display :\"flex\"}}>\r\n          <Grid item xs ={1} md={1}> </Grid>\r\n          <Grid item xs ={10} md={10}>\r\n            <Grid container   style={{marginBottom:\"1rem\"}}>\r\n          <Grid item xs ={0} md={8}> </Grid>\r\n          <Grid item xs ={12} md={4}  >\r\n            <TextField\r\n             style={{border:\"1.8px solid black\",borderRadius:\"1rem\",padding:\"0.27rem 1rem\"}}\r\n             \r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search by typing name\"\r\n                 \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n           disableUnderline: true\r\n         }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n     \r\n          {\r\n          friends.filter((friend)=>{\r\n             if(searchTerm == \"\") return friend\r\n             else if (friend.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friend\r\n           }).map((friend, index) => (\r\n               <SingleFriend key={index} friend={friend} onRemove={getAllMyFriends} /> )\r\n          )}\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}   md={1}></Grid>\r\n        </Grid>\r\n         </div>)\r\n         \r\n      }\r\n       </div>:\r\n          \r\n       <div class=\"d-flex justify-content-center\">\r\n         <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    \r\n  </div>\r\n</div>\r\n  }\r\n      </Grid>\r\n  \r\n      </Grid>\r\n \r\n    </div> \r\n    \r\n    );\r\n\r\n}\r\nexport default AllFriends;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js",["295","296","297"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js",["298","299","300"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleFriendRequest from \"./SingleFriendRequest\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport {  Grid,Hidden,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport Header from \"./Header\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport io from \"socket.io-client\";\r\nimport SideBar from \"./SideBar\";\r\n \r\nconst AllFriendRequest = (props) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friendreqs, setFrndRequest] =React.useState([]);\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n      const[loading,setLoading]=useState(false);\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     let userEmail = isAuthenticated().email\r\n     const {setSocket,roomJoin,messageEvent,friendReq,getRequest,acceptRejectCounter} = useContext(SocketContext);\r\n     let roomId = useRef()\r\n     roomId.current = '/'+props.match.params.id\r\n    // const IP_URL = localStorage.getItem('IP_URL')\r\n      \r\n\r\n     window.onload = () => {\r\n        friendReq()\r\n       messageEvent()\r\n       getRequest()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(process.env.REACT_APP_IP_URL)\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getFriendRequest = () => \r\n     {\r\n      friendService.getFriendRequest(myId).then((data)=>{\r\n                setFrndRequest(data)\r\n                setLoading(true);\r\n                acceptRejectCounter();\r\n              })\r\n            .catch((err=>{console.log(err)}))\r\n     }\r\n    useEffect(getFriendRequest , []);\r\n\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n   /*  useEffect(()=>{\r\n      if(clientSocket){\r\n        clientSocket.emit(\r\n          \"myChatsRoom\",\r\n          { myChatsRoom : roomId.current},\r\n          ({error,room}) => {\r\n            if (!error) {\r\n              console.log(\"joined room with id\", room);\r\n            } else {\r\n              console.log(\"error joining room\", error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n     },[]) */\r\n\r\n     return ( \r\n      <div  style={{height:\"100vh\"}} className=\"back_divs\">\r\n      <Grid container>\r\n        <Hidden only={['xs', 'sm']}>\r\n           <Grid item xs ={5} md={2}><SideBar/></Grid>\r\n           </Hidden>\r\n             <Hidden only={['md', 'lg']}>\r\n           <Grid item xs={12} ><Header setLogin={props.setLogin}/></Grid>\r\n           </Hidden>\r\n            <Grid item xs={12} md={10}>\r\n       <PageTitle name= {\"Friend Requests\"}/>\r\n       {loading?\r\n       <div> {\r\n       friendreqs.length === 0 ? \r\n         ( <div style= {{textAlign: \"center\",fontSize:\"1.4rem\",\r\n     padding: \"6rem\", fontWeight:\"bold\"}}>You have no friend request😞</div>) \r\n         :\r\n         (\r\n           <div>\r\n         <Grid container   style={{marginTop:\"0.9rem\" }}>\r\n           <Grid item xs ={1} md={1}> </Grid>\r\n           <Grid item xs ={10} md={10}>\r\n             <Grid container   style={{marginBottom:\"1rem\" }}>\r\n           <Grid item xs ={0} md={8}> </Grid>\r\n           <Grid item xs ={12} md={4}  >\r\n             <TextField\r\n              style={{border:\"1.8px solid black\",borderRadius:\"1rem\",padding:\"0.27rem 1rem\"}}\r\n                 value={searchTerm}\r\n                 onChange={onChangeSearch}\r\n                 placeholder=\"Search by typing name\"\r\n                  \r\n         InputProps={{\r\n           startAdornment: (\r\n             <InputAdornment position=\"end\">\r\n              <SearchIcon style={{ color: \"black\" ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n             </InputAdornment>\r\n           ),\r\n            disableUnderline: true\r\n          }}\r\n             />\r\n             </Grid>\r\n               \r\n             </Grid>\r\n           {\r\n           friendreqs.filter((friendreq)=>{\r\n              if(searchTerm == \"\") return friendreq\r\n              else if (friendreq.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                 return friendreq\r\n            }).map((friendreq, index) => (\r\n                <SingleFriendRequest key={index} friendreq={friendreq} onAcceptReject={getFriendRequest}/> )\r\n           )}\r\n            \r\n           </Grid>\r\n           <Grid item xs={1}   md={10}></Grid>\r\n         </Grid>\r\n         </div> )\r\n          \r\n       }\r\n        </div>:\r\n           \r\n        <div class=\"d-flex justify-content-center\">\r\n          <strong style={{marginRight:\"1rem\"}}>Loading...</strong>\r\n   <div class=\"spinner-border\" role=\"status\">\r\n     \r\n   </div>\r\n </div>\r\n   }\r\n          </Grid>\r\n   \r\n       </Grid>\r\n     </div>\r\n       );\r\n\r\n}\r\nexport default AllFriendRequest;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\ContactManagement.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Settings.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogoPage.js",["301"],"import React from \"react\"\r\nimport { Grid ,Typography} from \"@material-ui/core\"\r\nimport { brown } from \"@material-ui/core/colors\";\r\n\r\nconst LogoPage = ({ name,logo}) => {\r\nreturn(\r\n <Grid container >\r\n      <Grid item xs={1} sm={2} xm={5} md={4}></Grid>\r\n      <Grid item xs={10} sm={8} xm={2} md={6}>\r\n        \r\n     <Typography variant=\"headline\" \r\n         style={{ \r\n          marginTop:\"1rem\",\r\n         position: \"relative\",\r\n         fontSize:\"5rem\",\r\n         color:brown[300],\r\n          marginBottom:\"1rem\",\r\n         fontFamily:\"Brush Script MT, Brush Script Std, cursive\"}}\r\n          component=\"h1\">\r\n              {logo? <img className=\"loginImg\" src={process.env.PUBLIC_URL + '/images/logo.png'} />\r\n         :null}\r\n         {name}\r\n                </Typography>\r\n      \r\n      </Grid>\r\n      \r\n    <Grid item  xs={1} sm={2} xm={5} md={2}></Grid>\r\n    </Grid>\r\n    )}\r\nexport default LogoPage;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\reducers\\DeletePermissionReducer.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SideBar.js",["302","303"],"import React,{useEffect,useContext} from 'react';\r\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport { isAuthenticated, logout } from \"../clientStorages/auth\";\r\n\r\nconst SideBar = ({ history }) => {\r\n     history = useHistory();\r\n    \r\n      const myId = isAuthenticated()._id;\r\n      const myEmail= isAuthenticated().email\r\n      const myProfileImg =isAuthenticated().profileImg;\r\n      const firstName= isAuthenticated().firstName;\r\n      const lastName = isAuthenticated().lastName;\r\n      const {clientSocket,setSocket,messageEvent,roomJoin,friendReq,getRequest,frndcounter,msgCounter} = useContext(SocketContext);\r\n      const handleLogOut = (evt) => {\r\n    logout(() => {\r\n      localStorage.setItem('isLogin',false)\r\n      if(clientSocket!==undefined){\r\n        clientSocket.emit(\"removeuser\",{id:clientSocket.id, name: myEmail})\r\n        clientSocket.off(\"newMessage\");\r\n        clientSocket.off(\"newrequest\");\r\n        clientSocket.off(\"messageSend1\");\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }\r\n      history.push(\"/login\");\r\n    });\r\n  };\r\n  useEffect(()=>{\r\n    getRequest()\r\n  },[frndcounter])\r\n     useEffect (()=>{\r\n    roomJoin(myId)\r\n  },[]);\r\n  \r\n    return (<div class=\"wrapper\">\r\n    <div class=\"sidebar\">\r\n         <div id =\"profile_div\">\r\n        <img\r\n          src= {myProfileImg}\r\n          alt=\"Profile\"\r\n          style={{ height: \"90px\", width: \"90px\", borderRadius: \"50%\" ,cursor:\"pointer\" }}\r\n         onClick={()=>history.push('/update-my-profile-setup/'+myId)}\r\n        /> \r\n        </div>  \r\n         <h4>{firstName +\" \"+lastName}</h4>\r\n        <ul>\r\n          \r\n            <li>\r\n               \r\n                 {msgCounter >= 1 ?\r\n                 <Link to={{pathname: '/mychats/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-comments\"  ><span className=\"friendCounter\">{msgCounter}</span></i> My Chats\r\n                  </Link>\r\n                  :<Link to={{pathname: '/mychats/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-comments\"  ></i> My Chats\r\n                  </Link>}\r\n                 \r\n            </li>\r\n          \r\n            <li>\r\n              {frndcounter >=1   ?\r\n               <Link to={{pathname: '/my-contact-list/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-address-book\"  ><span className=\"friendCounter\">{frndcounter}</span></i> Contacts\r\n                  </Link>:\r\n                   \r\n                <Link to={{pathname: '/my-contact-list/'+myId}} style={{textDecoration:\"none\"}}  >\r\n                     <i class=\"fas fa-address-book\"></i> My Contacts\r\n                  </Link>}\r\n            </li>\r\n              <li> \r\n                <Link to={{pathname: `/my-account-settings/${myId}`}} style={{textDecoration:\"none\"}} >\r\n                     <i class=\"fas fa-user-cog\"  ></i> Account Settings\r\n                  </Link>\r\n            </li>\r\n            \r\n            \r\n        </ul> \r\n        <div class=\"social_media\">\r\n        <button\r\n                    className=\"btn text-decoration-none btn-link\"\r\n                    onClick={handleLogOut}\r\n                  >\r\n                    <i className=\"fas fa-sign-out-alt\" ></i> Logout\r\n                  </button> \r\n          \r\n      </div>\r\n    </div>\r\n   {/*  <div class=\"main_content\">\r\n        <div class=\"header\">Welcome!! Have a nice day.</div>  \r\n        <div class=\"info\">\r\n           \r\n                </div>\r\n    </div>  */}\r\n</div>  );\r\n}\r\n \r\nexport default  withRouter(SideBar);","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js",["304"],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js",["305","306","307"],"import axios from \"axios\";\r\naxios.defaults.headers.common[\"x-auth-token\"] =localStorage.getItem(\"token\");\r\nconst IP_URL = localStorage.getItem('IP_URL')\r\nexport const signup = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"/users/signup\", data);\r\n  return response;\r\n};\r\nexport const login = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"/users/login\", data);\r\n  return response;\r\n};\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js",["308","309","310"],"import React, {useState,useRef} from \"react\";\r\nimport \"./chat.css\"\r\nimport { Player } from 'video-react';\r\nimport \"video-react/dist/video-react.css\"\r\nimport {  Grid, Button } from \"@material-ui/core\";\r\nimport DeleteMessage from './DeleteMsg'\r\nimport chatservice from \"../../services/ChatService\";\r\nexport default function SettingMessage(props) {\r\n \r\n  var boxchecked = JSON.parse(localStorage.getItem(\"deletion\"));\r\n  const [open, setOpen] = React.useState(false);\r\n  const [show,setShow] = React.useState(false)\r\n  const [messageId, setId] = useState()\r\n \r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let elem = null;\r\n  \r\n  const handleClickOpen= (msgId)=>{\r\n    if(boxchecked.state === true){\r\n      console.log(\"mid in settingmsg1\",msgId);\r\n      setShow(false)\r\n         chatservice.deleteMessage(msgId).then((res)=>{\r\n        console.log(\"response: \",res)\r\n        props.getData()\r\n      })\r\n      .catch((err)=>  console.log(err))\r\n   }\r\n   else{\r\n  setShow(true)\r\n  console.log(\"mid in settingmsg2\",msgId);\r\n  setId(msgId)}\r\n  }\r\n\r\n  if (props.message.to === props.user) {\r\n    console.log(props.message.msgId)\r\n         elem = (\r\n          <div >\r\n            <div className='incoming_msg_img'>\r\n              \r\n            </div>\r\n            <Grid container >\r\n                  <Grid item xs={6} md={4}>  \r\n                  <div  style={{ margin:\"12px 15px 4px 8px\",overflow:\"hidden\"}}> \r\n                    <Player   >\r\n                     <source src={props.message.messageVideo} />\r\n                  </Player>\r\n    \r\n                  \r\n                    </div>\r\n                    </Grid>\r\n                  <Grid item xs={6} md={8}  >  {\r\n                props.isDel ?\r\n                <Button className=\"Allbtn\"  style={{textTransform:\"capitalize\" ,marginTop:\"0.8rem\", color:\"#EC5454\",fontSize:\"1.2rem\"}}>\r\n                  <i class=\"fas fa-trash-alt\"   onClick={()=>handleClickOpen(props.message.msgId)}></i>\r\n                </Button>\r\n    \r\n                : null\r\n              }</Grid> \r\n                  </Grid>\r\n                   <div class=\"chat-message is-received\">\r\n                    <div class=\"message-block\">\r\n                   <div class=\"message-text\"><span>{props.message.messageBody}</span></div>\r\n                       <span className=\"received_time_date\"> {props.message.time}</span>\r\n                    </div>\r\n                    </div>\r\n          </div>\r\n        );\r\n      \r\n      }\r\n      else if (props.message.from === props.user) {\r\n        console.log(props.message.msgId)\r\n        console.log(\"url\",props.message.messageVideo)\r\n        elem = (\r\n          <div >\r\n            \r\n             \r\n              <Grid container >\r\n                  <Grid item xs={6} md={8}>  {\r\n                props.isDel ?\r\n                <Button className=\"Allbtn\" style={{textTransform:\"capitalize\" ,float:\"right\",marginTop:\"0.8rem\",color:\"#EC5454\",fontSize:\"1.2rem\"}}  >\r\n                   <i class=\"fas fa-trash-alt\"  onClick={()=>handleClickOpen(props.message.msgId)}></i>\r\n                </Button>\r\n                : null\r\n                   }</Grid>\r\n                  <Grid item xs={6} md={4}  >\r\n                     <div style={{ margin:\"12px 15px 4px 8px\",overflow:\"hidden\"}}> \r\n                    <Player   >\r\n                      <source src={props.message.messageVideo} />\r\n                  </Player>\r\n                  \r\n                    </div></Grid>\r\n                  </Grid>\r\n                   <div class=\"chat-message is-sent\" >\r\n                     <div class=\"message-block\">  \r\n                     <div class=\"message-text\"> {props.message.messageBody}</div>\r\n                      <span class=\"sent_time_date\"> {props.message.time}</span>\r\n                     </div>\r\n                    </div>\r\n          </div>\r\n        );\r\n      } \r\n       else {\r\n    \r\n        console.log(\"nothing\");\r\n      }\r\n  return (\r\n    <div>\r\n        \r\n        {elem}\r\n        {\r\n        show ?\r\n        <DeleteMessage open ={show} setShow={setShow} msgId = {messageId} getData={props.getData}/>\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js",["311","312","313","314","315"],"import React, { useEffect, useRef, useState,useContext } from \"react\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport { format } from \"timeago.js\";\r\nimport {SocketContext} from '../../context/SocketContext';\r\n\r\nimport \"./chat.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n  },\r\n   \r\n  listText: {\r\n    fontSize: \"1.5rem\",\r\n    fontFamily: \"Roboto\",\r\n    marginLeft: \"0.5rem\",\r\n    marginTop:\"2rem\",\r\n    fontWeight:\"bold\",\r\n    display:\"inline\"\r\n   \r\n  },\r\n  listText1: {\r\n    fontSize: \"1.3rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"#808284\",\r\n    width:\"80%\",\r\n    marginLeft: \"0.5rem\",\r\n    display:\"block\",\r\n    cursor:\"pointer\",\r\n    overflow:\"hidden\",\r\n    textOverflow:\"ellipsis\"\r\n    \r\n    \r\n  },\r\n  listTime:{\r\n    fontSize: \"0.8rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n    marginLeft: \"0.5rem\",\r\n    display:\"inline\"\r\n     \r\n  },\r\n  listBtn: {\r\n    backgroundColor: \"rgb(0, 172, 193)\",\r\n    color: \"white\",\r\n    fontSize: \"1rem\",\r\n  },\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n  mygrid1: {\r\n    padding: \"20px\",\r\n  },\r\n  \r\n}));\r\nconst SingleChat = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  let elem = null;\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n  let messages = useRef([]);\r\n  const {msgNotify}=useContext(SocketContext);\r\n  \r\n  const recipientClickHandler = (frEmail,frName, frId, frLang, frImg, type) => {\r\n    //console.log(\"fr\",frEmail,frId,frName,frLang,frImg,type)\r\n    chatservice.getMessagesbyEmail(user.email, frEmail).then((res) => {\r\n      messages.current = res;\r\n      messages.current.map((m) => {\r\n        if (m.type === \"offline\" && m.from !== user.email) {\r\n          chatservice\r\n            .changeMessageType({ type: \"read\" }, m._id)\r\n            .then((res) => {\r\n              msgNotify();\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n        console.log(\"user matched\")\r\n      });\r\n    });\r\n    //console.log(\"fr\", fr);\r\n    localStorage.setItem(\"friendId\", frId);\r\n    localStorage.setItem(\"recName\", frName);\r\n    localStorage.setItem(\"recLang\", frLang);\r\n    localStorage.setItem(\"profileUrl\", frImg);\r\n    history.push(\"/chat/\" + frEmail + \" \" + frId);\r\n  };\r\n  let myElem = null\r\n  let obj = {}\r\n  return (\r\n    <div>\r\n      {props.lastMsg.emails.map((r, ind) => {\r\n        console.log(ind)\r\n        \r\n          if (props.lastMsg.types[ind] === \"read\") {\r\n            //console.log(\"in 1\",props.lastMsg.msgs[ind])\r\n            obj = {id: props.lastMsg.userId[ind], name: props.lastMsg.userName[ind], \r\n              lang: props.lastMsg.userLang[ind], img: props.lastMsg.userImg[ind]}\r\n            elem = (\r\n              <div>\r\n                  <Typography\r\n                    className={classes.listText1}\r\n                    onClick={() =>\r\n                      recipientClickHandler(\r\n                        r,\r\n                        props.lastMsg.userName[ind],\r\n                        props.lastMsg.userId[ind],\r\n                        props.lastMsg.userLang[ind],\r\n                        props.lastMsg.userImg[ind],\r\n                        props.lastMsg.types[ind],\r\n                        \r\n                      )\r\n                    }\r\n                  >\r\n                    {props.lastMsg.msgs[ind]}\r\n                    \r\n                  </Typography>\r\n                  <Typography className={classes.listTime}>\r\n                  {format(props.lastMsg.time[ind])}\r\n                  </Typography>\r\n              </div>\r\n              \r\n            );\r\n          } else if (\r\n            props.lastMsg.types[ind] === \"offline\" &&\r\n            props.lastMsg.senders[ind] !== user.email\r\n          ) {\r\n            //console.log(\"in 3\")\r\n            elem = (\r\n              <div>\r\n              <Typography\r\n             style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                className={classes.listText1}\r\n                onClick={() =>\r\n                  recipientClickHandler(\r\n                    r,\r\n                    props.lastMsg.userName[ind],\r\n                    props.lastMsg.userId[ind],\r\n                    props.lastMsg.userLang[ind],\r\n                    props.lastMsg.userImg[ind],\r\n                    props.lastMsg.types[ind]\r\n                  )\r\n                }\r\n              >\r\n                {props.lastMsg.msgs[ind]}\r\n              </Typography>\r\n              <Typography className={classes.listTime}>\r\n                {format(props.lastMsg.time[ind])}\r\n              </Typography>\r\n              </div>\r\n              \r\n            );\r\n          } else {\r\n            console.log(\"in nothing\", props.lastMsg.types[ind]);\r\n             console.log(\"in nothing1\", props.lastMsg.senders[ind]);\r\n            elem = (\r\n              <div>\r\n                <Typography\r\n               //  style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                  className={classes.listText1}\r\n                  onClick={() =>\r\n                    recipientClickHandler(\r\n                      r,\r\n                      props.lastMsg.userName[ind],\r\n                      props.lastMsg.userId[ind],\r\n                      props.lastMsg.userLang[ind],\r\n                      props.lastMsg.userImg[ind],\r\n                      props.lastMsg.types[ind],\r\n                    )\r\n                  }\r\n                >\r\n                  {props.lastMsg.msgs[ind]}\r\n                </Typography>\r\n                <Typography className={classes.listTime}>\r\n                    {format(props.lastMsg.time[ind])}\r\n                </Typography>\r\n              </div>\r\n            );\r\n          }\r\n        \r\n        //console.log(\"last Msg Obj\",props.lastMsg)\r\n        return (\r\n             \r\n             <Paper style={{padding:  '12px 10px', marginBottom:\"1rem\" }}  >\r\n              <Grid container>\r\n               <Grid item xs={1}  >\r\n                  <img src={props.lastMsg.userImg[ind]} alt='img'    style={{ height: \"50px\", width: \"60px\", borderRadius: \"20%\",display:\"inline\",marginTop:\"7px\" }}/>\r\n               </Grid>\r\n           <Grid item    xs ={11}  >\r\n              <Typography className={classes.listText}>{props.lastMsg.userName[ind]}</Typography>\r\n                 \r\n\r\n                {elem}\r\n           </Grid>\r\n               \r\n               \r\n                \r\n              <div>\r\n                {/*  {setText(r,chatRecipients.lastMsg[index],chatRecipients.msgType[index])}\r\n                {elem}*/\r\n                 }\r\n              </div>\r\n              \r\n          \r\n           </Grid>\r\n          </Paper>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default SingleChat;","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js",["316","317","318","319","320"],"import TypeMessage from \"./TypeMessage\";\r\nimport React , {useEffect,useState}from \"react\";\r\nimport \"./chat.css\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Alert from '../FrontendComponents/Alerts/AlertBar'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport { useHistory } from 'react-router-dom';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport {Button, Grid ,Hidden,InputAdornment, TextField} from \"@material-ui/core\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport SideBar from \"../FrontendComponents/components/SideBar\";\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport {isAuthenticated} from '../FrontendComponents/clientStorages/auth'\r\nimport { grey } from '@material-ui/core/colors';\r\nimport ReactTooltip from 'react-tooltip';\r\n \r\n\r\nexport default function RenderChat(props) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [isSearch, setSearch] = useState(false)\r\n  const open = Boolean(anchorEl);\r\n  const options = [\r\n    'Search',\r\n    'Delete'\r\n  ];\r\n  const [openMenu, setMenu] = useState(true)\r\n  const [open1, setOpen] = useState(false)\r\n  let history = useHistory()\r\n  let myId = isAuthenticated()._id\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    //props.setMyOpen(true)\r\n    setOpen(true)\r\n  };\r\n\r\n  const handleClose = (option) => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const itemClickHandler= (option)=>{\r\n   if(option === 'Delete'){\r\n      props.setDel(true)\r\n      setMenu(false)\r\n   }\r\n    else if(option === 'Search')\r\n      setSearch(!isSearch)\r\n  }\r\n\r\n\r\n   const onChangeSearch = (event)=>{\r\n    //props.setTerm(event.currentTarget.value)\r\n    props.searchHandler(event.currentTarget.value)\r\n  }\r\n  useEffect(()=>{\r\n    let imgUrl = props.recipientInfo.url;\r\n\r\n  })\r\n  let elem = null;\r\n  if(openMenu){\r\n    elem = (\r\n      <div  style={{display:\"inline\",float:\"right\",marginTop:\"0.6rem\"}}>\r\n      <IconButton\r\n    className =\"Allbtn\" \r\n    aria-label=\"more\"\r\n    aria-controls=\"long-menu\"\r\n    aria-haspopup=\"true\"\r\n    onClick={handleClick}\r\n    >\r\n    <MoreVertIcon />\r\n    </IconButton>\r\n    {open1 ?\r\n      <Menu\r\n        id=\"long-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n        style: {\r\n            marginTop: '40px',\r\n            maxHeight: 48 * 4.5,\r\n            width: '20ch',\r\n            \r\n        },\r\n      }}\r\n      >\r\n        <MenuItem className =\"Menu_div\" onClick={()=>itemClickHandler('Search')}>\r\n          <div >\r\n            <SearchIcon fontSize=\"small\" style={{width:\"2rem\"}}/>\r\n            <p style={{display:\"inline\"}}>Search</p>\r\n          </div>\r\n        </MenuItem>\r\n        <MenuItem  className =\"Menu_div\" onClick={()=>itemClickHandler('Delete')}>\r\n          <div>\r\n            <DeleteIcon fontSize=\"small\" style={{width:\"2rem\",paddingBottom:\"0.1rem\"}} />\r\n               <p style={{display:\"inline\"}}>Delete</p>\r\n          </div>\r\n      \r\n        </MenuItem>\r\n    </Menu>\r\n    :\r\n    null\r\n    }\r\n      \r\n    \r\n      </div>\r\n    )\r\n  }\r\n  if(props.isDel){\r\n    elem = (\r\n      <div style={{color:\"gray\",cursor:\"pointer\",float:\"right\",marginTop:\"1rem\",marginRight:\"1rem\"}} data-tip='Close delete Menu' data-for='delete'>\r\n          <CancelIcon onClick={() => {\r\n            console.log(props.isDel)\r\n            props.setDel(false)\r\n            setOpen(false)\r\n            setMenu(true)\r\n            }} />\r\n          \r\n            </div>\r\n\r\n    )\r\n  }\r\n  if(isSearch){\r\n    elem = (\r\n      <TextField\r\n       style={{float:\"right\",marginRight:\"1rem\",marginTop:\"0.8rem\",backgroundColor:\"white\",borderRadius:\"1rem\"}}\r\n       value={props.searchTerm}\r\n       onChange={onChangeSearch}\r\n        placeholder=\"Search Message\"\r\n        size=\"medium\"\r\n          \r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <SearchIcon style={{ color: grey[600] ,marginRight:\"0.2rem\",float:\"right\"}}/>\r\n       \r\n            </InputAdornment>\r\n          ),\r\n          endAdornment :(\r\n               <CancelIcon style={{color:\"gray\",cursor:\"pointer\",marginRight:\"0.4rem\"}} onClick={() => {\r\n            console.log(props.isDel)\r\n            props.setTerm(\"\")\r\n            setSearch(false)\r\n            setOpen(false)\r\n            setMenu(true)\r\n            }} />\r\n      \r\n          ),\r\n          disableUnderline: true \r\n         }}\r\n         \r\n      />\r\n      \r\n    )\r\n  }\r\n  return (\r\n    /* <React.Fragment> \r\n       <div  style={{ height:\"100vh\"}} className=\"chat_div\"> \r\n      <Header setLogin={props.setLogin} />     \r\n        <ReactTooltip id='delete'/>\r\n            <Grid container spacing={0} style={{display:\"flex\"}}>\r\n              <Grid item xs ={1} md={2}></Grid>\r\n              <Grid item xs ={10} md={8} style={{marginTop:\"1rem\" }}>\r\n                <div className='profilediv'>\r\n\r\n              <img\r\n                className='profile'\r\n                src={props.recipientInfo.url}\r\n                alt='dp'\r\n              />\r\n \r\n              <span   style={{display:\"inline\",fontWeight:\"bold\", fontSize: \"21px\" }}>{props.recipientInfo.name}</span>\r\n              \r\n              {      \r\n                 elem\r\n              }\r\n            </div>\r\n            <div className=\"content_body \">\r\n              \r\n             {props.element}\r\n             {props.loading ? (\r\n              <div className='load'>\r\n                <CircularProgress color='secondary' />\r\n              </div>\r\n            ) : null}\r\n \r\n            </div>\r\n           { props.isFriend === true?\r\n            <TypeMessage sendMessage={props.sendMessage} />\r\n            :\r\n            <Alert\r\n            type='error' \r\n            message='This person is not your friend anymore. Add them again to start a chat.'\r\n            autoClose={5000}\r\n            />\r\n          }\r\n              </Grid>\r\n              <Grid item xs ={1} md={2}></Grid>\r\n              </Grid>\r\n              </div>\r\n              </React.Fragment>\r\n  */\r\n  <React.Fragment>\r\n       <div  style={{ height:\"100vh\"}} className=\"chat_div\"> \r\n       <Grid container>\r\n           <Hidden only={['sm', 'xs']}>\r\n          <Grid item  md={2}><SideBar/></Grid>\r\n          </Hidden>\r\n            \r\n       <Grid item xs={12} md={10}>\r\n        <ReactTooltip id='delete'/>\r\n            <Grid container spacing={0} style={{display:\"flex\",marginTop:\"1rem\"}}>\r\n               <Grid xs={0} md={1}></Grid>\r\n              <Grid item xs={12} md ={10}   >\r\n                <div className='profilediv'>\r\n                  <Hidden only={['md','lg']}>\r\n                   <KeyboardBackspaceIcon style={{marginRight:\"0.1rem\",marginLeft:\"0.1rem\",cursor:\"pointer\"}}  onClick={event =>  history.push('/mychats/'+myId)} /> \r\n                  </Hidden>\r\n              <img\r\n                className='profile'\r\n                src={props.recipientInfo.url}\r\n                alt='dp'\r\n              />\r\n \r\n              <span   style={{display:\"inline\",fontWeight:\"bold\", fontSize: \"21px\" }}>{props.recipientInfo.name}</span>\r\n              \r\n              {      \r\n                 elem\r\n              }\r\n            </div>\r\n            <div className=\"content_body \">\r\n              \r\n             {props.element}\r\n             {props.loading ? (\r\n              <div className='load'>\r\n                <CircularProgress color='secondary' />\r\n              </div>\r\n            ) : null}\r\n \r\n            </div>\r\n           { props.isFriend === true?\r\n            <TypeMessage sendMessage={props.sendMessage} />\r\n            :\r\n            <Alert\r\n            type='error' \r\n            message='This person is not your friend anymore. Add them again to start a chat.'\r\n            autoClose={5000}\r\n            />\r\n          }\r\n              </Grid>\r\n              <Grid xs={0} md={1}></Grid>\r\n              </Grid>\r\n              </Grid>\r\n       </Grid>\r\n              </div>\r\n              </React.Fragment>\r\n \r\n  );\r\n}\r\n","D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\DeleteMsg.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js",[],"D:\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userProfile.js",["321"],{"ruleId":"322","replacedBy":"323"},{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","severity":1,"message":"327","line":65,"column":8,"nodeType":"328","endLine":65,"endColumn":10,"suggestions":"329"},{"ruleId":"330","severity":1,"message":"331","line":19,"column":32,"nodeType":"332","messageId":"333","endLine":19,"endColumn":37},{"ruleId":"326","severity":1,"message":"334","line":46,"column":9,"nodeType":"328","endLine":46,"endColumn":23,"suggestions":"335"},{"ruleId":"330","severity":1,"message":"336","line":1,"column":27,"nodeType":"332","messageId":"333","endLine":1,"endColumn":36},{"ruleId":"330","severity":1,"message":"337","line":2,"column":8,"nodeType":"332","messageId":"333","endLine":2,"endColumn":16},{"ruleId":"330","severity":1,"message":"338","line":3,"column":8,"nodeType":"332","messageId":"333","endLine":3,"endColumn":20},{"ruleId":"330","severity":1,"message":"339","line":4,"column":8,"nodeType":"332","messageId":"333","endLine":4,"endColumn":17},{"ruleId":"330","severity":1,"message":"340","line":5,"column":8,"nodeType":"332","messageId":"333","endLine":5,"endColumn":14},{"ruleId":"330","severity":1,"message":"341","line":7,"column":8,"nodeType":"332","messageId":"333","endLine":7,"endColumn":15},{"ruleId":"330","severity":1,"message":"342","line":8,"column":16,"nodeType":"332","messageId":"333","endLine":8,"endColumn":20},{"ruleId":"330","severity":1,"message":"343","line":10,"column":10,"nodeType":"332","messageId":"333","endLine":10,"endColumn":20},{"ruleId":"330","severity":1,"message":"344","line":11,"column":8,"nodeType":"332","messageId":"333","endLine":11,"endColumn":14},{"ruleId":"330","severity":1,"message":"345","line":15,"column":7,"nodeType":"332","messageId":"333","endLine":15,"endColumn":16},{"ruleId":"330","severity":1,"message":"346","line":4,"column":10,"nodeType":"332","messageId":"333","endLine":4,"endColumn":25},{"ruleId":"330","severity":1,"message":"347","line":7,"column":10,"nodeType":"332","messageId":"333","endLine":7,"endColumn":15},{"ruleId":"330","severity":1,"message":"348","line":7,"column":17,"nodeType":"332","messageId":"333","endLine":7,"endColumn":21},{"ruleId":"330","severity":1,"message":"349","line":7,"column":23,"nodeType":"332","messageId":"333","endLine":7,"endColumn":27},{"ruleId":"330","severity":1,"message":"350","line":18,"column":7,"nodeType":"332","messageId":"333","endLine":18,"endColumn":12},{"ruleId":"326","severity":1,"message":"351","line":36,"column":5,"nodeType":"328","endLine":36,"endColumn":7,"suggestions":"352"},{"ruleId":"326","severity":1,"message":"353","line":68,"column":5,"nodeType":"328","endLine":68,"endColumn":14,"suggestions":"354"},{"ruleId":"330","severity":1,"message":"355","line":72,"column":9,"nodeType":"332","messageId":"333","endLine":72,"endColumn":16},{"ruleId":"330","severity":1,"message":"356","line":9,"column":17,"nodeType":"332","messageId":"333","endLine":9,"endColumn":23},{"ruleId":"326","severity":1,"message":"357","line":21,"column":7,"nodeType":"328","endLine":21,"endColumn":16,"suggestions":"358"},{"ruleId":"326","severity":1,"message":"359","line":25,"column":7,"nodeType":"328","endLine":25,"endColumn":16,"suggestions":"360"},{"ruleId":"326","severity":1,"message":"361","line":32,"column":27,"nodeType":"328","endLine":32,"endColumn":29,"suggestions":"362"},{"ruleId":"326","severity":1,"message":"363","line":33,"column":37,"nodeType":"328","endLine":33,"endColumn":39,"suggestions":"364"},{"ruleId":"326","severity":1,"message":"365","line":104,"column":6,"nodeType":"328","endLine":104,"endColumn":8,"suggestions":"366"},{"ruleId":"326","severity":1,"message":"367","line":115,"column":5,"nodeType":"328","endLine":115,"endColumn":7,"suggestions":"368"},{"ruleId":"369","severity":1,"message":"370","line":198,"column":13,"nodeType":"371","messageId":"372","endLine":323,"endColumn":15},{"ruleId":"373","severity":1,"message":"374","line":198,"column":13,"nodeType":"371","messageId":"375","endLine":323,"endColumn":15},{"ruleId":"330","severity":1,"message":"376","line":7,"column":10,"nodeType":"332","messageId":"333","endLine":7,"endColumn":21},{"ruleId":"330","severity":1,"message":"377","line":12,"column":8,"nodeType":"332","messageId":"333","endLine":12,"endColumn":13},{"ruleId":"330","severity":1,"message":"378","line":25,"column":7,"nodeType":"332","messageId":"333","endLine":25,"endColumn":12},{"ruleId":"330","severity":1,"message":"350","line":35,"column":11,"nodeType":"332","messageId":"333","endLine":35,"endColumn":16},{"ruleId":"330","severity":1,"message":"379","line":35,"column":18,"nodeType":"332","messageId":"333","endLine":35,"endColumn":28},{"ruleId":"330","severity":1,"message":"380","line":40,"column":9,"nodeType":"332","messageId":"333","endLine":40,"endColumn":15},{"ruleId":"326","severity":1,"message":"381","line":163,"column":6,"nodeType":"328","endLine":163,"endColumn":8,"suggestions":"382"},{"ruleId":"330","severity":1,"message":"383","line":166,"column":11,"nodeType":"332","messageId":"333","endLine":166,"endColumn":17},{"ruleId":"384","severity":1,"message":"385","line":172,"column":17,"nodeType":"386","messageId":"387","endLine":172,"endColumn":19},{"ruleId":"330","severity":1,"message":"388","line":180,"column":10,"nodeType":"332","messageId":"333","endLine":180,"endColumn":14},{"ruleId":"326","severity":1,"message":"389","line":275,"column":4,"nodeType":"328","endLine":275,"endColumn":16,"suggestions":"390"},{"ruleId":"384","severity":1,"message":"385","line":288,"column":32,"nodeType":"386","messageId":"387","endLine":288,"endColumn":34},{"ruleId":"330","severity":1,"message":"391","line":23,"column":9,"nodeType":"332","messageId":"333","endLine":23,"endColumn":16},{"ruleId":"330","severity":1,"message":"392","line":24,"column":7,"nodeType":"332","messageId":"333","endLine":24,"endColumn":14},{"ruleId":"330","severity":1,"message":"393","line":30,"column":21,"nodeType":"332","messageId":"333","endLine":30,"endColumn":28},{"ruleId":"330","severity":1,"message":"394","line":47,"column":7,"nodeType":"332","messageId":"333","endLine":47,"endColumn":17},{"ruleId":"330","severity":1,"message":"395","line":49,"column":7,"nodeType":"332","messageId":"333","endLine":49,"endColumn":14},{"ruleId":"330","severity":1,"message":"396","line":50,"column":7,"nodeType":"332","messageId":"333","endLine":50,"endColumn":14},{"ruleId":"330","severity":1,"message":"378","line":51,"column":7,"nodeType":"332","messageId":"333","endLine":51,"endColumn":12},{"ruleId":"326","severity":1,"message":"397","line":195,"column":6,"nodeType":"328","endLine":195,"endColumn":8,"suggestions":"398"},{"ruleId":"326","severity":1,"message":"381","line":205,"column":5,"nodeType":"328","endLine":205,"endColumn":7,"suggestions":"399"},{"ruleId":"326","severity":1,"message":"400","line":241,"column":6,"nodeType":"328","endLine":241,"endColumn":15,"suggestions":"401"},{"ruleId":"330","severity":1,"message":"402","line":26,"column":8,"nodeType":"332","messageId":"333","endLine":26,"endColumn":10},{"ruleId":"330","severity":1,"message":"403","line":48,"column":10,"nodeType":"332","messageId":"333","endLine":48,"endColumn":19},{"ruleId":"330","severity":1,"message":"404","line":48,"column":20,"nodeType":"332","messageId":"333","endLine":48,"endColumn":28},{"ruleId":"330","severity":1,"message":"405","line":48,"column":29,"nodeType":"332","messageId":"333","endLine":48,"endColumn":41},{"ruleId":"330","severity":1,"message":"406","line":48,"column":43,"nodeType":"332","messageId":"333","endLine":48,"endColumn":52},{"ruleId":"330","severity":1,"message":"407","line":51,"column":11,"nodeType":"332","messageId":"333","endLine":51,"endColumn":24},{"ruleId":"330","severity":1,"message":"408","line":52,"column":7,"nodeType":"332","messageId":"333","endLine":52,"endColumn":20},{"ruleId":"384","severity":1,"message":"385","line":136,"column":18,"nodeType":"386","messageId":"387","endLine":136,"endColumn":20},{"ruleId":"330","severity":1,"message":"409","line":35,"column":12,"nodeType":"332","messageId":"333","endLine":35,"endColumn":24},{"ruleId":"326","severity":1,"message":"410","line":181,"column":6,"nodeType":"328","endLine":181,"endColumn":8,"suggestions":"411"},{"ruleId":"326","severity":1,"message":"412","line":213,"column":5,"nodeType":"328","endLine":213,"endColumn":16,"suggestions":"413"},{"ruleId":"414","severity":1,"message":"415","line":220,"column":61,"nodeType":"416","messageId":"417","endLine":220,"endColumn":62,"fix":"418"},{"ruleId":"419","severity":1,"message":"420","line":266,"column":14,"nodeType":"421","endLine":266,"endColumn":54},{"ruleId":"326","severity":1,"message":"327","line":155,"column":8,"nodeType":"328","endLine":155,"endColumn":10,"suggestions":"422"},{"ruleId":"326","severity":1,"message":"412","line":185,"column":5,"nodeType":"328","endLine":185,"endColumn":16,"suggestions":"423"},{"ruleId":"330","severity":1,"message":"424","line":4,"column":10,"nodeType":"332","messageId":"333","endLine":4,"endColumn":16},{"ruleId":"330","severity":1,"message":"409","line":23,"column":14,"nodeType":"332","messageId":"333","endLine":23,"endColumn":26},{"ruleId":"326","severity":1,"message":"425","line":59,"column":8,"nodeType":"328","endLine":59,"endColumn":10,"suggestions":"426"},{"ruleId":"427","severity":1,"message":"428","line":108,"column":34,"nodeType":"429","messageId":"430","endLine":108,"endColumn":36},{"ruleId":"384","severity":1,"message":"385","line":109,"column":28,"nodeType":"386","messageId":"387","endLine":109,"endColumn":30},{"ruleId":"330","severity":1,"message":"409","line":26,"column":12,"nodeType":"332","messageId":"333","endLine":26,"endColumn":24},{"ruleId":"326","severity":1,"message":"431","line":62,"column":5,"nodeType":"328","endLine":62,"endColumn":7,"suggestions":"432"},{"ruleId":"427","severity":1,"message":"428","line":113,"column":39,"nodeType":"429","messageId":"430","endLine":113,"endColumn":41},{"ruleId":"326","severity":1,"message":"433","line":55,"column":34,"nodeType":"328","endLine":55,"endColumn":36,"suggestions":"434"},{"ruleId":"427","severity":1,"message":"428","line":122,"column":41,"nodeType":"429","messageId":"430","endLine":122,"endColumn":43},{"ruleId":"384","severity":1,"message":"385","line":123,"column":29,"nodeType":"386","messageId":"387","endLine":123,"endColumn":31},{"ruleId":"419","severity":1,"message":"420","line":20,"column":22,"nodeType":"421","endLine":20,"endColumn":100},{"ruleId":"326","severity":1,"message":"435","line":31,"column":5,"nodeType":"328","endLine":31,"endColumn":18,"suggestions":"436"},{"ruleId":"326","severity":1,"message":"367","line":34,"column":5,"nodeType":"328","endLine":34,"endColumn":7,"suggestions":"437"},{"ruleId":"427","severity":1,"message":"438","line":46,"column":32,"nodeType":"429","messageId":"439","endLine":46,"endColumn":34},{"ruleId":"330","severity":1,"message":"380","line":3,"column":7,"nodeType":"332","messageId":"333","endLine":3,"endColumn":13},{"ruleId":"330","severity":1,"message":"383","line":5,"column":9,"nodeType":"332","messageId":"333","endLine":5,"endColumn":15},{"ruleId":"330","severity":1,"message":"383","line":14,"column":9,"nodeType":"332","messageId":"333","endLine":14,"endColumn":15},{"ruleId":"330","severity":1,"message":"440","line":1,"column":25,"nodeType":"332","messageId":"333","endLine":1,"endColumn":31},{"ruleId":"330","severity":1,"message":"441","line":11,"column":10,"nodeType":"332","messageId":"333","endLine":11,"endColumn":14},{"ruleId":"330","severity":1,"message":"442","line":15,"column":9,"nodeType":"332","messageId":"333","endLine":15,"endColumn":20},{"ruleId":"330","severity":1,"message":"336","line":1,"column":17,"nodeType":"332","messageId":"333","endLine":1,"endColumn":26},{"ruleId":"330","severity":1,"message":"443","line":1,"column":36,"nodeType":"332","messageId":"333","endLine":1,"endColumn":44},{"ruleId":"427","severity":1,"message":"438","line":86,"column":32,"nodeType":"429","messageId":"439","endLine":86,"endColumn":34},{"ruleId":"330","severity":1,"message":"444","line":105,"column":7,"nodeType":"332","messageId":"333","endLine":105,"endColumn":13},{"ruleId":"330","severity":1,"message":"445","line":114,"column":13,"nodeType":"332","messageId":"333","endLine":114,"endColumn":16},{"ruleId":"330","severity":1,"message":"446","line":10,"column":8,"nodeType":"332","messageId":"333","endLine":10,"endColumn":20},{"ruleId":"330","severity":1,"message":"447","line":14,"column":8,"nodeType":"332","messageId":"333","endLine":14,"endColumn":14},{"ruleId":"330","severity":1,"message":"424","line":15,"column":9,"nodeType":"332","messageId":"333","endLine":15,"endColumn":15},{"ruleId":"330","severity":1,"message":"448","line":29,"column":9,"nodeType":"332","messageId":"333","endLine":29,"endColumn":16},{"ruleId":"330","severity":1,"message":"449","line":62,"column":9,"nodeType":"332","messageId":"333","endLine":62,"endColumn":15},{"ruleId":"326","severity":1,"message":"351","line":45,"column":6,"nodeType":"328","endLine":45,"endColumn":8,"suggestions":"450"},"no-native-reassign",["451"],"no-negated-in-lhs",["452"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'match.params.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.","ArrayExpression",["453"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["454"],"'useEffect' is defined but never used.","'AlertBar' is defined but never used.","'LinearBuffer' is defined but never used.","'PageTitle' is defined but never used.","'Select' is defined but never used.","'Resizer' is defined but never used.","'cyan' is defined but never used.","'useHistory' is defined but never used.","'Webcam' is defined but never used.","'useStyles' is assigned a value but never used.","'isAuthenticated' is defined but never used.","'Slide' is defined but never used.","'Zoom' is defined but never used.","'Flip' is defined but never used.","'count' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["455"],"React Hook useEffect has missing dependencies: 'friendReqEvent', 'messageCounter', and 'newMessageEvent'. Either include them or remove the dependency array.",["456"],"'counter' is assigned a value but never used.","'setObj' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUnreadMsgs' and 'userId'. Either include them or remove the dependency array.",["457"],"React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.",["458"],"React Hook useEffect has a missing dependency: 'msgNotify'. Either include it or remove the dependency array.",["459"],"React Hook useEffect has a missing dependency: 'acceptRejectCounter'. Either include it or remove the dependency array.",["460"],"React Hook useEffect has missing dependencies: 'clientSocket' and 'setUsers'. Either include them or remove the dependency array. If 'setUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["461"],"React Hook useEffect has missing dependencies: 'myId' and 'roomJoin'. Either include them or remove the dependency array.",["462"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'ChatContext' is defined but never used.","'axios' is defined but never used.","'dummy' is assigned a value but never used.","'setCounter' is assigned a value but never used.","'IP_URL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'clientSocket'. Either include it or remove the dependency array.",["463"],"'config' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chat.messages'. Either include it or remove the dependency array.",["464"],"'classes' is assigned a value but never used.","'history' is assigned a value but never used.","'setData' is assigned a value but never used.","'notPresent' is assigned a value but never used.","'recData' is assigned a value but never used.","'recMsgs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientSocket', 'getRecData', 'props.users', and 'uId'. Either include them or remove the dependency array.",["465"],["466"],"React Hook useEffect has missing dependencies: 'lastMsg' and 'setRecArray'. Either include them or remove the dependency array.",["467"],"'io' is defined but never used.","'setSocket' is assigned a value but never used.","'roomJoin' is assigned a value but never used.","'messageEvent' is assigned a value but never used.","'friendReq' is assigned a value but never used.","'getUnreadMsgs' is assigned a value but never used.","'clientSocket1' is assigned a value but never used.","'clientSocket' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'myId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["468"],"React Hook React.useCallback has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["469"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"470","text":"471"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["472"],["473"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllMyFriends'. Either include it or remove the dependency array.",["474"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'getData' and 'getSingleContact'. Either include them or remove the dependency array.",["475"],"React Hook useEffect has missing dependencies: 'acceptRejectCounter' and 'myId'. Either include them or remove the dependency array.",["476"],"React Hook useEffect has a missing dependency: 'getRequest'. Either include it or remove the dependency array.",["477"],["478"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'useRef' is defined but never used.","'open' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'useState' is defined but never used.","'myElem' is assigned a value but never used.","'obj' is assigned a value but never used.","'ListItemIcon' is defined but never used.","'Header' is defined but never used.","'options' is assigned a value but never used.","'imgUrl' is assigned a value but never used.",["479"],"no-global-assign","no-unsafe-negation",{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"500","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},[7544,7558],"\r\n           .",{"desc":"480","fix":"513"},{"desc":"511","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"498","fix":"523"},{"desc":"484","fix":"524"},"Update the dependencies array to be: [match.params.token, values]",{"range":"525","text":"526"},"Update the dependencies array to be: [formData, match.params]",{"range":"527","text":"528"},"Update the dependencies array to be: [id]",{"range":"529","text":"530"},"Update the dependencies array to be: [friendReqEvent, isLogin, messageCounter, newMessageEvent]",{"range":"531","text":"532"},"Update the dependencies array to be: [getUnreadMsgs, isLogin, userId]",{"range":"533","text":"534"},"Update the dependencies array to be: [isLogin, users]",{"range":"535","text":"536"},"Update the dependencies array to be: [msgNotify]",{"range":"537","text":"538"},"Update the dependencies array to be: [acceptRejectCounter]",{"range":"539","text":"540"},"Update the dependencies array to be: [clientSocket, setUsers]",{"range":"541","text":"542"},"Update the dependencies array to be: [myId, roomJoin]",{"range":"543","text":"544"},"Update the dependencies array to be: [clientSocket]",{"range":"545","text":"546"},"Update the dependencies array to be: [chat.messages, searchTerm]",{"range":"547","text":"548"},"Update the dependencies array to be: [clientSocket, getRecData, props.users, uId]",{"range":"549","text":"550"},{"range":"551","text":"546"},"Update the dependencies array to be: [lastMsg, payload, setRecArray]",{"range":"552","text":"553"},"Update the dependencies array to be: [myId, values]",{"range":"554","text":"555"},"Update the dependencies array to be: [values]",{"range":"556","text":"557"},{"range":"558","text":"526"},{"range":"559","text":"557"},"Update the dependencies array to be: [getAllMyFriends]",{"range":"560","text":"561"},"Update the dependencies array to be: [getData, getSingleContact]",{"range":"562","text":"563"},"Update the dependencies array to be: [acceptRejectCounter, myId]",{"range":"564","text":"565"},"Update the dependencies array to be: [frndcounter, getRequest]",{"range":"566","text":"567"},{"range":"568","text":"544"},{"range":"569","text":"530"},[1679,1681],"[match.params.token, values]",[1648,1662],"[formData, match.params]",[1141,1143],"[id]",[1989,1998],"[friendReqEvent, isLogin, messageCounter, newMessageEvent]",[699,708],"[getUnreadMsgs, isLogin, userId]",[784,793],"[isLogin, users]",[1416,1418],"[msgNotify]",[1457,1459],"[acceptRejectCounter]",[3292,3294],"[clientSocket, setUsers]",[3477,3479],"[myId, roomJoin]",[5105,5107],"[clientSocket]",[8112,8124],"[chat.messages, searchTerm]",[6778,6780],"[clientSocket, getRecData, props.users, uId]",[6974,6976],[8024,8033],"[lastMsg, payload, setRecArray]",[6005,6007],"[myId, values]",[7285,7296],"[values]",[5157,5159],[6381,6392],[2006,2008],"[getAllMyFriends]",[2203,2205],"[getData, getSingleContact]",[2077,2079],"[acceptRejectCounter, myId]",[1161,1174],"[frndcounter, getRequest]",[1224,1226],[1680,1682]]