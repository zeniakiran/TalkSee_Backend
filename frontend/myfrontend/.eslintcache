[{"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js":"1","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js":"2","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js":"3","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\Login.js":"4","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\hooks\\useLocalStorage.js":"5","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Users.js":"6","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js":"7","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js":"8","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js":"9","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js":"10","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js":"11","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\MyChats.js":"12","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js":"13","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js":"14","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js":"15","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js":"16","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js":"17","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js":"18","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js":"19","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js":"20","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js":"21","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js":"22","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GroupService.js":"23","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js":"24","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js":"25","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\AuthService.js":"26","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js":"27","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js":"28","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js":"29","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js":"30","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js":"31","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js":"32","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js":"33","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js":"34","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js":"35","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js":"36","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js":"37","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js":"38","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js":"39","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js":"40","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js":"41","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js":"42","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js":"43"},{"size":1664,"mtime":1618506463362,"results":"44","hashOfConfig":"45"},{"size":375,"mtime":1616782544565,"results":"46","hashOfConfig":"45"},{"size":3713,"mtime":1619043543140,"results":"47","hashOfConfig":"45"},{"size":2245,"mtime":1616782544560,"results":"48","hashOfConfig":"45"},{"size":607,"mtime":1618506463265,"results":"49","hashOfConfig":"45"},{"size":7000,"mtime":1618506463177,"results":"50","hashOfConfig":"45"},{"size":453,"mtime":1616782544553,"results":"51","hashOfConfig":"45"},{"size":4158,"mtime":1616842370700,"results":"52","hashOfConfig":"45"},{"size":11582,"mtime":1618506463215,"results":"53","hashOfConfig":"45"},{"size":9533,"mtime":1618506463238,"results":"54","hashOfConfig":"45"},{"size":6216,"mtime":1619044090715,"results":"55","hashOfConfig":"45"},{"size":4402,"mtime":1618907044207,"results":"56","hashOfConfig":"45"},{"size":1055,"mtime":1619043543280,"results":"57","hashOfConfig":"45"},{"size":2157,"mtime":1618907044330,"results":"58","hashOfConfig":"45"},{"size":5269,"mtime":1619068967458,"results":"59","hashOfConfig":"45"},{"size":3893,"mtime":1619043543177,"results":"60","hashOfConfig":"45"},{"size":6996,"mtime":1618907044279,"results":"61","hashOfConfig":"45"},{"size":2109,"mtime":1619043543192,"results":"62","hashOfConfig":"45"},{"size":7992,"mtime":1619043543247,"results":"63","hashOfConfig":"45"},{"size":2484,"mtime":1619043543205,"results":"64","hashOfConfig":"45"},{"size":2998,"mtime":1619043543184,"results":"65","hashOfConfig":"45"},{"size":9172,"mtime":1619043543255,"results":"66","hashOfConfig":"45"},{"size":440,"mtime":1616782544572,"results":"67","hashOfConfig":"45"},{"size":421,"mtime":1616782544573,"results":"68","hashOfConfig":"45"},{"size":522,"mtime":1616840429624,"results":"69","hashOfConfig":"45"},{"size":1156,"mtime":1616846836324,"results":"70","hashOfConfig":"45"},{"size":727,"mtime":1618506463369,"results":"71","hashOfConfig":"45"},{"size":1137,"mtime":1616782544530,"results":"72","hashOfConfig":"45"},{"size":2341,"mtime":1616782544527,"results":"73","hashOfConfig":"45"},{"size":781,"mtime":1619043543240,"results":"74","hashOfConfig":"45"},{"size":593,"mtime":1618506463181,"results":"75","hashOfConfig":"45"},{"size":2929,"mtime":1619043543217,"results":"76","hashOfConfig":"45"},{"size":607,"mtime":1619043543298,"results":"77","hashOfConfig":"45"},{"size":1643,"mtime":1616782544570,"results":"78","hashOfConfig":"45"},{"size":268,"mtime":1616840453924,"results":"79","hashOfConfig":"45"},{"size":284,"mtime":1616840482236,"results":"80","hashOfConfig":"45"},{"size":787,"mtime":1618506463380,"results":"81","hashOfConfig":"45"},{"size":1659,"mtime":1619068843751,"results":"82","hashOfConfig":"45"},{"size":1576,"mtime":1616782544520,"results":"83","hashOfConfig":"45"},{"size":308,"mtime":1619043543315,"results":"84","hashOfConfig":"45"},{"size":3055,"mtime":1619043543224,"results":"85","hashOfConfig":"45"},{"size":2272,"mtime":1619043543231,"results":"86","hashOfConfig":"45"},{"size":2553,"mtime":1619043543232,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"ydvxbn",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"91"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"91"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"91"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"116","usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"91"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"91"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"91"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"91"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"91"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"91"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"91"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"91"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"91"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"91"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js",["194","195","196","197"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n//import Pusher from 'pusher-js';\r\n//import Reducer from './Redux/reducers/chat_reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n//Pusher.logToConsole = true;\r\n\r\n//useEffect (()=>{\r\n  /* const pusher = new Pusher('18cb37e3146179a6a80e', {\r\n  cluster: 'ap2',\r\n  authEndpoint: 'http://localhost:5000/api/chatapi/pusher/auth'\r\n}); */\r\n/* usher.connection.bind('connected', function () {\r\n  // attach the socket ID to all outgoing Axios requests\r\n  axios.defaults.headers.common['X-Socket-Id'] = pusher.connection.socket_id;\r\n  console.log(\"id:\",pusher.connection.socket_id)\r\n}); */\r\n//},[])\r\n/* var channel = pusher.subscribe('private-my-channel');\r\nchannel.bind('my-event', function(data) {\r\n  console.log(\"in bind\")\r\n  alert(JSON.stringify(data));\r\n  console.log(\"pusher data:\",data)\r\n}); */\r\n\r\n//const myStore = createStore(Reducer, window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                            //window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\n/* ReactDOM.render(\r\n  <Provider\r\n        store={myStore}\r\n        >\r\n        <App />\r\n  </Provider>\r\n    \r\n  ,\r\n  document.getElementById('root')\r\n); */\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["198","199"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js",["200","201","202","203","204"],"import './App.css';\r\nimport { Route, Switch,BrowserRouter as Router,Redirect } from \"react-router-dom\";\r\nimport UserDashboard from \"./components/FrontendComponents/components/userDashboard\";\r\nimport SignUp from \"./components/FrontendComponents/components/SignUp\";\r\nimport LogIn from \"./components/FrontendComponents/components/LogIn\";\r\nimport Login from \"./components/Login\";\r\nimport Activate from \"./components/FrontendComponents/components/Activate\";\r\nimport notFound from \"./components/FrontendComponents/components/notFound\";\r\nimport ForgotPassword from \"./components/FrontendComponents/components/forgotPassword\";\r\nimport ResetPassword from \"./components/FrontendComponents/components/resetPassword\";\r\nimport ProfileSetup from \"./components/FrontendComponents/components/profileSetup\";\r\nimport AllContact from \"./components/FrontendComponents/components/AllContacts\";\r\nimport AllFriendRequest from \"./components/FrontendComponents/components/AllFriendRequest\";\r\nimport AllFriends from \"./components/FrontendComponents/components/AllFriends\";\r\nimport UpdateProfileSetup from \"./components/FrontendComponents/components/updateProfileSetup\";\r\nimport Chat from \"./components/ChatComponents/Chat\";\r\nimport MyChats from \"./components/ChatComponents/MyChats\";\r\nimport Users from \"./components/ChatComponents/Users\";\r\n//import GroupChat from \"./components/ChatComponents/GroupChat\";\r\nimport io from \"socket.io-client\";\r\nimport {SocketProvider} from './context/SocketContext';\r\nimport {MyChatsProvider} from './context/MyChatsContext';\r\nimport { useEffect,useRef,useState } from 'react';\r\nimport useLocalStorage from './hooks/useLocalStorage';\r\nconst App =() =>{\r\n  /* let clientSocket = useRef(null);\r\n  useEffect(() => {\r\n    clientSocket.current = io(\"http://127.0.0.1:5000\");\r\n    clientSocket.current.on('connect' , () => {\r\n      console.log(clientSocket.current.id);\r\n    });\r\n  }, []) */\r\n  \r\n  const [userId,setId] = useState()\r\n  return (\r\n    <div className=\"App\">\r\n    <MyChatsProvider userId={userId}>\r\n    <SocketProvider >\r\n    <Router>\r\n      <Switch>\r\n            <Route path=\"/\" exact><LogIn onIdSubmit={setId} /></Route>\r\n            <Route exact path=\"/signup\" component={SignUp} />\r\n            <Route exact path=\"/login\"><LogIn onIdSubmit={setId} /></Route>\r\n            <Route exact path=\"/user/activate/:token\" component={Activate} />\r\n            <Route exact path=\"/dashboard\" component={UserDashboard} />\r\n            <Route exact path=\"/reset-password/:token\" component={ResetPassword} />\r\n            <Route exact path=\"/forgot-password\" component={ForgotPassword} />\r\n            <Route exact path=\"/profile-setup/:token\" component={ProfileSetup}/>\r\n            <Route exact path=\"/update-my-profile-setup/:id\" component={UpdateProfileSetup}/>\r\n            <Route exact path=\"/notfound\" component={notFound} />\r\n            <Route exact path =\"/all-contacts\" component= {AllContact}/>\r\n            <Route exact path = \"/all-friend-requests\" component ={AllFriendRequest}/>\r\n            <Route exact path =\"/all-my-friends\"><AllFriends /></Route>\r\n            <Route path=\"/chat/:id\" render={(props) => (\r\n              <Chat {...props} key={props.location.key} />\r\n            )} exact>\r\n            </Route>\r\n            {/* <Route path=\"/groupchat/:id\" render={(props) => (\r\n              <GroupChat {...props} key={props.location.key} />\r\n            )} exact>\r\n            </Route>  */}\r\n            <Route path=\"/users\" exact ><Users/></Route>\r\n            <Route path=\"/mychats\" exact ><MyChats /></Route>\r\n            {<Redirect to=\"/notfound\" /> }     \r\n      </Switch>\r\n      </Router>\r\n    </SocketProvider>\r\n    </MyChatsProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\Login.js",["205","206","207"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport authservice from \"../services/AuthService\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport \"./Login.css\"\r\n//import { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"300px\",\r\n  },\r\n  child: {\r\n    width: \"100%\",\r\n    marginLeft: \"100px\",\r\n    marginTop: \"40px\",\r\n  },\r\n  usericon:{\r\n    fontSize:\"6rem\",\r\n    marginLeft:\"150px\",\r\n    marginTop: \"50px\",\r\n    color:\"rgb(252, 250, 250)\"\r\n  }\r\n  \r\n}));\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = React.useState(\"zeniakiran50@gmail.com\");\r\n  const [password, setPassword] = React.useState(\"12345\");\r\n  return (\r\n    <div id=\"bigdiv\">\r\n    <div className = \"containerlogin\" >\r\n    <AccountCircleIcon className={classes.usericon}/>\r\n      <div className={classes.child}>\r\n      <input type=\"email\" className=\"form-control\" placeholder=\"Email\" \r\n         className=\"tf\" value ={email} onChange={(e) => {\r\n          setEmail(e.target.value);\r\n          }}></input>\r\n        <br />\r\n        <input type=\"password\" className=\"form-control\" placeholder=\"Password\" \r\n         className=\"tf1\" value ={password} onChange={(e) => {\r\n            setPassword(e.target.value);\r\n          }}></input>\r\n        <br />\r\n        \r\n      </div>\r\n      <Button id=\"btnlogin\"\r\n          variant=\"contained\"\r\n          \r\n          onClick={(e) => {\r\n            authservice\r\n              .login(email, password)\r\n              .then((data) => {\r\n                console.log(\" Data from login \",email);\r\n                localStorage.setItem(\"userId\",email)\r\n                window.location.href = \"/users\";\r\n              })\r\n              .catch((err) => {\r\n                console.log(err);\r\n                //toast.error(err.response.data, {\r\n                  //position: toast.POSITION.TOP_LEFT,\r\n                //});\r\n              });\r\n          }}\r\n        >\r\n          Login\r\n        </Button>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Users.js",["208","209","210","211","212","213","214","215","216","217","218"],"import React, { useState, useEffect ,useRef,useContext} from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n//import Avatar from \"@material-ui/core/Avatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import socketIOClient from \"socket.io-client\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport userservice from \"../../services/UserService\";\r\nimport groupservice from \"../../services/GroupService\";\r\nimport { isAuthenticated, logout } from \"../FrontendComponents/clientStorages/auth\";\r\nimport {SocketContext} from '../../context/SocketContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./users.css\"\r\n//import commonUtilites from \"../Utilities/common\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n    \r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(0, 3, 0, 1),\r\n  },\r\n  listText:{\r\n    fontSize : '1.3rem',\r\n    fontFamily : 'Roboto'\r\n  }\r\n  ,listText1:{\r\n    fontSize : '1rem',\r\n    fontFamily : 'Roboto',\r\n    color : 'gray'\r\n  }\r\n  , listBtn:{\r\n    backgroundColor: 'rgb(0, 172, 193)',\r\n    color : 'white',\r\n    fontSize : '1rem'\r\n  }\r\n}));\r\n\r\nconst Users = (props) => {\r\n  const classes = useStyles();\r\n  const [users, setUsers] = useState([]);\r\n  const [newUser, setNewUser] = useState(null);\r\n  const [show, setShow] = React.useState(false)\r\n  let count = useRef(0);\r\n  let userId = useRef(\"\");\r\n  let name = useRef(\"\")\r\n  let userslist = useRef([])\r\n  let history = useHistory();\r\n  let recipients = []\r\n  const clientSocket = useContext(SocketContext);\r\n  //const getUsers = useGetUsers();\r\n  const getData = () => {\r\n    userId.current= localStorage.getItem(\"userId\")\r\n    console.log(userId.current)\r\n    userservice.getUsers()\r\n   .then((data) => {\r\n        userslist.current = data\r\n        userslist.current = userslist.current.filter((u)=>{\r\n          return u.email !== userId.current\r\n        })\r\n        setUsers(userslist.current ); \r\n        console.log(\"contacts\",users)\r\n  })\r\n   .catch((err) => console.log(\"This is err\"+ err));\r\n}\r\n  useEffect(()=>{\r\n    getData()\r\n    console.log(clientSocket)\r\n    if(clientSocket!==undefined)\r\n      clientSocket.emit(\"adduser\",{id:clientSocket.id, name: userId.current})\r\n  },[]);\r\n\r\n    const userClickHandler = (u) =>{\r\n        let email = u.email\r\n        let fname= u.firstName\r\n        let lname = u.lastName\r\n        let lang = u.langPreference\r\n        let profileUrl = u.profileImg\r\n        let x = fname+' '+lname\r\n        localStorage.setItem(\"recName\",x)\r\n        localStorage.setItem(\"recLang\",lang)\r\n        localStorage.setItem(\"profileUrl\",profileUrl)\r\n        history.push('/chat/'+email); \r\n        \r\n  }\r\n\r\n  const viewButtonHandler = ()=>{\r\n    history.push('/mychats/'); \r\n  }\r\n    const showButtons = ()=>{\r\n      setShow(true)\r\n    }\r\n\r\n    const addGroupMember = (e)=>{\r\n          console.log(\"target\",e)\r\n          count.current = count.current+1\r\n          console.log(\"count\",count)\r\n        recipients.push(e)\r\n        console.log(\"Rec\",recipients)\r\n    }\r\n\r\n    const createGroup = () =>{\r\n      if(recipients.length > 1){\r\n        let groupMembers = recipients\r\n        let groupName = name.current\r\n        let groupId = uuidv4();\r\n        let createdBy = userId.current\r\n        groupservice.createGroup({groupName,groupId,createdBy,groupMembers})\r\n              .then((data)=>{\r\n                  console.log(\"Created successfully\",data);\r\n                  history.push('/groupchat'+'/'+groupId)\r\n                  //getData();\r\n                })\r\n              .catch((err)=>{console.log(\"Some Err\")})\r\n        //history.push('/chat/'+address);\r\n        //history.push('/groupchat'+'/'+name.current+'/'+address)\r\n      }\r\n    }\r\n\r\n    const nameHandler = (e) =>{\r\n      name.current = e.target.value\r\n      console.log(name.current)\r\n    }\r\n    const handleLogOut = (evt) => {\r\n      logout(() => {\r\n        history.push(\"/login\");\r\n      });\r\n    };\r\n\r\n  /* useEffect(() => {\r\n    getUsers().then((res) => setUsers(res));\r\n  }, [newUser]); */\r\n\r\n  /* useEffect(() => {\r\n    const socket = socketIOClient(process.env.REACT_APP_API_URL);\r\n    socket.on(\"users\", (data) => {\r\n      setNewUser(data);\r\n    });\r\n  }, []); */\r\n\r\n  return (\r\n    <div>\r\n     {/*<Button onClick={showButtons} variant=\"contained\" color=\"primary\">\r\n        Create Group\r\n      </Button>*/}\r\n      <button\r\n        className=\"btn text-decoration-none btn-link   pl-0\"\r\n        style={{textDecoration:\"none\"}}\r\n        onClick={handleLogOut}\r\n      >\r\n        <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i> Logout\r\n      </button>\r\n      <h3 className=\" text-center\">Contacts</h3>\r\n      <List className={classes.list}>\r\n      {users && (\r\n        <React.Fragment>\r\n          {users.map((u) => (\r\n            <div>\r\n            <ListItem\r\n              className={classes.listItem}\r\n              button\r\n            >\r\n             <ListItemAvatar>\r\n             <Avatar className={classes.globe}>\r\n                <FaceIcon/>\r\n              </Avatar>\r\n            </ListItemAvatar> \r\n              <ListItemText onClick={() => userClickHandler(u)}>\r\n                <Typography className={classes.listText}>{u.firstName}&nbsp;{u.lastName}</Typography>\r\n                <Typography className={classes.listText1}>{u.email}</Typography>\r\n              </ListItemText>\r\n              {/* show ? \r\n              <Button onClick = {() => addGroupMember(u.email)} variant=\"contained\" color=\"primary\">\r\n                Add\r\n              </Button>\r\n              : null */}\r\n              <Button variant=\"contained\" className={classes.listBtn}\r\n              onClick={viewButtonHandler}>View</Button>\r\n            </ListItem>\r\n            <Divider/> \r\n            \r\n            </div>\r\n          ))}\r\n          {/* show ? \r\n              <div>\r\n                <TextField onChange = {nameHandler} id=\"standard-basic\" label=\"Group Name\" />\r\n                <Button onClick = {createGroup} variant=\"contained\" color=\"primary\">\r\n                  Create\r\n                </Button>\r\n                </div>\r\n          : null*/ }\r\n          \r\n        </React.Fragment>\r\n      )}\r\n    </List>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Users;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js",["219","220","221"],"import React, { useState, useEffect } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst ProfileSetup = ( {match}) => {\r\n    const classes = useStyles();\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n    const [values, setValues] = useState({\r\n    img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n    language:\"\",\r\n    token:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language,token, successMsg, errorMessage,infoMessage, loading } = values;\r\nuseEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           //axios.post(\"http://127.0.0.1:5000/\",data)\r\n         //.then(async (response) => {\r\n           setValues({ ...values , errorMessage :\"\", successMsg:\"response.data.successMessage\"})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        //})\r\n        /* .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });*/\r\n      } \r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst SetProfile =()=>{\r\n  accountService.profileSetup({profileImg: img, langPreference: language, token})\r\n .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n            language:\"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n                   <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div>\r\n                  \r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.label === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => {\r\n                      console.log(e)\r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1.5rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={SetProfile}\r\n            \r\n          >\r\n            Set Profile\r\n          </Button>\r\n                   {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  window.location.href='/login'}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n      </div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n     <PageTitle name= {\"Profile Setup\"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default ProfileSetup;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js",["222","223","224","225","226","227","228","229","230"],"import TypeMessage from \"./TypeMessage\";\r\nimport React, { useEffect, useState, useRef,useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport io from \"socket.io-client\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\nimport \"./chat.css\"\r\nimport SettingMessage from \"./SettingMessage\"\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { isAuthenticated, logout } from \"../FrontendComponents/clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {MyChatsContext} from '../../context/MyChatsContext';\r\nimport {SocketContext} from '../../context/SocketContext';\r\nimport Header from \"../FrontendComponents/components/Header\";\r\n\r\nexport default function SingleChat(props) {\r\n \r\n  const [chat, setChat] = useState([{ from: \"\", to: \"\", messages: [] }]);\r\n  const [loading,setLoading] = useState(false)\r\n  let chats = useRef([])\r\n  let dummy = [];\r\n  let user = useRef({uId:\"\",uImg:\"\"})\r\n  let recipient = useRef(\"\");\r\n  let recipientInfo = useRef({name:\"\",lang:\"\",url:\"\"})\r\n  let roomId = useRef(\"\");\r\n  //let clientSocket = useRef(null);\r\n  //clientSocket = props.clientSocket\r\n  const {clientSocket} = useContext(SocketContext);\r\n  console.log(\"my socket\",clientSocket)\r\n  //const {chatRecipients,setRecipients,getRecData} = useContext(MyChatsContext);\r\n  let returndata;\r\n  \r\n  useEffect (()=>{\r\n  recipientInfo.current.name= localStorage.getItem(\"recName\")\r\n  recipientInfo.current.lang = localStorage.getItem(\"recLang\")\r\n  recipientInfo.current.url = localStorage.getItem(\"profileUrl\")\r\n  //console.log(\"vghbjn in Chat\",props.child)\r\n  },[])\r\n\r\n  /* useEffect (()=>{\r\n      pusher = new Pusher('f99dc5faffa906c52c32', {\r\n      secret: 'b525f9548e7daffdcb76',\r\n      cluster: 'ap2',\r\n      encrypted: true\r\n    });\r\n    pusher.connection.bind('connected', function () {\r\n      // attach the socket ID to all outgoing Axios requests\r\n      axios.defaults.headers.common['X-Socket-Id'] = pusher.connection.socket_id;\r\n  });\r\n  },[]) */\r\nuseEffect(() => {\r\n\r\nconst getData = () => { \r\nrecipient.current = props.match.params.id\r\nvar us = JSON.parse(localStorage.getItem(\"user\"))\r\nuser.current.uId = us.email\r\nuserservice.getUserByEmail(user.current.uId).\r\nthen((data) =>{\r\n    user.current.uImg= data[0].profileImg\r\n}).catch((err)=>console.log(\"Err in UserService\",err))\r\n\r\n  chatservice.getMessagesbyEmail(user.current.uId,recipient.current)\r\n  .then((data) => { \r\n    chats.current = data;\r\n    console.log(\"Data\",chats.current)\r\n    if (chats) {\r\n      chats.current.map((chat, index) => {\r\n          dummy.push(chat)\r\n      });\r\n    }\r\n    else{\r\n      console.log(\"No chats or some error\")\r\n    }\r\n    setChat({messages:dummy})   \r\n    })\r\n  .catch((err) => console.log(\"This is err\"+ err));\r\n}\r\ngetData();\r\n\r\n}, []);\r\n\r\nlet count=0;\r\n\r\nuseEffect (()=>{\r\n  count = count+1;\r\n    console.log(\"useEffect called\",count)\r\n    clientSocket.on(\"messageReceived\", (payload) => {\r\n      //console.log(\"in receive payload\",payload)\r\n      /* chatservice.createMessage(payload)\r\n      .then((response)=>console.log(response))\r\n      .catch((err)=>console.log(err)) */\r\n          setChat((chatState) => {\r\n            if(chatState.messages){\r\n              let newMessages = [...chatState.messages];\r\n            newMessages = [...newMessages, payload];\r\n            return { ...chatState, messages: newMessages };\r\n            }\r\n            else{\r\n              return {messages: [payload] };  \r\n            }\r\n            \r\n          });   \r\n    });\r\n},[])\r\n\r\n\r\n  const sendMessage = (message) => {\r\n      setLoading(true)\r\n      let data = { 'msg' : message, \r\n              'lang': recipientInfo.current.lang,\r\n              'userImgUrl': user.current.uImg\r\n              };\r\n      //console.log(data)\r\n      axios.post('http://127.0.0.1:80/',data) // flask ka post method call kre ga\r\n      .then((response )=> {\r\n      setLoading(false)\r\n      // console.log(\" Response\" ,response.data);\r\n      returndata = response.data\r\n      let messageS = {\r\n      from: user.current.uId,\r\n      to: recipient.current,\r\n      room: roomId.current,\r\n      messageBody: message,\r\n      messageVideo: returndata,\r\n      //translated: returndata,\r\n      time: new Date().toLocaleString(),\r\n      type: \"sent\"\r\n    };\r\n      clientSocket.emit(\"messageSend\", messageS, (err) => {\r\n          if (!err) {\r\n            console.log(\"message sent successfully\");\r\n            /* chatservice.createMessage(messageS)\r\n            .then((response)=>console.log(response))\r\n            .catch((err)=>console.log(err)) */\r\n            //console.log(\"MsgS\",messageS)\r\n          if(chat.messages){\r\n            setChat({messages : [...chat.messages,messageS]});\r\n            console.log(\"sent chat\",chat)\r\n          }\r\n          else{\r\n            setChat({messages : [messageS]})\r\n            console.log(\"first message \"+ chat)\r\n          }\r\n          } \r\n          else {\r\n            console.log(\"error sending message:\", err);\r\n          }\r\n        })\r\n        clientSocket.emit(\"messageSend1\", messageS,(err)=>{\r\n          if(!err)\r\n            console.log(\"testing\")\r\n          else\r\n            console.log(err)\r\n        })\r\n        clientSocket.off('messageSend1')\r\n      })\r\n  };\r\n\r\n  let elem = null;\r\n  if(!chat.messages){\r\n      console.log(\"in if part\")\r\n    elem = <h5 style = {{textAlign:\"center\"}}>There are currently no Messages</h5>\r\n  }\r\n  else{\r\n    console.log(\"in else\")\r\n      elem = (\r\n        <SettingMessage chat={chat} user={user.current.uId}/>\r\n      )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Header/>\r\n      <div className=\"singleChatContainer\">\r\n        <div className=\"mesgs\">\r\n          <div className=\"msg_history\">\r\n            <div className=\"profilediv\">\r\n              <img className=\"profile\" src= {recipientInfo.current.url} alt=\"dp\"/>\r\n              <span className=\"recName\">{recipientInfo.current.name}</span>\r\n            </div>\r\n            {elem}\r\n            {loading ? <div className = \"load\"><CircularProgress color=\"secondary\" /></div>:null}\r\n          </div>\r\n          <TypeMessage sendMessage={sendMessage} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\MyChats.js",["231","232","233","234","235","236","237","238","239","240","241","242"],"import React, { useEffect, useRef,useContext,useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport {MyChatsContext} from '../../context/MyChatsContext';\r\nimport {SocketContext} from '../../context/SocketContext';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport \"./chat.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n    \r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(0, 3, 0, 1),\r\n  },\r\n  listText:{\r\n    fontSize : '1.3rem',\r\n    fontFamily : 'Roboto'\r\n  }\r\n  ,listText1:{\r\n    fontSize : '1rem',\r\n    fontFamily : 'Roboto',\r\n    color : 'gray'\r\n  }\r\n  , listBtn:{\r\n    backgroundColor: 'rgb(0, 172, 193)',\r\n    color : 'white',\r\n    fontSize : '1rem'\r\n  },\r\n  mygrid:{\r\n    marginTop:'100px'\r\n  }\r\n}));\r\nconst MyChats = ()=> {\r\n  const classes = useStyles();\r\n  const {chatRecipients,getRecData,setRecipients} = useContext(MyChatsContext);\r\n  const clientSocket = useContext(SocketContext);\r\n  const [newMsg,setNewMsg]=useState(false)\r\n  let uId = JSON.parse(localStorage.getItem(\"user\"))\r\n  let recName = []\r\n  let recMsg = []\r\n  let dummy = []\r\n  //const [recArray,setRecArray] = useState([])\r\n\r\n  const setRecArray = (index,msg)=>{\r\n    let items = [...chatRecipients.lastMsg];\r\n    items[index] = msg;\r\n    console.log(\"items\",items)\r\n    setRecipients((r)=>{\r\n      /* let newR = [...r.lastMsg]\r\n      newR = [...newR,items]\r\n      console.log(r) */\r\n      return {...r,lastMsg:items}\r\n    });\r\n     \r\n  }\r\n\r\n  const setNewRecipient = (rec,msg)=>{\r\n    setRecipients((r)=>{\r\n      let newR = [...r.Rname]\r\n      newR = [...newR,rec]\r\n      let newMsg = [...r.lastMsg]\r\n      newMsg = [...newMsg,msg]\r\n      console.log(newR,newMsg)\r\n      return {...r,Rname:newR,lastMsg:newMsg}\r\n    });\r\n\r\n  }\r\n  useEffect(()=>{\r\n    getRecData(uId.email)\r\n    console.log(\"id user\",uId.email)\r\n    console.log(\"chat\",chatRecipients.Rname)\r\n    \r\n  },[chatRecipients])\r\n\r\n  useEffect(()=>{\r\n    clientSocket.on(\"newRecipient\", (payload) => {\r\n      console.log(\"IN NEW REc\",payload)\r\n      let index;\r\n      let count=0;\r\n      if(chatRecipients.Rname && chatRecipients.lastMsg){\r\n        console.log(chatRecipients)\r\n        chatRecipients.Rname.map((r,indx)=>{\r\n        console.log(payload.payload.from)\r\n        if(payload.payload.from ===r){\r\n          index = indx\r\n          count = count+1\r\n          //setIsRec(count)\r\n        }\r\n        else{\r\n          console.log(\"false\",payload.payload.from,r)\r\n        }\r\n        })\r\n        if(count >=1)\r\n            setRecArray(index,payload.payload.messageBody)\r\n        else if(count === 0)\r\n            setNewRecipient(payload.payload.from,payload.payload.messageBody)\r\n        console.log(\"After state\",chatRecipients)\r\n      }\r\n      else{\r\n        console.log(\"no chat\")\r\n      }\r\n\r\n  })\r\n  },[])\r\n  return (\r\n    <div>\r\n          {chatRecipients.Rname !== undefined ? \r\n            chatRecipients.Rname.map((r,index)=>{\r\n            return (<Grid className={classes.mygrid} xs={12}>\r\n            <ListItem\r\n              button\r\n            >\r\n            <ListItemAvatar>\r\n             <Avatar className={classes.globe}>\r\n                <FaceIcon/>\r\n             </Avatar>\r\n            </ListItemAvatar> \r\n              <ListItemText>\r\n                <Typography>{r}</Typography>\r\n                <Typography>{chatRecipients.lastMsg[index]}</Typography>\r\n              </ListItemText>\r\n            <Divider/> \r\n           </ListItem>\r\n            </Grid>\r\n            )\r\n            })\r\n          :\r\n          console.log(\"no final array\")\r\n          }\r\n      </div>\r\n  )\r\n}\r\nexport default MyChats;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js",["243"],"import React ,{createContext, useRef,useEffect,useState} from 'react'\r\nimport io from \"socket.io-client\";\r\n\r\n//export let clientSocket = useRef(null);\r\nexport const SocketContext = createContext();\r\nexport function SocketProvider({id,children}) {\r\n  /* const clientSocket = io(\"http://127.0.0.1:5000\", );\r\n  clientSocket.on('connect' , () => {\r\n    console.log(clientSocket.id);\r\n  }); */\r\n  //const clientSocket = useRef(null);\r\n  const [clientSocket, setSocket] = useState()\r\n  //let clientSocket = useRef(null);\r\n  useEffect(() => {\r\n    const socket = io(\r\n      'http://localhost:5000',\r\n      //{ query: { id } }\r\n    )\r\n    setSocket(socket)\r\n    return () => socket.close()\r\n    /* clientSocket.current = io(\"http://127.0.0.1:5000\");\r\n    clientSocket.current.on('connect' , () => {\r\n      console.log(clientSocket.current.id);\r\n    }); */\r\n  }, [])\r\n  let value={\r\n    clientSocket : clientSocket,\r\n    setSocket : setSocket\r\n  }\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js",["244","245","246"],"import React ,{createContext, useRef,useEffect,useState} from 'react'\r\nimport chatservice from \"../services/ChatService\"\r\n\r\nexport const MyChatsContext = createContext();\r\nexport function MyChatsProvider({userId,children}) {\r\n    const [chatRecipients,setChatRecipients] = useState(['hy'])\r\n    //let userId=useRef(\"\")\r\n    let recData = []\r\n    let recMsgs = []\r\n    useEffect(()=>{\r\n        //userId.current = localStorage.getItem(\"userId\")\r\n        getRecData(userId)\r\n        console.log(userId)\r\n        \r\n        \r\n    },[userId])\r\n\r\n    const getRecData = (uId)=>{\r\n         recData = []\r\n         recMsgs = []\r\n        console.log(\"in getdata\")\r\n        chatservice.getChatRecipients(uId).then((data)=>{    \r\n            if(data.length>0){\r\n                console.log(\"data getchat\",data)\r\n                data.map((rec) =>{\r\n                    return recData.push(rec)\r\n                })\r\n                setChatRecipients((r)=>{\r\n                    r.Rname=recData\r\n                    console.log(chatRecipients)\r\n                    return r\r\n                })\r\n                chatRecipients.Rname.map((r)=>{\r\n                    console.log(r)\r\n                    chatservice.getLastMsg(uId, r)\r\n                    .then((data)=>{\r\n                        console.log(\"data\",data)\r\n                        recMsgs.push(data)\r\n                        return recMsgs\r\n                    })\r\n                    .catch((err)=>console.log(err))\r\n                })\r\n                setChatRecipients((r)=>{\r\n                    r.lastMsg=recMsgs\r\n                    console.log(chatRecipients)\r\n                    return r\r\n                })\r\n            }\r\n            else\r\n                console.log(\"no data\")\r\n            \r\n            })\r\n            .catch((err)=>console.log(err))\r\n    }\r\n\r\n    /* useEffect(()=>{\r\n        \r\n    },[chatRecipients]) */\r\n    //getRecData()\r\n  const value = {\r\n      chatRecipients : chatRecipients,\r\n      getRecData : getRecData,\r\n      setRecipients : setChatRecipients\r\n  }\r\n  return (\r\n    <MyChatsContext.Provider value={value}>\r\n      {children}\r\n    </MyChatsContext.Provider>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js",["247","248","249","250","251","252","253","254"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js",["255","256"],"import React, { useState, useEffect } from 'react';\r\nimport accountService from \"../../../services/accountService\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { grey,green, cyan,red} from '@material-ui/core/colors';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport PageTitle from \"./pageTitle\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst Activate = ({ match }) => {\r\n let token1 = match.params.token;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    token: '',\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n  });\r\n   const { firstName,lastName, token, errorMessage, successMsg} = formData;\r\n   let history = useHistory()\r\n  useEffect(() => {\r\n    let token = match.params.token;\r\n    let { firstName } = jwt.decode(token);\r\n    let { lastName } = jwt.decode(token);\r\n    if (token) {\r\n      setFormData({ ...formData, firstName,lastName,  token });  \r\n      accountService.accountActivation({token})\r\n      .then(response => {\r\n        setFormData({\r\n          ...formData,\r\n          errorMessage: false,\r\n          successMsg: response.successMessage,\r\n          firstName: response.firstName,\r\n          lastName: response.lastName,\r\n        });\r\n      })\r\n      .catch(err => {\r\n      setFormData({\r\n          ...formData,\r\n          successMsg: false,\r\n         errorMessage: err.response.data.errorMessage,\r\n          firstName: err.response.data.firstName,\r\n          lastName: err.response.data.lastName,\r\n        });\r\n      });\r\n    }}, [match.params]);\r\n     \r\n  \r\n  const ActivationSuccess=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName +\" \"+lastName}</strong></p>\r\n        <div>  <CheckCircleRoundedIcon \r\n              style = {{ color: green[600],paddingTop:\"0.3rem\" }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > Your account has been successfully verified. Click below to create your profile</span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n              variant=\"contained\"\r\n              className= \"loginbtn\"\r\n              onClick={event =>  history.push('/profile-setup/'+token1)}\r\n             \r\n          >\r\n            Create Profile\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n   const ActivationFailure=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName+\" \"+lastName}</strong></p>\r\n        <div>  <CancelRoundedIcon \r\n              style = {{ color: red[600]  }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > <strong>{errorMessage}</strong> </span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n            variant=\"contained\"\r\n             className= \"loginbtn\"\r\n            onClick={event =>  history.push('/signup')}\r\n             \r\n          >\r\n               Try  Again   \r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n  return (\r\n  <div>\r\n        <PageTitle name= {\"Activation\"}/>\r\n       {errorMessage && ( ActivationFailure())}\r\n       {successMsg && (ActivationSuccess())}\r\n  </div>)\r\n      }\r\nexport default Activate;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js",["257"],"import React, { useState, useEffect ,useContext} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from 'clsx';\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  FormControl,\r\n  Input,\r\n  InputAdornment,\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport { login } from \"../api/auth\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { authentication, isAuthenticated } from \"../clientStorages/auth\";\r\n \r\nconst useStyles = makeStyles((theme) => ({\r\n   textField: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  margin:{\r\n    marginBottom: theme.spacing(2),\r\n    \r\n  }\r\n}));\r\nconst LogIn = ({onIdSubmit}) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    if (isAuthenticated() && isAuthenticated().role === 1)\r\n      history.push(\"/admin/dashboard\");\r\n    else if (isAuthenticated() && isAuthenticated().role === 0)\r\n      history.push(\"/user/dashboard\");\r\n     \r\n      \r\n  }, [history]);\r\n  const [values, setValues] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    errorMessage: \"\",\r\n    showPassword: false,\r\n    loading: false,\r\n  });\r\n  const { email, password, errorMessage, loading } = values;\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n   const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleTextChange = (evt) => {\r\n    setValues({\r\n      ...values,\r\n      [evt.target.name]: evt.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n  const Register = (event) => {\r\n    event.preventDefault();\r\n    if (isEmpty(email) || isEmpty(password)) {\r\n      setValues({ ...values, errorMessage: \"Both fields are required\" });\r\n    } else if (!isEmail(email)) {\r\n      setValues({ ...values, errorMessage: \"Invalid Email\" });\r\n    } else {\r\n      setValues({ ...values, loading: true });\r\n      const { email, password } = values;\r\n      const data = { email, password };\r\n\r\n      login(data)\r\n        .then((response) => {\r\n          authentication(response.data.token, response.data.user);\r\n          console.log(response)\r\n          if (isAuthenticated() && isAuthenticated().role === 1)\r\n            history.push(\"/dashboard\");\r\n          else {\r\n        history.push(\"/dashboard\");};\r\n          setValues({ ...values, loading: false });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n            password:\"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n        //var id \r\n        onIdSubmit(email)\r\n        console.log(email)\r\n    }\r\n  };\r\n  \r\n  const LogInForm = () => (\r\n    <div className=\"Login-container\">\r\n      <Grid container>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm={6} md={4}>\r\n           <Paper style={{padding: '30px 50px'}} > \r\n            <Grid container style={{textAlign:\"center\"}}>\r\n          <Grid item xs={6} >\r\n            <Link className=\"active-header\"  to=\"/login\">Sign In</Link>      \r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Link className=\"header\" to=\"/signup\">Sign Up</Link>\r\n          </Grid>\r\n\r\n        </Grid>\r\n           <TextField\r\n           className={classes.textField}\r\n           style={{marginTop:\"2rem\"}}\r\n            label={\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Email Address </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"}}>*</Typography>\r\n                  </div>\r\n                  }\r\n            id=\"email-field\"\r\n            name=\"email\"\r\n            value={values.email}\r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <EmailIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n          />\r\n          \r\n         <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\"}}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n         </FormControl>\r\n            <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginBottom: \"1.2rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={Register}\r\n          >\r\n            Sign in\r\n          </Button>\r\n           <Link to=\"/forgot-password\" style={{textDecoration:\"none\",marginLeft:\"1rem auto\"}}  >Forgot Password?</Link>\r\n   </Paper>\r\n         </Grid>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      {loading && <LinearBuffer />}\r\n     \r\n             <PageTitle name= {\"TalkSee\"}/>\r\n      {LogInForm()}\r\n      \r\n     \r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n       \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js",["258"],"import React, { useEffect } from \"react\";\r\nimport SingleFriendRequest from \"./SingleFriendRequest\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nconst AllFriendRequest = () => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friendreqs, setFrndRequest] =React.useState([]);\r\n     let history = useHistory()\r\n     const getFriendRequest = () => \r\n     {\r\n      friendService.getFriendRequest(myId).then((data)=>{\r\n                setFrndRequest(data)})\r\n            .catch((err=>{console.log(err)}))\r\n     }\r\n    useEffect(getFriendRequest , []);\r\n\r\n     return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"Friend Requests\"}/>\r\n      {\r\n      friendreqs.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Request</div>) \r\n        :\r\n        (\r\n        <Grid container   style={{marginTop:\"3rem\" }}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n          {\r\n          friendreqs.map((friendreq, index) => (\r\n               <SingleFriendRequest key={index} friendreq={friendreq} onAcceptReject={getFriendRequest}/> )\r\n          )}\r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         )\r\n         \r\n      }\r\n       <Grid container   style={{display:\"flex\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n      \r\n <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-contacts')}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n    </div> );\r\n\r\n}\r\nexport default AllFriendRequest;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js",["259"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport accountService from \"../../../services/accountService\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n import { grey, cyan,indigo} from '@material-ui/core/colors';\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n const useStyles = makeStyles((theme) => ({\r\n  textfield: {\r\n     margin: theme.spacing(1),\r\n  },\r\n   margin:{\r\n     marginTop: \"1.2rem\"\r\n   } \r\n}));\r\n\r\nconst ResetPassword = ({ match }) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [values, setValues] = useState({\r\n    token: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  \r\n   const {\r\n    token,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n\r\n    useEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n    const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   const ResetPasswordBtn = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)\r\n    ) {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n    } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Passwords do not match\" });\r\n    } else {\r\n  \r\n     \r\n      setValues({ ...values, loading: true });\r\n     accountService.resetPassword( { newPassword: password, resetPasswordLink: token})\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n             password: \"\",\r\n            confirmPassword: \"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n     \r\n  const ResetPasswordForm=()=>(\r\n      \r\n    <Grid container >\r\n      <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper style={{padding: '30px 50px'}} >\r\n          <Button  \r\n            className= \"loginbtn\"\r\n            href=\"https://mail.google.com/mail/u/0/#inbox\"\r\n            color=\"primary\"\r\n           style={{marginBottom:\"2rem\" ,paddingLeft:\"0rem\",color:indigo[800]  }}\r\n          >\r\n           <ArrowBackIcon style={{fontWeight:\"bold\",marginRight:\"0.3rem\"}}/> Go Back\r\n          </Button>\r\n             <FormControl className={clsx( classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> New Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    \r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={ResetPasswordBtn}\r\n          >\r\n            Reset Password \r\n          </Button>\r\n          {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n           </Paper>\r\n        </Grid>\r\n     <Grid item xs={1} sm={3} md={4}></Grid>\r\n    </Grid>\r\n       \r\n  );   \r\n  return (\r\n  <div>\r\n        {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <PageTitle name= {\"Reset Password\"}/>\r\n      {ResetPasswordForm()}\r\n      \r\n  </div>)\r\n      }\r\nexport default ResetPassword;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js",["260","261"],"import React, { useEffect,useRef,useContext } from \"react\";\r\nimport SingleFriend from \"./SingleFriend\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n\r\nconst AllFriends = (props) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friends, setFriends] =React.useState([]);\r\n     let history = useHistory()\r\n     const clientSocket = useContext(SocketContext);\r\n     let userEmail = useRef()\r\n     userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n     const getAllMyFriends = () => \r\n     {\r\n       friendService.getAllFriends(myId)\r\n        .then((data)=>{\r\n         setFriends(data);})\r\n      .catch((err=>{console.log(err)}))\r\n   \r\n     }\r\n    useEffect(()=>{\r\n\r\n      getAllMyFriends()\r\n    }, []);\r\n    useEffect(()=>{\r\n      /* if(clientSocket!==null){\r\n        console.log(props.clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:props.clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }  */\r\n    },[])\r\n\r\n     return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"My Friends\"}/>\r\n     {\r\n      friends.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Found</div>) \r\n        :\r\n        (\r\n        <Grid container   style={{marginTop:\"3rem\",display :\"flex\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n          {\r\n          friends.map((friend, index) => (\r\n               <SingleFriend key={index} friend={friend} onRemove={getAllMyFriends} /> )\r\n          )}\r\n          <Button\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n              variant=\"outlined\"\r\n              style={{textTransform:\"capitalize\",float:\"right\"}}\r\n              onClick={event => history.push('/all-contacts')}\r\n            >\r\n          <PersonAddIcon style={{marginRight:\"0.2rem\",fontSize:\"1.6rem\"}} />Add New Friend\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         )\r\n         \r\n      }\r\n      \r\n \r\n    </div> );\r\n\r\n}\r\nexport default AllFriends;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js",["262"],"import React, { useEffect } from \"react\";\r\nimport SingleContact from \"./SingleContact\";\r\nimport contactService from \"../../../services/contactService\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Header from \"./Header\";\r\nconst AllContact = () => {\r\n    const myId=isAuthenticated()._id;\r\n    let history = useHistory()\r\n    const [contacts, setContacts] = React.useState([]);\r\n\r\n    const getData = () => {\r\n   friendService.getSentFriendRequest(myId)\r\n   .then((data)=>{\r\n      localStorage.setItem(\"user\",JSON.stringify(data));})\r\n   .catch((err=>{console.log(err)}))\r\n   }\r\n     \r\n  const getSingleContact = () => {\r\n    contactService.getSingleContact(myId)\r\n    .then((data) => { setContacts(data);})\r\n    .catch((err) => {console.log(err);});\r\n  };\r\n\r\n   useEffect(()=> {\r\n     getData();\r\n     getSingleContact();\r\n }, []);\r\n    \r\n   \r\n    return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"Add Friend\"}/>\r\n     \r\n      {\r\n      contacts.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No User Found</div>) \r\n        :(\r\n            <Grid container  style={{marginTop:\"3rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n     \r\n           { contacts.map((contact, index) => {\r\n              return contact._id === myId ? \r\n              <div style= {{textAlign: \"center\",padding: \"4rem\"}}>\r\n               Hey <span style ={{fontWeight:\"bold\"}}> {contact.firstName + \" \" + contact.lastName}</span> , All Users are your Friends <Link style ={{ fontWeight:\"normal\"}} to=\"/all-my-friends\" >Click here</Link>\r\n              </div>\r\n            : <SingleContact key={index} contact={contact}/>\r\n            } )\r\n          }\r\n           </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         \r\n         \r\n        )\r\n          }\r\n        \r\n        \r\n      )\r\n          <Grid container   style={{display:\"flex\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n       <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"right\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-friend-requests')}> My Friend Requests</Button>\r\n        \r\n        <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard')}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n      \r\n    </div> );\r\n}\r\n \r\nexport default AllContact;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js",["263"],"import React, { useState, useEffect } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport accountService from \"../../../services/accountService\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst UpdateProfileSetup = ( {match}) => {\r\n    const classes = useStyles();\r\n     const myId=isAuthenticated()._id;\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n    const [values, setValues] = useState({\r\n    img: \"\",\r\n    language:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language, successMsg, errorMessage,infoMessage, loading } = values;\r\n useEffect(() => {\r\n     accountService.getMyAccount(myId).then((data) => {\r\n     setValues({ ...values , img: data.profileImg, language:data.langPreference});\r\n    }).catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n  }, []);\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           //axios.post(\"http://127.0.0.1:5000/\",data)\r\n        // .then(async (response) => {\r\n           setValues({ ...values , errorMessage :\"\", successMsg:\"response.data.successMessage\"})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n       // })\r\n        /* .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage});  */\r\n        //});\r\n    }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst updateProfile =()=>{\r\n  accountService.updateProfileSetup(myId,{profileImg: img, langPreference: language})\r\n .then((response) => {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.userData));\r\n          setValues({\r\n            ...values,\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n           \r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\" alt=\"img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n                   <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div>\r\n                  \r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.value === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => { \r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1rem\",\r\n              marginBottom: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={updateProfile}\r\n            \r\n          >\r\n            Update Profile\r\n          </Button>\r\n          \r\n      </div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n    <Header/>\r\n     <PageTitle name= {\"Update Profile\"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default UpdateProfileSetup;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GroupService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\AuthService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js",["264","265"],"import axios from \"axios\";\r\naxios.defaults.headers.common[\"x-auth-token\"] =localStorage.getItem(\"token\");\r\nexport const signup = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/signup\", data);\r\n  return response;\r\n};\r\nexport const login = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/login\", data);\r\n  return response;\r\n};\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js",["266"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js",["267"],"import { Button, Typography,Paper } from \"@material-ui/core\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport React, { useState, useContext} from \"react\";\r\nimport { lightBlue, grey} from '@material-ui/core/colors';\r\nconst SingleContact = (props) => {\r\n     \r\n    const { contact } = props;\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n      const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contact._id)?false:true)\r\n     \r\n  \r\n    //const [showAddBtn, setAddBtn]=useState(state?!state.sentRequests.includes(contact._id):true);\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const sentFriendRequest=()=>{\r\n        friendService.sendRequest(\r\n            {friendId:contact._id,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n            \r\n            })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n     const cancelFriendRequest=()=>{\r\n        friendService.cancelRequest(\r\n            {friendId:contact._id,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n             \r\n         })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n    return (\r\n        <div>\r\n       <Paper style={{padding: '10px 20px', marginBottom:\"2rem\"}}  >\r\n              <img src={contact.profileImg}  className=\"img-fluid rounded-circle p-2\"\r\n          style={{ width: \"4.9em\" ,display:\"inline\" }} alt=\"img\"/>\r\n              <h4   style={{display:\"inline\"  }}>{contact.firstName + \" \"+ contact.lastName}</h4>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{display:\"inline-block\"  ,position:\"relative\",float:\"right\",marginTop:\"1rem\", backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{display:\"inline-block\" ,position:\"relative\",float:\"right\" ,marginTop:\"1rem\", backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n        <Typography style={{color:\"gray\",marginLeft:\"5rem\" ,  fontStyle: \"italic\" , fontSize:\"0.9rem\" }}>{contact.email}</Typography>\r\n     </Paper>       \r\n   \r\n    </div>);\r\n}\r\n \r\nexport default SingleContact;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js",["268"],"import { Button,Paper } from \"@material-ui/core\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport React from \"react\";\r\nimport {   red  ,lightGreen} from '@material-ui/core/colors';\r\nconst SingleFriend = (props) => {\r\n    const { friend ,onRemove} = props;\r\n    //console.log(friend)\r\n    const myId=isAuthenticated()._id;\r\n    const myEmail= isAuthenticated().email;\r\n    const friendEmail =  friend.email;\r\n     const RemoveFriend =()=>{\r\n         friendService.deleteFriend({friendId: friend.id, myId}) \r\n          .then((data) => {\r\n            //console.log(data)\r\n           onRemove()\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n             })\r\n         .catch((err) => {console.log(err);});\r\n      }\r\n    const chatButtonHandler = (fr)=>{\r\n      //console.log(\"Fr\",fr)\r\n      localStorage.setItem(\"recName\",fr.name)\r\n      localStorage.setItem(\"recLang\",fr.langPreference)\r\n      localStorage.setItem(\"profileUrl\",fr.profileImg)\r\n      history.push(\"/chat/\"+friendEmail)\r\n    } \r\n    let history = useHistory()\r\n    return (\r\n        <div>\r\n       <Paper style={{padding: '10px 20px', marginBottom:\"2rem\"}}  >\r\n              <img src={friend.profileImg}  className=\"img-fluid rounded-circle p-2\"\r\n          style={{ width: \"4.9em\" ,display:\"inline\" }} alt=\"img\"/>\r\n              <h4   style={{display:\"inline\"  }}>{friend.name}</h4>\r\n        \r\n     <div style={{display:\"inline-flex\",justifyContent:\"space-between\", position:\"relative\", float:\"right\",width: \"170px\",height: \"auto\",marginTop:\"0.8rem\"}}>\r\n           \r\n            <Button className= \"loginbtn\"\r\n              style={{ backgroundColor:lightGreen[700],color:\"white\"}}\r\n            variant=\"contained\" \r\n            size=\"medium\"\r\n            onClick={()=> chatButtonHandler(friend)} \r\n            >Chat</Button>\r\n\r\n            <Button className= \"loginbtn\"\r\n             style={{  backgroundColor:red[400],color:\"white\" }}\r\n            variant=\"contained\" \r\n             onClick ={RemoveFriend}\r\n            >Remove</Button>\r\n            \r\n           \r\n          </div>\r\n               </Paper> \r\n   \r\n    </div>);\r\n}\r\n \r\nexport default SingleFriend;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js",[],{"ruleId":"269","severity":1,"message":"270","line":3,"column":10,"nodeType":"271","messageId":"272","endLine":3,"endColumn":19},{"ruleId":"269","severity":1,"message":"273","line":4,"column":8,"nodeType":"271","messageId":"272","endLine":4,"endColumn":13},{"ruleId":"269","severity":1,"message":"274","line":10,"column":10,"nodeType":"271","messageId":"272","endLine":10,"endColumn":18},{"ruleId":"269","severity":1,"message":"275","line":11,"column":10,"nodeType":"271","messageId":"272","endLine":11,"endColumn":21},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"269","severity":1,"message":"280","line":6,"column":8,"nodeType":"271","messageId":"272","endLine":6,"endColumn":13},{"ruleId":"269","severity":1,"message":"281","line":20,"column":8,"nodeType":"271","messageId":"272","endLine":20,"endColumn":10},{"ruleId":"269","severity":1,"message":"270","line":23,"column":10,"nodeType":"271","messageId":"272","endLine":23,"endColumn":19},{"ruleId":"269","severity":1,"message":"282","line":23,"column":20,"nodeType":"271","messageId":"272","endLine":23,"endColumn":26},{"ruleId":"269","severity":1,"message":"283","line":24,"column":8,"nodeType":"271","messageId":"272","endLine":24,"endColumn":23},{"ruleId":"269","severity":1,"message":"284","line":3,"column":10,"nodeType":"271","messageId":"272","endLine":3,"endColumn":19},{"ruleId":"285","severity":1,"message":"286","line":39,"column":10,"nodeType":"287","endLine":39,"endColumn":24},{"ruleId":"285","severity":1,"message":"286","line":44,"column":10,"nodeType":"287","endLine":44,"endColumn":25},{"ruleId":"269","severity":1,"message":"284","line":6,"column":8,"nodeType":"271","messageId":"272","endLine":6,"endColumn":17},{"ruleId":"269","severity":1,"message":"288","line":19,"column":10,"nodeType":"271","messageId":"272","endLine":19,"endColumn":25},{"ruleId":"269","severity":1,"message":"289","line":64,"column":10,"nodeType":"271","messageId":"272","endLine":64,"endColumn":17},{"ruleId":"269","severity":1,"message":"290","line":64,"column":19,"nodeType":"271","messageId":"272","endLine":64,"endColumn":29},{"ruleId":"269","severity":1,"message":"291","line":65,"column":10,"nodeType":"271","messageId":"272","endLine":65,"endColumn":14},{"ruleId":"292","severity":1,"message":"293","line":93,"column":5,"nodeType":"294","endLine":93,"endColumn":7,"suggestions":"295"},{"ruleId":"269","severity":1,"message":"296","line":112,"column":11,"nodeType":"271","messageId":"272","endLine":112,"endColumn":22},{"ruleId":"269","severity":1,"message":"297","line":116,"column":11,"nodeType":"271","messageId":"272","endLine":116,"endColumn":25},{"ruleId":"269","severity":1,"message":"298","line":124,"column":11,"nodeType":"271","messageId":"272","endLine":124,"endColumn":22},{"ruleId":"299","severity":1,"message":"300","line":133,"column":44,"nodeType":"301","messageId":"302","endLine":133,"endColumn":45},{"ruleId":"269","severity":1,"message":"303","line":142,"column":11,"nodeType":"271","messageId":"272","endLine":142,"endColumn":22},{"ruleId":"269","severity":1,"message":"273","line":10,"column":8,"nodeType":"271","messageId":"272","endLine":10,"endColumn":13},{"ruleId":"292","severity":1,"message":"304","line":150,"column":8,"nodeType":"294","endLine":150,"endColumn":10,"suggestions":"305"},{"ruleId":"306","severity":1,"message":"307","line":203,"column":14,"nodeType":"308","endLine":203,"endColumn":54},{"ruleId":"269","severity":1,"message":"281","line":4,"column":8,"nodeType":"271","messageId":"272","endLine":4,"endColumn":10},{"ruleId":"269","severity":1,"message":"288","line":10,"column":10,"nodeType":"271","messageId":"272","endLine":10,"endColumn":25},{"ruleId":"269","severity":1,"message":"309","line":10,"column":27,"nodeType":"271","messageId":"272","endLine":10,"endColumn":33},{"ruleId":"269","severity":1,"message":"310","line":11,"column":10,"nodeType":"271","messageId":"272","endLine":11,"endColumn":20},{"ruleId":"269","severity":1,"message":"311","line":12,"column":9,"nodeType":"271","messageId":"272","endLine":12,"endColumn":23},{"ruleId":"312","severity":1,"message":"313","line":57,"column":45,"nodeType":"314","messageId":"315","endLine":57,"endColumn":46,"fix":"316"},{"ruleId":"317","severity":1,"message":"318","line":67,"column":39,"nodeType":"319","messageId":"320","endLine":67,"endColumn":41},{"ruleId":"292","severity":1,"message":"321","line":80,"column":4,"nodeType":"294","endLine":80,"endColumn":6,"suggestions":"322"},{"ruleId":"292","severity":1,"message":"323","line":85,"column":11,"nodeType":"301","endLine":85,"endColumn":18},{"ruleId":"269","severity":1,"message":"282","line":1,"column":28,"nodeType":"271","messageId":"272","endLine":1,"endColumn":34},{"ruleId":"269","severity":1,"message":"281","line":2,"column":8,"nodeType":"271","messageId":"272","endLine":2,"endColumn":10},{"ruleId":"269","severity":1,"message":"324","line":6,"column":8,"nodeType":"271","messageId":"272","endLine":6,"endColumn":12},{"ruleId":"269","severity":1,"message":"325","line":15,"column":8,"nodeType":"271","messageId":"272","endLine":15,"endColumn":14},{"ruleId":"269","severity":1,"message":"326","line":60,"column":10,"nodeType":"271","messageId":"272","endLine":60,"endColumn":16},{"ruleId":"269","severity":1,"message":"327","line":60,"column":17,"nodeType":"271","messageId":"272","endLine":60,"endColumn":26},{"ruleId":"269","severity":1,"message":"328","line":62,"column":7,"nodeType":"271","messageId":"272","endLine":62,"endColumn":14},{"ruleId":"269","severity":1,"message":"329","line":63,"column":7,"nodeType":"271","messageId":"272","endLine":63,"endColumn":13},{"ruleId":"269","severity":1,"message":"330","line":64,"column":7,"nodeType":"271","messageId":"272","endLine":64,"endColumn":12},{"ruleId":"292","severity":1,"message":"331","line":96,"column":5,"nodeType":"294","endLine":96,"endColumn":21,"suggestions":"332"},{"ruleId":"317","severity":1,"message":"318","line":105,"column":42,"nodeType":"319","messageId":"320","endLine":105,"endColumn":44},{"ruleId":"292","severity":1,"message":"333","line":127,"column":5,"nodeType":"294","endLine":127,"endColumn":7,"suggestions":"334"},{"ruleId":"269","severity":1,"message":"282","line":1,"column":31,"nodeType":"271","messageId":"272","endLine":1,"endColumn":37},{"ruleId":"269","severity":1,"message":"282","line":1,"column":31,"nodeType":"271","messageId":"272","endLine":1,"endColumn":37},{"ruleId":"292","severity":1,"message":"335","line":16,"column":7,"nodeType":"294","endLine":16,"endColumn":15,"suggestions":"336"},{"ruleId":"317","severity":1,"message":"318","line":33,"column":45,"nodeType":"319","messageId":"320","endLine":33,"endColumn":47},{"ruleId":"269","severity":1,"message":"337","line":11,"column":39,"nodeType":"271","messageId":"272","endLine":11,"endColumn":49},{"ruleId":"269","severity":1,"message":"338","line":12,"column":10,"nodeType":"271","messageId":"272","endLine":12,"endColumn":21},{"ruleId":"269","severity":1,"message":"339","line":12,"column":22,"nodeType":"271","messageId":"272","endLine":12,"endColumn":30},{"ruleId":"292","severity":1,"message":"340","line":25,"column":6,"nodeType":"294","endLine":25,"endColumn":8,"suggestions":"341"},{"ruleId":"292","severity":1,"message":"342","line":88,"column":6,"nodeType":"294","endLine":88,"endColumn":8,"suggestions":"343"},{"ruleId":"292","severity":1,"message":"344","line":105,"column":6,"nodeType":"294","endLine":105,"endColumn":8,"suggestions":"345"},{"ruleId":"269","severity":1,"message":"346","line":106,"column":10,"nodeType":"271","messageId":"272","endLine":106,"endColumn":21},{"ruleId":"269","severity":1,"message":"347","line":109,"column":11,"nodeType":"271","messageId":"272","endLine":109,"endColumn":15},{"ruleId":"269","severity":1,"message":"348","line":19,"column":32,"nodeType":"271","messageId":"272","endLine":19,"endColumn":37},{"ruleId":"292","severity":1,"message":"349","line":46,"column":9,"nodeType":"294","endLine":46,"endColumn":23,"suggestions":"350"},{"ruleId":"269","severity":1,"message":"351","line":1,"column":38,"nodeType":"271","messageId":"272","endLine":1,"endColumn":48},{"ruleId":"292","severity":1,"message":"352","line":20,"column":34,"nodeType":"294","endLine":20,"endColumn":36,"suggestions":"353"},{"ruleId":"292","severity":1,"message":"304","line":65,"column":8,"nodeType":"294","endLine":65,"endColumn":10,"suggestions":"354"},{"ruleId":"269","severity":1,"message":"355","line":16,"column":12,"nodeType":"271","messageId":"272","endLine":16,"endColumn":24},{"ruleId":"292","severity":1,"message":"356","line":30,"column":8,"nodeType":"294","endLine":30,"endColumn":10,"suggestions":"357"},{"ruleId":"292","severity":1,"message":"358","line":32,"column":5,"nodeType":"294","endLine":32,"endColumn":7,"suggestions":"359"},{"ruleId":"292","severity":1,"message":"360","line":152,"column":6,"nodeType":"294","endLine":152,"endColumn":8,"suggestions":"361"},{"ruleId":"269","severity":1,"message":"362","line":4,"column":9,"nodeType":"271","messageId":"272","endLine":4,"endColumn":15},{"ruleId":"269","severity":1,"message":"362","line":13,"column":9,"nodeType":"271","messageId":"272","endLine":13,"endColumn":15},{"ruleId":"317","severity":1,"message":"363","line":9,"column":39,"nodeType":"319","messageId":"364","endLine":9,"endColumn":41},{"ruleId":"269","severity":1,"message":"351","line":4,"column":27,"nodeType":"271","messageId":"272","endLine":4,"endColumn":37},{"ruleId":"269","severity":1,"message":"365","line":11,"column":11,"nodeType":"271","messageId":"272","endLine":11,"endColumn":18},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Provider' is defined but never used.","'createStore' is defined but never used.","no-native-reassign",["366"],"no-negated-in-lhs",["367"],"'Login' is defined but never used.","'io' is defined but never used.","'useRef' is defined but never used.","'useLocalStorage' is defined but never used.","'TextField' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'isAuthenticated' is defined but never used.","'newUser' is assigned a value but never used.","'setNewUser' is assigned a value but never used.","'show' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clientSocket' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["368"],"'showButtons' is assigned a value but never used.","'addGroupMember' is assigned a value but never used.","'createGroup' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'nameHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'match.params.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["369"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'logout' is defined but never used.","'useHistory' is defined but never used.","'MyChatsContext' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"370","text":"371"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dummy' and 'props.match.params.id'. Either include them or remove the dependency array.",["372"],"Assignments to the 'count' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'List' is defined but never used.","'Button' is defined but never used.","'newMsg' is assigned a value but never used.","'setNewMsg' is assigned a value but never used.","'recName' is assigned a value but never used.","'recMsg' is assigned a value but never used.","'dummy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRecData' and 'uId.email'. Either include them or remove the dependency array.",["373"],"React Hook useEffect has missing dependencies: 'chatRecipients', 'clientSocket', 'setNewRecipient', and 'setRecArray'. Either include them or remove the dependency array.",["374"],"React Hook useEffect has a missing dependency: 'getRecData'. Either include it or remove the dependency array.",["375"],"'getRecData' is assigned a value but never used.","'isRecipient' is assigned a value but never used.","'setIsRec' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["376"],"React Hook useEffect has a missing dependency: 'clientSocket'. Either include it or remove the dependency array.",["377"],"React Hook useEffect has missing dependencies: 'clientSocket' and 'history.location.pathname'. Either include them or remove the dependency array.",["378"],"'setRecArray' is assigned a value but never used.","'item' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["379"],"'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'myId'. Either include it or remove the dependency array.",["380"],["381"],"'clientSocket' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllMyFriends'. Either include it or remove the dependency array.",["382"],"React Hook useEffect has missing dependencies: 'getData' and 'getSingleContact'. Either include them or remove the dependency array.",["383"],"React Hook useEffect has missing dependencies: 'myId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["384"],"'config' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'myEmail' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},[2265,2268],"\r\n.",{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"387","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},"Update the dependencies array to be: [clientSocket, getData]",{"range":"414","text":"415"},"Update the dependencies array to be: [match.params.token, values]",{"range":"416","text":"417"},"Update the dependencies array to be: [dummy, props.match.params.id]",{"range":"418","text":"419"},"Update the dependencies array to be: [chatRecipients, getRecData, uId.email]",{"range":"420","text":"421"},"Update the dependencies array to be: [chatRecipients, clientSocket, setNewRecipient, setRecArray]",{"range":"422","text":"423"},"Update the dependencies array to be: [getRecData, userId]",{"range":"424","text":"425"},"Update the dependencies array to be: [history]",{"range":"426","text":"427"},"Update the dependencies array to be: [clientSocket]",{"range":"428","text":"429"},"Update the dependencies array to be: [clientSocket, history.location.pathname]",{"range":"430","text":"431"},"Update the dependencies array to be: [formData, match.params]",{"range":"432","text":"433"},"Update the dependencies array to be: [myId]",{"range":"434","text":"435"},{"range":"436","text":"417"},"Update the dependencies array to be: [getAllMyFriends]",{"range":"437","text":"438"},"Update the dependencies array to be: [getData, getSingleContact]",{"range":"439","text":"440"},"Update the dependencies array to be: [myId, values]",{"range":"441","text":"442"},[3027,3029],"[clientSocket, getData]",[4931,4933],"[match.params.token, values]",[2830,2832],"[dummy, props.match.params.id]",[2694,2710],"[chatRecipients, getRecData, uId.email]",[3592,3594],"[chatRecipients, clientSocket, setNewRecipient, setRecArray]",[527,535],"[getRecData, userId]",[1060,1062],"[history]",[3128,3130],"[clientSocket]",[3537,3539],"[clientSocket, history.location.pathname]",[1648,1662],"[formData, match.params]",[852,854],"[myId]",[1681,1683],[1089,1091],"[getAllMyFriends]",[1113,1115],"[getData, getSingleContact]",[5079,5081],"[myId, values]"]