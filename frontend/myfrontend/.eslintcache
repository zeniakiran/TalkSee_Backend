[{"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js":"1","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js":"2","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js":"3","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Users.js":"4","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js":"5","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js":"6","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js":"7","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js":"8","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js":"9","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js":"10","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js":"11","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js":"12","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js":"13","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js":"14","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js":"15","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js":"16","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js":"17","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js":"18","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js":"19","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js":"20","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js":"21","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GroupService.js":"22","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js":"23","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js":"24","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js":"25","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js":"26","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js":"27","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js":"28","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js":"29","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js":"30","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js":"31","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js":"32","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js":"33","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js":"34","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js":"35","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js":"36","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js":"37","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js":"38","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js":"39","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js":"40","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js":"41","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js":"42"},{"size":1664,"mtime":1618506463362,"results":"43","hashOfConfig":"44"},{"size":375,"mtime":1616782544565,"results":"45","hashOfConfig":"44"},{"size":3487,"mtime":1621345934250,"results":"46","hashOfConfig":"44"},{"size":7000,"mtime":1618506463177,"results":"47","hashOfConfig":"44"},{"size":453,"mtime":1616782544553,"results":"48","hashOfConfig":"44"},{"size":3893,"mtime":1619043543177,"results":"49","hashOfConfig":"44"},{"size":4158,"mtime":1616842370700,"results":"50","hashOfConfig":"44"},{"size":11582,"mtime":1618506463215,"results":"51","hashOfConfig":"44"},{"size":2296,"mtime":1621345934276,"results":"52","hashOfConfig":"44"},{"size":3708,"mtime":1621345934275,"results":"53","hashOfConfig":"44"},{"size":7992,"mtime":1619043543247,"results":"54","hashOfConfig":"44"},{"size":6350,"mtime":1621418414032,"results":"55","hashOfConfig":"44"},{"size":3175,"mtime":1621419416726,"results":"56","hashOfConfig":"44"},{"size":7046,"mtime":1621352439216,"results":"57","hashOfConfig":"44"},{"size":7518,"mtime":1621345934270,"results":"58","hashOfConfig":"44"},{"size":12441,"mtime":1621406318425,"results":"59","hashOfConfig":"44"},{"size":4748,"mtime":1621345934268,"results":"60","hashOfConfig":"44"},{"size":12191,"mtime":1621406467082,"results":"61","hashOfConfig":"44"},{"size":5234,"mtime":1621345934266,"results":"62","hashOfConfig":"44"},{"size":4650,"mtime":1621345934267,"results":"63","hashOfConfig":"44"},{"size":781,"mtime":1619043543240,"results":"64","hashOfConfig":"44"},{"size":440,"mtime":1616782544572,"results":"65","hashOfConfig":"44"},{"size":522,"mtime":1616840429624,"results":"66","hashOfConfig":"44"},{"size":607,"mtime":1619043543298,"results":"67","hashOfConfig":"44"},{"size":593,"mtime":1618506463181,"results":"68","hashOfConfig":"44"},{"size":1137,"mtime":1616782544530,"results":"69","hashOfConfig":"44"},{"size":2341,"mtime":1616782544527,"results":"70","hashOfConfig":"44"},{"size":3719,"mtime":1621345934253,"results":"71","hashOfConfig":"44"},{"size":425,"mtime":1621345934278,"results":"72","hashOfConfig":"44"},{"size":899,"mtime":1621345934277,"results":"73","hashOfConfig":"44"},{"size":2949,"mtime":1621345934269,"results":"74","hashOfConfig":"44"},{"size":787,"mtime":1618506463380,"results":"75","hashOfConfig":"44"},{"size":2553,"mtime":1619043543232,"results":"76","hashOfConfig":"44"},{"size":1643,"mtime":1616782544570,"results":"77","hashOfConfig":"44"},{"size":1576,"mtime":1616782544520,"results":"78","hashOfConfig":"44"},{"size":284,"mtime":1616840482236,"results":"79","hashOfConfig":"44"},{"size":268,"mtime":1616840453924,"results":"80","hashOfConfig":"44"},{"size":308,"mtime":1619043543315,"results":"81","hashOfConfig":"44"},{"size":3055,"mtime":1619043543224,"results":"82","hashOfConfig":"44"},{"size":2394,"mtime":1621345934270,"results":"83","hashOfConfig":"44"},{"size":3973,"mtime":1621353932972,"results":"84","hashOfConfig":"44"},{"size":4405,"mtime":1621345934255,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},"ydvxbn",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"89"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"89"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"89"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"89"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"89"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"89"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"89"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"89"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"89"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"89"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"89"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"89"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"89"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"89"},"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js",["188","189","190","191"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n//import Pusher from 'pusher-js';\r\n//import Reducer from './Redux/reducers/chat_reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n//Pusher.logToConsole = true;\r\n\r\n//useEffect (()=>{\r\n  /* const pusher = new Pusher('18cb37e3146179a6a80e', {\r\n  cluster: 'ap2',\r\n  authEndpoint: 'http://localhost:5000/api/chatapi/pusher/auth'\r\n}); */\r\n/* usher.connection.bind('connected', function () {\r\n  // attach the socket ID to all outgoing Axios requests\r\n  axios.defaults.headers.common['X-Socket-Id'] = pusher.connection.socket_id;\r\n  console.log(\"id:\",pusher.connection.socket_id)\r\n}); */\r\n//},[])\r\n/* var channel = pusher.subscribe('private-my-channel');\r\nchannel.bind('my-event', function(data) {\r\n  console.log(\"in bind\")\r\n  alert(JSON.stringify(data));\r\n  console.log(\"pusher data:\",data)\r\n}); */\r\n\r\n//const myStore = createStore(Reducer, window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                            //window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\n/* ReactDOM.render(\r\n  <Provider\r\n        store={myStore}\r\n        >\r\n        <App />\r\n  </Provider>\r\n    \r\n  ,\r\n  document.getElementById('root')\r\n); */\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["192","193"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js",["194","195","196"],"import './App.css';\r\nimport { Route, Switch,BrowserRouter as Router,Redirect } from \"react-router-dom\";\r\nimport UserDashboard from \"./components/FrontendComponents/components/userDashboard\";\r\nimport SignUp from \"./components/FrontendComponents/components/SignUp\";\r\nimport LogIn from \"./components/FrontendComponents/components/LogIn\";\r\nimport Activate from \"./components/FrontendComponents/components/Activate\";\r\nimport notFound from \"./components/FrontendComponents/components/notFound\";\r\nimport ForgotPassword from \"./components/FrontendComponents/components/forgotPassword\";\r\nimport ResetPassword from \"./components/FrontendComponents/components/resetPassword\";\r\nimport ProfileSetup from \"./components/FrontendComponents/components/profileSetup\";\r\nimport AllContact from \"./components/FrontendComponents/components/AllContacts\";\r\nimport AllFriendRequest from \"./components/FrontendComponents/components/AllFriendRequest\";\r\nimport AllFriends from \"./components/FrontendComponents/components/AllFriends\";\r\nimport UpdateProfileSetup from \"./components/FrontendComponents/components/updateProfileSetup\";\r\nimport Chat from \"./components/ChatComponents/Chat\";\r\nimport MyChats from \"./components/ChatComponents/AllChats\";\r\nimport Users from \"./components/ChatComponents/Users\";\r\nimport {SocketProvider} from './context/SocketContext';\r\nimport {MyChatsProvider} from './context/MyChatsContext';\r\n//import {SocketContext} from './context/SocketContext';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport {useState, useEffect, useContext } from 'react';\r\n\r\nconst App =() =>{\r\n  const [userId,setId] = useState()\r\n  const [dId,setDid] = useState()\r\n  //const {messageEvent} = useContext(SocketContext);\r\n  \r\n  /* useEffect(()=>{\r\n    messageEvent()\r\n\r\n  },[]) */\r\n  return (\r\n    <div className=\"App\">\r\n    <MyChatsProvider userId={userId}>\r\n    <SocketProvider id={dId} >\r\n    <ToastContainer/>\r\n    <Router>\r\n      <Switch>\r\n            <Route path=\"/\" exact><LogIn onIdSubmit={setId} setId={setDid}/></Route>\r\n            <Route exact path=\"/signup\" component={SignUp} />\r\n            <Route exact path=\"/login\"><LogIn onIdSubmit={setId}  setId={setDid}/></Route>\r\n            <Route exact path=\"/user/activate/:token\" component={Activate} />\r\n            <Route exact path=\"/dashboard/:id\"  component ={UserDashboard} />\r\n            <Route exact path=\"/reset-password/:token\" component={ResetPassword} />\r\n            <Route exact path=\"/forgot-password\" component={ForgotPassword} />\r\n            <Route exact path=\"/profile-setup/:token\" component={ProfileSetup}/>\r\n            <Route exact path=\"/update-my-profile-setup/:id\" component={UpdateProfileSetup}/>\r\n            <Route exact path =\"/all-contacts/:id\" component= {AllContact}/>\r\n            <Route exact path = \"/all-friend-requests/:id\" component ={AllFriendRequest}/>\r\n            <Route exact path =\"/all-my-friends/:id\" component ={AllFriends} />\r\n            <Route exact path=\"/notfound\" component={notFound} />\r\n\r\n            <Route path=\"/chat/:id\" render={(props) => (\r\n              <Chat {...props} key={props.location.key} />\r\n            )} exact>\r\n            </Route>\r\n            <Route path=\"/mychats/:id\" render={(props) => (\r\n              <MyChats {...props} key={props.location.key}/>\r\n            )} exact>\r\n            </Route>\r\n            <Redirect to=\"/notfound\" />  \r\n      </Switch>\r\n      </Router>\r\n    </SocketProvider>\r\n    </MyChatsProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Users.js",["197","198","199","200","201","202","203","204","205","206","207"],"import React, { useState, useEffect ,useRef,useContext} from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n//import Avatar from \"@material-ui/core/Avatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import socketIOClient from \"socket.io-client\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport userservice from \"../../services/UserService\";\r\nimport groupservice from \"../../services/GroupService\";\r\nimport { isAuthenticated, logout } from \"../FrontendComponents/clientStorages/auth\";\r\nimport {SocketContext} from '../../context/SocketContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./users.css\"\r\n//import commonUtilites from \"../Utilities/common\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n    \r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(0, 3, 0, 1),\r\n  },\r\n  listText:{\r\n    fontSize : '1.3rem',\r\n    fontFamily : 'Roboto'\r\n  }\r\n  ,listText1:{\r\n    fontSize : '1rem',\r\n    fontFamily : 'Roboto',\r\n    color : 'gray'\r\n  }\r\n  , listBtn:{\r\n    backgroundColor: 'rgb(0, 172, 193)',\r\n    color : 'white',\r\n    fontSize : '1rem'\r\n  }\r\n}));\r\n\r\nconst Users = (props) => {\r\n  const classes = useStyles();\r\n  const [users, setUsers] = useState([]);\r\n  const [newUser, setNewUser] = useState(null);\r\n  const [show, setShow] = React.useState(false)\r\n  let count = useRef(0);\r\n  let userId = useRef(\"\");\r\n  let name = useRef(\"\")\r\n  let userslist = useRef([])\r\n  let history = useHistory();\r\n  let recipients = []\r\n  const clientSocket = useContext(SocketContext);\r\n  //const getUsers = useGetUsers();\r\n  const getData = () => {\r\n    userId.current= localStorage.getItem(\"userId\")\r\n    console.log(userId.current)\r\n    userservice.getUsers()\r\n   .then((data) => {\r\n        userslist.current = data\r\n        userslist.current = userslist.current.filter((u)=>{\r\n          return u.email !== userId.current\r\n        })\r\n        setUsers(userslist.current ); \r\n        console.log(\"contacts\",users)\r\n  })\r\n   .catch((err) => console.log(\"This is err\"+ err));\r\n}\r\n  useEffect(()=>{\r\n    getData()\r\n    console.log(clientSocket)\r\n    if(clientSocket!==undefined)\r\n      clientSocket.emit(\"adduser\",{id:clientSocket.id, name: userId.current})\r\n  },[]);\r\n\r\n    const userClickHandler = (u) =>{\r\n        let email = u.email\r\n        let fname= u.firstName\r\n        let lname = u.lastName\r\n        let lang = u.langPreference\r\n        let profileUrl = u.profileImg\r\n        let x = fname+' '+lname\r\n        localStorage.setItem(\"recName\",x)\r\n        localStorage.setItem(\"recLang\",lang)\r\n        localStorage.setItem(\"profileUrl\",profileUrl)\r\n        history.push('/chat/'+email); \r\n        \r\n  }\r\n\r\n  const viewButtonHandler = ()=>{\r\n    history.push('/mychats/'); \r\n  }\r\n    const showButtons = ()=>{\r\n      setShow(true)\r\n    }\r\n\r\n    const addGroupMember = (e)=>{\r\n          console.log(\"target\",e)\r\n          count.current = count.current+1\r\n          console.log(\"count\",count)\r\n        recipients.push(e)\r\n        console.log(\"Rec\",recipients)\r\n    }\r\n\r\n    const createGroup = () =>{\r\n      if(recipients.length > 1){\r\n        let groupMembers = recipients\r\n        let groupName = name.current\r\n        let groupId = uuidv4();\r\n        let createdBy = userId.current\r\n        groupservice.createGroup({groupName,groupId,createdBy,groupMembers})\r\n              .then((data)=>{\r\n                  console.log(\"Created successfully\",data);\r\n                  history.push('/groupchat'+'/'+groupId)\r\n                  //getData();\r\n                })\r\n              .catch((err)=>{console.log(\"Some Err\")})\r\n        //history.push('/chat/'+address);\r\n        //history.push('/groupchat'+'/'+name.current+'/'+address)\r\n      }\r\n    }\r\n\r\n    const nameHandler = (e) =>{\r\n      name.current = e.target.value\r\n      console.log(name.current)\r\n    }\r\n    const handleLogOut = (evt) => {\r\n      logout(() => {\r\n        history.push(\"/login\");\r\n      });\r\n    };\r\n\r\n  /* useEffect(() => {\r\n    getUsers().then((res) => setUsers(res));\r\n  }, [newUser]); */\r\n\r\n  /* useEffect(() => {\r\n    const socket = socketIOClient(process.env.REACT_APP_API_URL);\r\n    socket.on(\"users\", (data) => {\r\n      setNewUser(data);\r\n    });\r\n  }, []); */\r\n\r\n  return (\r\n    <div>\r\n     {/*<Button onClick={showButtons} variant=\"contained\" color=\"primary\">\r\n        Create Group\r\n      </Button>*/}\r\n      <button\r\n        className=\"btn text-decoration-none btn-link   pl-0\"\r\n        style={{textDecoration:\"none\"}}\r\n        onClick={handleLogOut}\r\n      >\r\n        <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i> Logout\r\n      </button>\r\n      <h3 className=\" text-center\">Contacts</h3>\r\n      <List className={classes.list}>\r\n      {users && (\r\n        <React.Fragment>\r\n          {users.map((u) => (\r\n            <div>\r\n            <ListItem\r\n              className={classes.listItem}\r\n              button\r\n            >\r\n             <ListItemAvatar>\r\n             <Avatar className={classes.globe}>\r\n                <FaceIcon/>\r\n              </Avatar>\r\n            </ListItemAvatar> \r\n              <ListItemText onClick={() => userClickHandler(u)}>\r\n                <Typography className={classes.listText}>{u.firstName}&nbsp;{u.lastName}</Typography>\r\n                <Typography className={classes.listText1}>{u.email}</Typography>\r\n              </ListItemText>\r\n              {/* show ? \r\n              <Button onClick = {() => addGroupMember(u.email)} variant=\"contained\" color=\"primary\">\r\n                Add\r\n              </Button>\r\n              : null */}\r\n              <Button variant=\"contained\" className={classes.listBtn}\r\n              onClick={viewButtonHandler}>View</Button>\r\n            </ListItem>\r\n            <Divider/> \r\n            \r\n            </div>\r\n          ))}\r\n          {/* show ? \r\n              <div>\r\n                <TextField onChange = {nameHandler} id=\"standard-basic\" label=\"Group Name\" />\r\n                <Button onClick = {createGroup} variant=\"contained\" color=\"primary\">\r\n                  Create\r\n                </Button>\r\n                </div>\r\n          : null*/ }\r\n          \r\n        </React.Fragment>\r\n      )}\r\n    </List>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Users;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js",["208","209"],"import React, { useState, useEffect } from 'react';\r\nimport accountService from \"../../../services/accountService\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { grey,green, cyan,red} from '@material-ui/core/colors';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport PageTitle from \"./pageTitle\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst Activate = ({ match }) => {\r\n let token1 = match.params.token;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    token: '',\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n  });\r\n   const { firstName,lastName, token, errorMessage, successMsg} = formData;\r\n   let history = useHistory()\r\n  useEffect(() => {\r\n    let token = match.params.token;\r\n    let { firstName } = jwt.decode(token);\r\n    let { lastName } = jwt.decode(token);\r\n    if (token) {\r\n      setFormData({ ...formData, firstName,lastName,  token });  \r\n      accountService.accountActivation({token})\r\n      .then(response => {\r\n        setFormData({\r\n          ...formData,\r\n          errorMessage: false,\r\n          successMsg: response.successMessage,\r\n          firstName: response.firstName,\r\n          lastName: response.lastName,\r\n        });\r\n      })\r\n      .catch(err => {\r\n      setFormData({\r\n          ...formData,\r\n          successMsg: false,\r\n         errorMessage: err.response.data.errorMessage,\r\n          firstName: err.response.data.firstName,\r\n          lastName: err.response.data.lastName,\r\n        });\r\n      });\r\n    }}, [match.params]);\r\n     \r\n  \r\n  const ActivationSuccess=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName +\" \"+lastName}</strong></p>\r\n        <div>  <CheckCircleRoundedIcon \r\n              style = {{ color: green[600],paddingTop:\"0.3rem\" }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > Your account has been successfully verified. Click below to create your profile</span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n              variant=\"contained\"\r\n              className= \"loginbtn\"\r\n              onClick={event =>  history.push('/profile-setup/'+token1)}\r\n             \r\n          >\r\n            Create Profile\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n   const ActivationFailure=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName+\" \"+lastName}</strong></p>\r\n        <div>  <CancelRoundedIcon \r\n              style = {{ color: red[600]  }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > <strong>{errorMessage}</strong> </span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n            variant=\"contained\"\r\n             className= \"loginbtn\"\r\n            onClick={event =>  history.push('/signup')}\r\n             \r\n          >\r\n               Try  Again   \r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n  return (\r\n  <div>\r\n        <PageTitle name= {\"Activation\"}/>\r\n       {errorMessage && ( ActivationFailure())}\r\n       {successMsg && (ActivationSuccess())}\r\n  </div>)\r\n      }\r\nexport default Activate;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js",["210","211","212","213","214"],"import React ,{createContext,useEffect,useState,useRef} from 'react'\r\nimport io from \"socket.io-client\";\r\nimport { toast } from 'react-toastify';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const SocketContext = createContext();\r\nexport function SocketProvider({id,children}) {\r\n  \r\n  const [clientSocket, setSocket] = useState()\r\n  let count=0;\r\n  let roomId = useRef()\r\n  \r\n  useEffect(() => {\r\n    \r\n    const socket = io(\r\n      'http://localhost:5000',\r\n    )\r\n    setSocket(socket)\r\n    return () => socket.close()\r\n    /* clientSocket.current = io(\"http://127.0.0.1:5000\");\r\n    clientSocket.current.on('connect' , () => {\r\n      console.log(clientSocket.current.id);\r\n    }); */\r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    roomId.current= '/'+id\r\n    console.log(roomId)\r\n  },[])\r\n\r\n  const newMessageEvent = ()=>{\r\n    count=0;\r\n    if(clientSocket){\r\n      clientSocket.on(\"newMessage\", (payload) => {\r\n      <button onClick={()=>console.log(\"clicked\")}>{toast(payload.RecipientName +':'+\r\n        payload.payload.messageBody, {\r\n          onOpen: () => console.log('Called when I open'),\r\n          position: toast.POSITION.TOP_LEFT,\r\n          toastId: '007',\r\n          transition: Bounce\r\n        })}\r\n      </button>\r\n      //count=count+1\r\n      console.log(\"new message\",payload)\r\n      })\r\n    }\r\n    else{\r\n      console.log(\"no socket\")\r\n    }\r\n    \r\n  //return () => {clientSocket.removeAllListeners(\"newMessage\");}\r\n  }\r\n\r\n  /* useEffect(()=>{\r\n    newMessageEvent()\r\n    console.log(\"2\")\r\n  },[])\r\n */\r\n  const roomJoin = (did) =>{\r\n    //did = did || roomId.current\r\n    did = '/'+did\r\n    if(clientSocket){\r\n      clientSocket.emit(\r\n        \"NotificationRoom\",\r\n        { myNotificationRoom : did},\r\n        ({error,room}) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\n  let value={\r\n    clientSocket : clientSocket,\r\n    setSocket : setSocket,\r\n    messageEvent : newMessageEvent,\r\n    roomJoin: roomJoin\r\n  }\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n\r\n  \r\n}\r\n\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js",["215","216","217","218"],"import React ,{createContext, useRef,useEffect,useState} from 'react'\r\nimport chatservice from \"../services/ChatService\"\r\nimport userservice from \"../services/UserService\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const MyChatsContext = createContext();\r\nexport function MyChatsProvider({userId,children}) {\r\n    const [chatRecipients,setChatRecipients] = useState([])\r\n    let recData = []\r\n    let recMsgs = []\r\n    let msgType = []\r\n    let recName = []\r\n    let recId=[]\r\n    let imgUrl =[]\r\n    useEffect(()=>{\r\n        //userId.current = localStorage.getItem(\"userId\")\r\n        if(userId !== undefined){\r\n        getRecData(userId,undefined)\r\n        //console.log(userId)\r\n        }\r\n        console.log(\"undefined\")\r\n        \r\n    },[userId])\r\n\r\n    const getRecData = (uId)=>{\r\n         recData = []; recName =[]; recMsgs = []; msgType = []; imgUrl=[]; recId=[]\r\n        //console.log(\"in getdata\")\r\n        chatservice.getChatRecipients(uId).then((data)=>{    \r\n            if(data.length>0){\r\n                //console.log(\"data getchat\",data)\r\n                /* dataFromDb.push(data)\r\n                console.log(\"data from db getchat\",dataFromDb) */\r\n                data.map((rec) =>{\r\n                    //console.log('single rec',rec)\r\n                    return recData.push(rec)\r\n                })\r\n                console.log(\"rec data\",recData)\r\n                recData = Array.from(new Set(recData));\r\n                console.log(\"rec data updated\",recData)\r\n                setChatRecipients((r)=>{\r\n                    r.Rname=recData\r\n                    //console.log(chatRecipients)\r\n                    return r\r\n                })\r\n                chatRecipients.Rname.map((r)=>{\r\n                    //console.log(\"r\",r)\r\n                    chatservice.getLastMsg(uId, r)\r\n                    .then((data1)=>{\r\n                        //console.log(\"data\",data1.type)\r\n                        recMsgs.push(data1.lastMsg)\r\n                        msgType.push(data1.type)\r\n                        //return {recMsgs,msgType}\r\n                    })\r\n                    .catch((err)=>console.log(err))\r\n\r\n                    userservice.getUserByEmail(r).then((data2)=>{\r\n                        //console.log(\"data 2\",data2)\r\n                        recId.push(data2[0]._id)\r\n                        imgUrl.push(data2[0].profileImg)\r\n                        recName.push(data2[0].firstName+' '+data2[0].lastName)\r\n                        setChatRecipients((r)=>{\r\n                            r.lastMsg = recMsgs\r\n                            r.msgType = msgType\r\n                            r.recId = recId\r\n                            r.imgUrl= imgUrl\r\n                            r.name = recName\r\n                            console.log(chatRecipients)\r\n                            return r\r\n                        })\r\n                       /*  if(cb === undefined)\r\n                            console.log(\"do nothing\")\r\n                        else\r\n                            cb() */\r\n                    }).catch((err)=>console.log(err))\r\n                })\r\n                \r\n            }\r\n            else\r\n                console.log(\"no data\")\r\n            \r\n            })\r\n            .catch((err)=>console.log(err))\r\n            return chatRecipients\r\n    }\r\n\r\n    /* useEffect(()=>{\r\n        \r\n    },[chatRecipients]) */\r\n    //getRecData()\r\n  const value = {\r\n      chatRecipients : chatRecipients,\r\n      getRecData : getRecData,\r\n      setRecipients : setChatRecipients,\r\n      /* setuuIdFunc : setuuId,\r\n      uuId : uuId */\r\n  }\r\n  return (\r\n    <MyChatsContext.Provider value={value}>\r\n      {children}\r\n    </MyChatsContext.Provider>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js",["219"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport accountService from \"../../../services/accountService\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n import { grey, cyan,indigo} from '@material-ui/core/colors';\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n const useStyles = makeStyles((theme) => ({\r\n  textfield: {\r\n     margin: theme.spacing(1),\r\n  },\r\n   margin:{\r\n     marginTop: \"1.2rem\"\r\n   } \r\n}));\r\n\r\nconst ResetPassword = ({ match }) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [values, setValues] = useState({\r\n    token: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  \r\n   const {\r\n    token,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n\r\n    useEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n    const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   const ResetPasswordBtn = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)\r\n    ) {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n    } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Passwords do not match\" });\r\n    } else {\r\n  \r\n     \r\n      setValues({ ...values, loading: true });\r\n     accountService.resetPassword( { newPassword: password, resetPasswordLink: token})\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n             password: \"\",\r\n            confirmPassword: \"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n     \r\n  const ResetPasswordForm=()=>(\r\n      \r\n    <Grid container >\r\n      <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper style={{padding: '30px 50px'}} >\r\n          <Button  \r\n            className= \"loginbtn\"\r\n            href=\"https://mail.google.com/mail/u/0/#inbox\"\r\n            color=\"primary\"\r\n           style={{marginBottom:\"2rem\" ,paddingLeft:\"0rem\",color:indigo[800]  }}\r\n          >\r\n           <ArrowBackIcon style={{fontWeight:\"bold\",marginRight:\"0.3rem\"}}/> Go Back\r\n          </Button>\r\n             <FormControl className={clsx( classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> New Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    \r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={ResetPasswordBtn}\r\n          >\r\n            Reset Password \r\n          </Button>\r\n          {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n           </Paper>\r\n        </Grid>\r\n     <Grid item xs={1} sm={3} md={4}></Grid>\r\n    </Grid>\r\n       \r\n  );   \r\n  return (\r\n  <div>\r\n        {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <PageTitle name= {\"Reset Password\"}/>\r\n      {ResetPasswordForm()}\r\n      \r\n  </div>)\r\n      }\r\nexport default ResetPassword;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js",["220","221","222","223","224"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js",["225","226","227","228","229","230"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js",["231","232","233","234","235","236","237"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport { MyChatsContext } from \"../../context/MyChatsContext\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\nimport SingleChat from './SingleChat'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PageTitle from \"../FrontendComponents/components/pageTitle\";\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\n\r\n\r\nimport \"./chat.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  \r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  }\r\n}));\r\nconst AllChats = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const {clientSocket} = useContext(SocketContext);\r\n  let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n  /* const [email,setEmail]= useState([])\r\n  const [lastMsg,setlastMsg]= useState([])\r\n  const [id,setId]= useState([])\r\n  const [url,setUrl]= useState([])\r\n  const [name,setName]= useState([]) */\r\n  let emails = useRef([])\r\n  //let usersData = useRef([])\r\n  const [usersData, setData] = useState([])\r\n  const [lastMsg, setLastMsg] = useState({msgs: [], msgId:[], emails:[], types:[]})\r\n  //const [recipients, setRecipients] = useState([])\r\n  let roomId = useRef()\r\n  let count = useRef(0);\r\n  let notPresent = useRef(0)\r\n  roomId.current = 'mychats/'+props.match.params.id\r\n  let recData = [];\r\n  let recMsgs = [];\r\n  let dummy=[]  \r\n\r\n  const getRecData = (uId) => {\r\n    chatservice\r\n      .getChatRecipients(uId)\r\n      .then((data) =>{\r\n        if (data.length > 0) {\r\n          console.log(\"emails before sorting\", data)\r\n          emails.current = data.sort()\r\n          console.log(\"emails after sorting\", emails.current)\r\n          /* setRecipients((r)=>{\r\n            r.email = emails.current\r\n            //console.log(\"r emails\", r)\r\n          }) */\r\n          //console.log(\"data\",emails)\r\n          userservice\r\n          .getUserByEmail({userArray : emails.current}).then((datafromdb)=> {\r\n            recData=datafromdb\r\n            console.log(\"recdata\",recData)\r\n            setData((d)=>{\r\n              d = recData\r\n              return d\r\n            })\r\n          })\r\n         // let index = 0\r\n    emails.current.forEach((r,index)=>{\r\n      \r\n      chatservice.getLastMsg(uId, r)\r\n      .then((data1)=>{\r\n        console.log(\"data1\",data1)\r\n        \r\n          setLastMsg((msg) => {\r\n            console.log(\"msg\",msg)\r\n            if (msg.msgs.length>=1 && msg.emails.length>=1 && msg.types.length>=1) {\r\n              let newMsg = [...msg.msgs];\r\n              let newR = [...msg.emails]\r\n              let newT = [...msg.types]\r\n              let id = [...msg.msgId]\r\n              newMsg = [...newMsg, data1.lastMsg];\r\n              newR = [...newR, r]\r\n              newT = [...newT, data1.type]\r\n              id = [...id,data1.msgId]\r\n              console.log(\"newMsg: \",newR)\r\n              return { ...msg, msgs: newMsg, msgId:id, emails: newR, types: newT };\r\n            } else {\r\n              console.log(\"first: \",data1.lastMsg,r)\r\n              return { msgs: [data1.lastMsg], msgId: [data1.msgId], emails: [r], types:[data1.type] };\r\n\r\n            }\r\n          });\r\n       }).catch((err)=>console.log(err))\r\n       \r\n    })\r\n         \r\n          //setLastMsg(recMsgs)\r\n          \r\n          //console.log(\"recipients\",recipients) \r\n          \r\n        } else console.log(\"no data\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    console.log(\"in useEffect 1\")\r\n    getRecData(uId); \r\n    console.log(\"usersData 1\",usersData)\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    console.log(\"in useEffect 2\")\r\n    \r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(clientSocket){\r\n      clientSocket.emit(\r\n        \"myChatsRoom\",\r\n        { myChatsRoom : roomId.current},\r\n        ({error,room}) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n\r\n      clientSocket.on(\"newRecipient\", (payload) => {\r\n        console.log(\"new rec\",payload.message)\r\n        let index;\r\n      \r\n      if(usersData.length !==0 && lastMsg.msgs.length !==0 ){\r\n        console.log(\"check:\",usersData)\r\n        count.current = 0\r\n        /* present.current =0\r\n        notPresent.current =0 */\r\n        usersData.forEach((u,indx) => {\r\n          console.log(\"in map\") \r\n        console.log(\"emails from map\",payload.message.from, u.email)\r\n        if(payload.message.from === u.email){\r\n          \r\n          index = indx\r\n          console.log(\"index: \",index)\r\n          count.current = count.current+1\r\n          console.log(\"count: \",count.current)\r\n        }\r\n        else{\r\n          //count.current.current = notPresent.current + 1 ;\r\n          console.log(\"false\",count.current)\r\n        }\r\n        \r\n        })\r\n        if(count.current !==0){\r\n          console.log(\"in setRecArray\",count.current)\r\n            setRecArray(index,payload.message.messageBody,payload.message.type)\r\n        }\r\n        else if(count.current === 0){\r\n            setNewRecipient(payload.message.from,payload.message.messageBody,payload.userImg)\r\n            console.log(\"in setNewArray\",count.current)\r\n        }\r\n        else\r\n        console.log(\"nothing \",count.current )\r\n       }\r\n      else{\r\n        console.log(\"no chat\")\r\n        console.log(\"usersData 1\",usersData)\r\n      }\r\n       })\r\n    }\r\n\r\n  },[usersData,lastMsg.msgs])\r\n\r\n  const setRecArray = (index,msg,type)=>{\r\n    //if(lastMsg)\r\n    let items = [...lastMsg.msgs];\r\n      console.log(\"items before change\",items,lastMsg.msgs)\r\n      items[index] = msg;\r\n      console.log(\"items\",items)\r\n    setLastMsg((m)=>{\r\n      //if(lastMsg.msgs.length !== 0){\r\n      \r\n      //console.log(\"items\",items)\r\n      //console.log(\"users Msgs\",m)\r\n      return {...m,msgs : items}\r\n      //}\r\n    });\r\n\r\n  }\r\n\r\n  const setNewRecipient = (rec,msg,type)=> {\r\n    /* setRecipients((r)=>{\r\n      let newR = [...r.Rname]\r\n      newR = [...newR,rec]\r\n      let newMsg = [...r.lastMsg]\r\n      newMsg = [...newMsg,msg]\r\n      console.log(newR,newMsg)\r\n      return {...r,Rname:newR,lastMsg:newMsg}\r\n    }); */\r\n    /* setData((d)=>{\r\n      let newR = [...d.email]\r\n      newR = [...newR,rec]\r\n      return {...d,Rname:newR,lastMsg:newMsg}\r\n    }) */\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <PageTitle name={\"My Chats\"} />\r\n      \r\n        {console.log(\"in return\")}\r\n        {usersData.length !== 0? (\r\n          <Paper md={8} xs={4} className={classes.mygrid}>\r\n              <SingleChat recipients = {usersData} lastMsg={lastMsg}/>\r\n          </Paper>\r\n        ) : (\r\n          <h5 style={{ textAlign: \"center\" }}>No Chats Yet!</h5>\r\n        )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default AllChats;\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js",["238"],"import React, { useState, useEffect ,useContext} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from 'clsx';\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  FormControl,\r\n  Input,\r\n  InputAdornment,\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport { login } from \"../api/auth\";\r\nimport PageTitle from \"./pageTitle\";\r\n//import { toast } from \"react-toastify\";\r\n\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n//import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { authentication, isAuthenticated } from \"../clientStorages/auth\";\r\n \r\nconst useStyles = makeStyles((theme) => ({\r\n   textField: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  margin:{\r\n    marginBottom: theme.spacing(2),\r\n    \r\n  }\r\n}));\r\nconst LogIn = ({onIdSubmit,setId}) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const {messageEvent} = useContext(SocketContext);\r\n  useEffect(() => {\r\n    if (isAuthenticated() && isAuthenticated().role === 1)\r\n      history.push(\"/admin/dashboard\");\r\n    else if (isAuthenticated() && isAuthenticated().role === 0)\r\n      history.push(\"/user/dashboard\");\r\n     \r\n      \r\n  }, [history]);\r\n  window.onload= ()=>{\r\n    //messageEvent()\r\n    console.log(\"in load\")\r\n  }\r\n\r\n  useEffect(()=>{\r\n    //messageEvent()\r\n  },[])\r\n  const [values, setValues] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    errorMessage: \"\",\r\n    showPassword: false,\r\n    loading: false,\r\n  });\r\n  const { email, password, errorMessage, loading } = values;\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n   const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleTextChange = (evt) => {\r\n    setValues({\r\n      ...values,\r\n      [evt.target.name]: evt.target.value,\r\n      errorMessage: \"\",\r\n    });\r\n  };\r\n  const Register = (event) => {\r\n    event.preventDefault();\r\n    if (isEmpty(email) || isEmpty(password)) {\r\n      setValues({ ...values, errorMessage: \"Both fields are required\" });\r\n    } else if (!isEmail(email)) {\r\n      setValues({ ...values, errorMessage: \"Invalid Email\" });\r\n    } else {\r\n      setValues({ ...values, loading: true });\r\n      const { email, password } = values;\r\n      const data = { email, password };\r\n\r\n      login(data)\r\n        .then((response) => {\r\n          authentication(response.data.token, response.data.user);\r\n          console.log(response)\r\n          if (isAuthenticated() && isAuthenticated().role === 1)\r\n            history.push(\"/dashboard/\"+isAuthenticated()._id);\r\n          else {\r\n        history.push(\"/dashboard/\"+isAuthenticated()._id);};\r\n          setValues({ ...values, loading: false });\r\n          console.log(isAuthenticated()._id)\r\n          setId(isAuthenticated()._id)\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n            password:\"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n        //var id \r\n        onIdSubmit(email)\r\n        \r\n        console.log(\"email\",email)\r\n        //generateUU(uuidv4())\r\n    }\r\n  };\r\n  \r\n  const LogInForm = () => (\r\n    <div className=\"Login-container\">\r\n      <Grid container>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm={6} md={4}>\r\n           <Paper style={{padding: '30px 50px'}} > \r\n            <Grid container style={{textAlign:\"center\"}}>\r\n          <Grid item xs={6} >\r\n            <Link className=\"active-header\"  to=\"/login\">Sign In</Link>      \r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Link className=\"header\" to=\"/signup\">Sign Up</Link>\r\n          </Grid>\r\n\r\n        </Grid>\r\n           <TextField\r\n           className={classes.textField}\r\n           style={{marginTop:\"2rem\"}}\r\n            label={\r\n              <div> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Email Address </Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\"}}>*</Typography>\r\n                  </div>\r\n                  }\r\n            id=\"email-field\"\r\n            name=\"email\"\r\n            value={values.email}\r\n            fullWidth\r\n            onChange={handleTextChange}\r\n             InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n             <EmailIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n          />\r\n          \r\n         <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\"}}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n         </FormControl>\r\n            <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginBottom: \"1.2rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={Register}\r\n          >\r\n            Sign in\r\n          </Button>\r\n           <Link to=\"/forgot-password\" style={{textDecoration:\"none\",marginLeft:\"1rem auto\"}}  >Forgot Password?</Link>\r\n   </Paper>\r\n         </Grid>\r\n        <Grid item xs={1} sm={3} md={4}></Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      {loading && <LinearBuffer />}\r\n     \r\n             <PageTitle name= {\"TalkSee\"}/>\r\n      {LogInForm()}\r\n      \r\n     \r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n       \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js",["239","240","241"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js",["242","243","244","245","246","247"],"import React, { useEffect,useRef,useContext,useState } from \"react\";\r\nimport SingleFriend from \"./SingleFriend\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport {MyChatsContext} from '../../../context/MyChatsContext';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport io from \"socket.io-client\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst AllFriends = (props) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friends, setFriends] =React.useState([]);\r\n     let history = useHistory()\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     const {clientSocket, setSocket,roomJoin, messageEvent} =  useContext(SocketContext);\r\n     const {chatRecipients} = useContext(MyChatsContext);\r\n     let userEmail = useRef()\r\n     userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n\r\n     window.onload = () => {\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getAllMyFriends = () => \r\n     {\r\n       friendService.getAllFriends(myId)\r\n        .then((data)=>{\r\n         setFriends(data);})\r\n      .catch((err=>{console.log(err)}))\r\n   \r\n     }\r\n    useEffect(()=>{\r\n\r\n      getAllMyFriends()\r\n      \r\n    }, []);\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n     useEffect(()=>{\r\n      //messageEvent()\r\n      \r\n     },[])\r\n\r\n    useEffect(()=>{\r\n      /* if(clientSocket!==null){\r\n        console.log(props.clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:props.clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }  */\r\n    },[])\r\n\r\n     return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"My Friends\"}/>\r\n       <Grid container   style={{display:\"flex\" ,marginTop:\"1.8rem\",justifyContent:\"center\"}}>\r\n          <Grid item xs ={1} md={5}> </Grid>\r\n          <Grid item xs ={10} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search By Name...\"\r\n                variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: grey[600] ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              <Grid item xs ={1} md={4}> </Grid>\r\n            </Grid>\r\n          \r\n   \r\n     {\r\n      friends.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Found</div>) \r\n        :\r\n        (\r\n        <Grid container   style={{marginTop:\"3rem\", display :\"flex\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n          {\r\n          friends.filter((friend)=>{\r\n             if(searchTerm == \"\") return friend\r\n             else if (friend.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friend\r\n           }).map((friend, index) => (\r\n               <SingleFriend key={index} friend={friend} onRemove={getAllMyFriends} /> )\r\n          )}\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         )\r\n         \r\n      }\r\n       <Grid container   style={{display:\"flex\" ,marginBottom:\"2rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n      \r\n <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n  \r\n      \r\n \r\n    </div> );\r\n\r\n}\r\nexport default AllFriends;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js",["248","249","250","251","252","253","254"],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js",["255","256","257","258"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleContact from \"./SingleContact\";\r\nimport contactService from \"../../../services/contactService\";\r\nimport { Button, Grid ,InputAdornment, TextField} from \"@material-ui/core\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport Header from \"./Header\";\r\nimport { grey } from '@material-ui/core/colors';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst AllContact = ({match}) => {\r\n    const myId=isAuthenticated()._id;\r\n    let userEmail = isAuthenticated().email;\r\n    let history = useHistory()\r\n     const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n    const [contacts, setContacts] = React.useState([]);\r\n    let roomId = useRef()\r\n    let clientSocket1 = useRef()\r\n    roomId.current = '/'+match.params.id\r\n    const {setSocket,roomJoin,messageEvent} = useContext(SocketContext);\r\n\r\n    window.onload = () => {\r\n      messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n    const getData = () => {\r\n   friendService.getSentFriendRequest(myId)\r\n   .then((data)=>{\r\n      localStorage.setItem(\"user\",JSON.stringify(data));})\r\n   .catch((err=>{console.log(err)}))\r\n   }\r\n     \r\n  const getSingleContact = () => {\r\n    contactService.getSingleContact(myId)\r\n    .then((data) => { setContacts(data);})\r\n    .catch((err) => {console.log(err);});\r\n  };\r\n\r\n   useEffect(()=> {\r\n     getData();\r\n     getSingleContact();\r\n }, []);\r\n\r\n   useEffect(()=>{\r\n    //roomJoin(myId)\r\n    //messageEvent()\r\n   },[])\r\n    \r\n   \r\n    return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"Add Friend\"}/>\r\n      <Grid container   style={{display:\"flex\" ,marginTop:\"1.8rem\",justifyContent:\"center\"}}>\r\n          <Grid item xs ={1} md={5}> </Grid>\r\n          <Grid item xs ={10} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search By Name...\"\r\n                variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: grey[600] ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              <Grid item xs ={1} md={4}> </Grid>\r\n            </Grid>\r\n          \r\n         \r\n    \r\n      {\r\n      contacts.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No User Found</div>) \r\n        :(\r\n            <Grid container  style={{marginTop:\"3rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n     \r\n           { contacts.filter((contact)=>{\r\n             if(searchTerm == \"\") return contact\r\n             else if (contact.firstName.toLowerCase().startsWith(searchTerm.toLowerCase()) || contact.lastName.toLowerCase().startsWith(searchTerm.toLowerCase()) )\r\n                return contact\r\n           }).map((contact, index) => {\r\n              return contact._id === myId ? \r\n              <div></div>\r\n                 /* style= {{textAlign: \"center\",padding: \"4rem\"}}>\r\n               Hey <span style ={{fontWeight:\"bold\"}}> {contact.firstName + \" \" + contact.lastName}</span> , All Users are your Friends <Link style ={{ fontWeight:\"normal\"}} to=\"/all-my-friends\" >Click here</Link>\r\n              </div> */\r\n            : <SingleContact key={index} contact={contact}/>\r\n            } )\r\n          }\r\n           </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         \r\n         \r\n        )\r\n          }\r\n        \r\n        \r\n      )\r\n          <Grid container   style={{display:\"flex\" ,marginBottom:\"2rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n       <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"right\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-friend-requests/'+myId)}> My Friend Requests</Button>\r\n        \r\n        <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n      \r\n    </div> );\r\n}\r\n \r\nexport default AllContact;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js",["259","260","261"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleFriendRequest from \"./SingleFriendRequest\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport io from \"socket.io-client\";\r\n \r\nconst AllFriendRequest = ({match}) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friendreqs, setFrndRequest] =React.useState([]);\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     let userEmail = isAuthenticated().email\r\n     const {setSocket,roomJoin,messageEvent} = useContext(SocketContext);\r\n     let roomId = useRef()\r\n     roomId.current = '/'+match.params.id\r\n     let history = useHistory()\r\n\r\n     window.onload = () => {\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getFriendRequest = () => \r\n     {\r\n      friendService.getFriendRequest(myId).then((data)=>{\r\n                setFrndRequest(data)})\r\n            .catch((err=>{console.log(err)}))\r\n     }\r\n    useEffect(getFriendRequest , []);\r\n\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n   /*  useEffect(()=>{\r\n      if(clientSocket){\r\n        clientSocket.emit(\r\n          \"myChatsRoom\",\r\n          { myChatsRoom : roomId.current},\r\n          ({error,room}) => {\r\n            if (!error) {\r\n              console.log(\"joined room with id\", room);\r\n            } else {\r\n              console.log(\"error joining room\", error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n     },[]) */\r\n\r\n     return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"Friend Requests\"}/>\r\n      <Grid container   style={{display:\"flex\" ,marginTop:\"1.8rem\",justifyContent:\"center\"}}>\r\n          <Grid item xs ={1} md={5}> </Grid>\r\n          <Grid item xs ={10} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search By Name...\"\r\n                variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: grey[600] ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              <Grid item xs ={1} md={4}> </Grid>\r\n            </Grid>\r\n          \r\n  \r\n      {\r\n      friendreqs.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Request</div>) \r\n        :\r\n        (\r\n        <Grid container   style={{marginTop:\"3rem\" }}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n          {\r\n          friendreqs.filter((friendreq)=>{\r\n             if(searchTerm == \"\") return friendreq\r\n             else if (friendreq.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friendreq\r\n           }).map((friendreq, index) => (\r\n               <SingleFriendRequest key={index} friendreq={friendreq} onAcceptReject={getFriendRequest}/> )\r\n          )}\r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         )\r\n         \r\n      }\r\n       <Grid container   style={{display:\"flex\" ,marginBottom:\"2rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n      \r\n <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-contacts/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n    </div> );\r\n\r\n}\r\nexport default AllFriendRequest;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GroupService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js",["262","263"],"import axios from \"axios\";\r\naxios.defaults.headers.common[\"x-auth-token\"] =localStorage.getItem(\"token\");\r\nexport const signup = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/signup\", data);\r\n  return response;\r\n};\r\nexport const login = async (data) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await axios.post(\"http://localhost:5000/api/users/login\", data);\r\n  return response;\r\n};\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js",["264","265","266","267"],"import TypeMessage from \"./TypeMessage\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./chat.css\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport Button from '@material-ui/core/Button';\r\nimport chatservice from \"../../services/ChatService\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nexport default function RenderChat(props) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const options = [\r\n    'Search',\r\n    'Delete'\r\n  ];\r\n\r\n  \r\n  //console.log(\"props\",props.msgsToDel)\r\n  const deleteChat = ()=>{\r\n    if(props.msgsToDel.msgs !== undefined){\r\n    console.log(\"props\",props.msgsToDel.msgs)\r\n    props.msgsToDel.msgs.map((msg) => {\r\n      //console.log(msg._id)\r\n      chatservice.deleteMessage(msg._id).then((res)=>console.log(\"response: \",res))\r\n      .catch((err)=>console.log(err))\r\n    })\r\n    props.getData()\r\n  }\r\n  else{\r\n    toast.error(\"Please select a message to delete\",{\r\n          position: toast.POSITION.TOP_LEFT,\r\n        })\r\n    //console.log(\"props\", props.msgsToDel)\r\n  }\r\n  }\r\n  \r\n  \r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (option) => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const itemClickHandler= (option)=>{\r\n    console.log(option)\r\n    props.setDel(!props.isDel)\r\n  }\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <div className='singleChatContainer'>\r\n      \r\n        <div className='mesgs'>\r\n          <div className='msg_history'>\r\n            <div className='profilediv'>\r\n              <img\r\n                className='profile'\r\n                src={props.recipientInfo.url}\r\n                alt='dp'\r\n              />\r\n              <span className='recName'>{props.recipientInfo.name}</span>\r\n              {\r\n                  !(props.isDel) ?\r\n                  <div>\r\n                  <IconButton\r\n                aria-label=\"more\"\r\n                aria-controls=\"long-menu\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n                >\r\n                <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    id=\"long-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    PaperProps={{\r\n                    style: {\r\n                        maxHeight: 48 * 4.5,\r\n                        width: '20ch',\r\n                    },\r\n                    }}\r\n                >\r\n                    {options.map((option) => (\r\n                    <MenuItem key={option} selected={option === 'Search'} onClick={()=>itemClickHandler(option)}>\r\n                        {option}\r\n                    </MenuItem>\r\n                    ))}\r\n                </Menu>\r\n                  </div>\r\n                  :\r\n                  <Button onClick={deleteChat}>\r\n                  Delete\r\n                  </Button>\r\n              }\r\n            </div>\r\n            {props.element}\r\n            {props.loading ? (\r\n              <div className='load'>\r\n                <CircularProgress color='secondary' />\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <TypeMessage sendMessage={props.sendMessage} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js",["268"],"import { Button, Typography,Paper } from \"@material-ui/core\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport React, { useState, useContext} from \"react\";\r\nimport { lightBlue, grey} from '@material-ui/core/colors';\r\nconst SingleContact = (props) => {\r\n     \r\n    const { contact } = props;\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n      const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contact._id)?false:true)\r\n     \r\n  \r\n    //const [showAddBtn, setAddBtn]=useState(state?!state.sentRequests.includes(contact._id):true);\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const sentFriendRequest=()=>{\r\n        friendService.sendRequest(\r\n            {friendId:contact._id,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n            \r\n            })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n     const cancelFriendRequest=()=>{\r\n        friendService.cancelRequest(\r\n            {friendId:contact._id,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n             \r\n         })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n    return (\r\n        <div>\r\n       <Paper style={{padding: '10px 20px', marginBottom:\"2rem\"}}  >\r\n              <img src={contact.profileImg}  className=\"img-fluid rounded-circle p-2\"\r\n          style={{ width: \"4.9em\" ,display:\"inline\" }} alt=\"img\"/>\r\n              <h4   style={{display:\"inline\"  }}>{contact.firstName + \" \"+ contact.lastName}</h4>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{display:\"inline-block\"  ,position:\"relative\",float:\"right\",marginTop:\"1rem\", backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{display:\"inline-block\" ,position:\"relative\",float:\"right\" ,marginTop:\"1rem\", backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n        <Typography style={{color:\"gray\",marginLeft:\"5rem\" ,  fontStyle: \"italic\" , fontSize:\"0.9rem\" }}>{contact.email}</Typography>\r\n     </Paper>       \r\n   \r\n    </div>);\r\n}\r\n \r\nexport default SingleContact;","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js",[],"C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js",["269","270","271"],"import React, {useEffect} from \"react\";\r\nimport \"./chat.css\"\r\n//import myimg from \"./queen.jpg\"\r\nimport { Player } from 'video-react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport \"video-react/dist/video-react.css\"\r\nexport default function SettingMessage(props) {\r\n  //console.log(\"From setting\",props.chat)\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [messages, setMessages] = React.useState()\r\n  let someArray=[]\r\n  const handleChange = (event,message) => {\r\n    \r\n    setChecked((c)=>{\r\n      c= event.target.checked\r\n      console.log(\"check value\",c)\r\n      if(c === true){\r\n        console.log(\"in iffff\")\r\n        setMessages((m)=>{\r\n          console.log(\"in setMessage\")\r\n          if(m !== undefined){\r\n            console.log(\"in if 1\")\r\n            if(m.msgs !== undefined){\r\n              console.log(\"in if 2\")\r\n            let msgs = [...m.msgs]\r\n            msgs = [...msgs  ,message]\r\n            console.log(\"mmmmm\",m.length)\r\n            return {...m, msgs}\r\n            }\r\n            else {\r\n              console.log(\"in msg\",m)\r\n              return {msgs: [message]};\r\n            } \r\n          }\r\n          else {\r\n            console.log(\"in msg\",m)\r\n            return {msgs: [message]};\r\n          }\r\n          \r\n        })\r\n    \r\n        }\r\n        else{\r\n          console.log(\"in elsey\")\r\n          if(messages.msgs !== undefined){\r\n          someArray = messages.msgs\r\n          someArray = messages.msgs.filter ((m)=>{\r\n            return m._id !== message._id\r\n          })\r\n          setMessages((m)=>{\r\n            m = someArray\r\n            console.log(\"mmm\",m)\r\n            return m\r\n          })\r\n        }\r\n        else{\r\n          console.log(\"undened\",messages.msgs)\r\n          setMessages((m)=>{\r\n            return m = []\r\n          })\r\n        }\r\n          //console.log(\"msg 2: \",someArray)\r\n        }\r\n      return c\r\n    })\r\n      \r\n    \r\n  };\r\n\r\n  useEffect(()=>{\r\n    props.delHandler(messages)\r\n  },[messages])\r\n\r\n  console.log(props.isDel)\r\n  return (\r\n    props.chat.messages.map((message) => {\r\n        //console.log(\"msg\",message)\r\n        //console.log(\"user\",props.user)\r\n      if (message.to === props.user) {\r\n        //console.log(\"Type received\")\r\n        return (\r\n          <div className ='msgdiv'>\r\n          <div className=\"incoming_msg_img\">\r\n          {\r\n            props.isDel ?\r\n              <Checkbox \r\n              onChange={(e) => {\r\n              handleChange(e, message);\r\n               }}\r\n              inputProps={{ 'aria-label': 'primary checkbox' }} name=\"gilad\" />: null\r\n          }\r\n          \r\n          </div>\r\n            <div className=\"received_msg\">\r\n              <div className=\"received_withd_msg\">\r\n                <span className = \"playerdiv1\"> \r\n                <Player >\r\n                  <source src={message.messageVideo} />\r\n              </Player>\r\n                </span>\r\n              \r\n                <p>{message.messageBody}</p>\r\n                <span className=\"time_date\"> {message.time}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      else if(message.from === props.user) {\r\n        return (\r\n          <div class=\"outgoing_msg\">\r\n          {\r\n            props.isDel ?\r\n              <Checkbox \r\n              onChange={(e) => {\r\n              handleChange(e, message);\r\n               }}\r\n              inputProps={{ 'aria-label': 'primary checkbox' }} \r\n              name=\"gilad\" />: null\r\n          }\r\n            <div class=\"sent_msg\">\r\n            <span className = \"playerdiv2\">\r\n            {<Player>\r\n                  <source src={message.messageVideo} />\r\n              </Player>}\r\n            </span>\r\n            \r\n              <p>{message.messageBody}</p>\r\n              <span class=\"time_date\"> {message.time}</span>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      else{\r\n        console.log(\"nothing\")\r\n      }\r\n        \r\n    })\r\n  );\r\n}\r\n","C:\\Users\\Akram Farooq\\Documents\\GitHub\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js",["272","273","274","275","276","277"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport \"./chat.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(0, 3, 0, 1),\r\n  },\r\n  listText: {\r\n    fontSize: \"1.5rem\",\r\n    fontFamily: \"Roboto\",\r\n    marginLeft: \"40px\",\r\n  },\r\n  listText1: {\r\n    fontSize: \"1.2rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n    marginLeft: \"40px\",\r\n  },\r\n  listBtn: {\r\n    backgroundColor: \"rgb(0, 172, 193)\",\r\n    color: \"white\",\r\n    fontSize: \"1rem\",\r\n  },\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n  mygrid1: {\r\n    padding: \"20px\",\r\n  },\r\n  img: {\r\n    width: \"4rem\",\r\n    height: \"4rem\",\r\n    borderRadius: \"60px\",\r\n  },\r\n}));\r\nconst SingleChat = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  console.log(\"props\",props.recipients)\r\n  console.log(\"props\",props.lastMsg)\r\n  let elem = null;\r\n  let elem1=null\r\n\r\n  const recipientClickHandler = (fr,type,id) =>{\r\n    if(type === 'unread'){\r\n      chatservice.changeMessageType({type : 'read'},id)\r\n      .then((res)=>console.log(res))\r\n      .catch((err)=>console.log(err))\r\n    }\r\n    console.log(\"fr\",fr)\r\n    localStorage.setItem(\"friendId\",fr.id)\r\n    localStorage.setItem(\"recName\",fr.name)\r\n    localStorage.setItem(\"recLang\",fr.lang)\r\n    localStorage.setItem(\"profileUrl\",fr.img)\r\n    history.push(\"/chat/\"+fr.email+' '+fr.id)\r\n    \r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {props.recipients.map((r, index) => {\r\n        console.log(\"r:\",r)\r\n        return (\r\n          <Grid xs={6}>\r\n            <ListItem button >\r\n              <ListItemAvatar>\r\n                <img\r\n                  src={r.img}\r\n                  alt='img'\r\n                  className={classes.img}\r\n               />\r\n              </ListItemAvatar>\r\n              <ListItemText>\r\n                {/*  {setText(r,chatRecipients.lastMsg[index],chatRecipients.msgType[index])}\r\n                {elem}\r\n                 */}\r\n                 \r\n                <Typography className={classes.listText}>\r\n                    {r.name}\r\n                </Typography>\r\n                \r\n                {props.lastMsg.emails.forEach((u,ind)=>{\r\n                    if(u === r.email){\r\n                      console.log(\" email from map\",u,props.lastMsg.msgs[ind])\r\n                      if(props.lastMsg.types[ind] === 'read'){\r\n                        elem= ( <Typography className={classes.listText1} \r\n                        onClick={()=>recipientClickHandler(r,props.lastMsg.types[ind],props.lastMsg.msgId[ind])}>\r\n                                  {props.lastMsg.msgs[ind]}\r\n                            </Typography>\r\n                        )\r\n                      }\r\n                      else if(props.lastMsg.types[ind] === 'unread'){\r\n                        elem= ( <Typography style={{fontWeight: 'bold', color: 'black'}} \r\n                        className={classes.listText1} \r\n                        onClick={()=>recipientClickHandler(r,props.lastMsg.types[ind],props.lastMsg.msgId[ind])}>\r\n                                  {props.lastMsg.msgs[ind]}\r\n                            </Typography>\r\n                        )\r\n                      }\r\n                    }\r\n                })}\r\n            \r\n                {elem}\r\n              </ListItemText>\r\n              <Divider />\r\n            </ListItem>\r\n            <Divider />\r\n          </Grid>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default SingleChat;\r\n",{"ruleId":"278","severity":1,"message":"279","line":3,"column":10,"nodeType":"280","messageId":"281","endLine":3,"endColumn":19},{"ruleId":"278","severity":1,"message":"282","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":13},{"ruleId":"278","severity":1,"message":"283","line":10,"column":10,"nodeType":"280","messageId":"281","endLine":10,"endColumn":18},{"ruleId":"278","severity":1,"message":"284","line":11,"column":10,"nodeType":"280","messageId":"281","endLine":11,"endColumn":21},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"278","severity":1,"message":"289","line":17,"column":8,"nodeType":"280","messageId":"281","endLine":17,"endColumn":13},{"ruleId":"278","severity":1,"message":"279","line":22,"column":19,"nodeType":"280","messageId":"281","endLine":22,"endColumn":28},{"ruleId":"278","severity":1,"message":"290","line":22,"column":30,"nodeType":"280","messageId":"281","endLine":22,"endColumn":40},{"ruleId":"278","severity":1,"message":"291","line":6,"column":8,"nodeType":"280","messageId":"281","endLine":6,"endColumn":17},{"ruleId":"278","severity":1,"message":"292","line":19,"column":10,"nodeType":"280","messageId":"281","endLine":19,"endColumn":25},{"ruleId":"278","severity":1,"message":"293","line":64,"column":10,"nodeType":"280","messageId":"281","endLine":64,"endColumn":17},{"ruleId":"278","severity":1,"message":"294","line":64,"column":19,"nodeType":"280","messageId":"281","endLine":64,"endColumn":29},{"ruleId":"278","severity":1,"message":"295","line":65,"column":10,"nodeType":"280","messageId":"281","endLine":65,"endColumn":14},{"ruleId":"296","severity":1,"message":"297","line":93,"column":5,"nodeType":"298","endLine":93,"endColumn":7,"suggestions":"299"},{"ruleId":"278","severity":1,"message":"300","line":112,"column":11,"nodeType":"280","messageId":"281","endLine":112,"endColumn":22},{"ruleId":"278","severity":1,"message":"301","line":116,"column":11,"nodeType":"280","messageId":"281","endLine":116,"endColumn":25},{"ruleId":"278","severity":1,"message":"302","line":124,"column":11,"nodeType":"280","messageId":"281","endLine":124,"endColumn":22},{"ruleId":"303","severity":1,"message":"304","line":133,"column":44,"nodeType":"305","messageId":"306","endLine":133,"endColumn":45},{"ruleId":"278","severity":1,"message":"307","line":142,"column":11,"nodeType":"280","messageId":"281","endLine":142,"endColumn":22},{"ruleId":"278","severity":1,"message":"308","line":19,"column":32,"nodeType":"280","messageId":"281","endLine":19,"endColumn":37},{"ruleId":"296","severity":1,"message":"309","line":46,"column":9,"nodeType":"298","endLine":46,"endColumn":23,"suggestions":"310"},{"ruleId":"278","severity":1,"message":"311","line":4,"column":10,"nodeType":"280","messageId":"281","endLine":4,"endColumn":15},{"ruleId":"278","severity":1,"message":"312","line":4,"column":17,"nodeType":"280","messageId":"281","endLine":4,"endColumn":21},{"ruleId":"278","severity":1,"message":"313","line":4,"column":23,"nodeType":"280","messageId":"281","endLine":4,"endColumn":27},{"ruleId":"296","severity":1,"message":"314","line":30,"column":5,"nodeType":"298","endLine":30,"endColumn":7,"suggestions":"315"},{"ruleId":"278","severity":1,"message":"316","line":33,"column":5,"nodeType":"280","messageId":"281","endLine":33,"endColumn":10},{"ruleId":"278","severity":1,"message":"317","line":1,"column":31,"nodeType":"280","messageId":"281","endLine":1,"endColumn":37},{"ruleId":"278","severity":1,"message":"318","line":4,"column":16,"nodeType":"280","messageId":"281","endLine":4,"endColumn":22},{"ruleId":"296","severity":1,"message":"319","line":23,"column":7,"nodeType":"298","endLine":23,"endColumn":15,"suggestions":"320"},{"ruleId":"321","severity":1,"message":"322","line":45,"column":45,"nodeType":"323","messageId":"324","endLine":45,"endColumn":47},{"ruleId":"296","severity":1,"message":"325","line":65,"column":8,"nodeType":"298","endLine":65,"endColumn":10,"suggestions":"326"},{"ruleId":"278","severity":1,"message":"327","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":19},{"ruleId":"296","severity":1,"message":"314","line":35,"column":6,"nodeType":"298","endLine":35,"endColumn":8,"suggestions":"328"},{"ruleId":"321","severity":1,"message":"322","line":57,"column":43,"nodeType":"323","messageId":"324","endLine":57,"endColumn":45},{"ruleId":"296","severity":1,"message":"329","line":70,"column":6,"nodeType":"298","endLine":70,"endColumn":8,"suggestions":"330"},{"ruleId":"296","severity":1,"message":"331","line":106,"column":6,"nodeType":"298","endLine":106,"endColumn":8,"suggestions":"332"},{"ruleId":"278","severity":1,"message":"333","line":15,"column":10,"nodeType":"280","messageId":"281","endLine":15,"endColumn":15},{"ruleId":"278","severity":1,"message":"334","line":16,"column":10,"nodeType":"280","messageId":"281","endLine":16,"endColumn":15},{"ruleId":"296","severity":1,"message":"335","line":45,"column":6,"nodeType":"298","endLine":45,"endColumn":8,"suggestions":"336"},{"ruleId":"296","severity":1,"message":"337","line":55,"column":6,"nodeType":"298","endLine":55,"endColumn":8,"suggestions":"338"},{"ruleId":"296","severity":1,"message":"339","line":60,"column":6,"nodeType":"298","endLine":60,"endColumn":8,"suggestions":"340"},{"ruleId":"296","severity":1,"message":"341","line":64,"column":5,"nodeType":"298","endLine":64,"endColumn":7,"suggestions":"342"},{"ruleId":"278","severity":1,"message":"343","line":2,"column":10,"nodeType":"280","messageId":"281","endLine":2,"endColumn":24},{"ruleId":"278","severity":1,"message":"344","line":26,"column":7,"nodeType":"280","messageId":"281","endLine":26,"endColumn":14},{"ruleId":"278","severity":1,"message":"345","line":41,"column":7,"nodeType":"280","messageId":"281","endLine":41,"endColumn":17},{"ruleId":"278","severity":1,"message":"346","line":44,"column":7,"nodeType":"280","messageId":"281","endLine":44,"endColumn":14},{"ruleId":"278","severity":1,"message":"347","line":45,"column":7,"nodeType":"280","messageId":"281","endLine":45,"endColumn":12},{"ruleId":"296","severity":1,"message":"348","line":113,"column":6,"nodeType":"298","endLine":113,"endColumn":8,"suggestions":"349"},{"ruleId":"296","severity":1,"message":"350","line":177,"column":5,"nodeType":"298","endLine":177,"endColumn":29,"suggestions":"351"},{"ruleId":"278","severity":1,"message":"352","line":46,"column":10,"nodeType":"280","messageId":"281","endLine":46,"endColumn":22},{"ruleId":"296","severity":1,"message":"325","line":155,"column":8,"nodeType":"298","endLine":155,"endColumn":10,"suggestions":"353"},{"ruleId":"296","severity":1,"message":"354","line":185,"column":5,"nodeType":"298","endLine":185,"endColumn":16,"suggestions":"355"},{"ruleId":"356","severity":1,"message":"357","line":234,"column":14,"nodeType":"358","endLine":234,"endColumn":54},{"ruleId":"278","severity":1,"message":"359","line":9,"column":8,"nodeType":"280","messageId":"281","endLine":9,"endColumn":21},{"ruleId":"278","severity":1,"message":"360","line":25,"column":13,"nodeType":"280","messageId":"281","endLine":25,"endColumn":25},{"ruleId":"278","severity":1,"message":"361","line":26,"column":13,"nodeType":"280","messageId":"281","endLine":26,"endColumn":27},{"ruleId":"296","severity":1,"message":"362","line":58,"column":8,"nodeType":"298","endLine":58,"endColumn":10,"suggestions":"363"},{"ruleId":"321","severity":1,"message":"364","line":114,"column":34,"nodeType":"323","messageId":"365","endLine":114,"endColumn":36},{"ruleId":"366","severity":1,"message":"367","line":115,"column":28,"nodeType":"305","messageId":"368","endLine":115,"endColumn":30},{"ruleId":"278","severity":1,"message":"290","line":1,"column":37,"nodeType":"280","messageId":"281","endLine":1,"endColumn":47},{"ruleId":"278","severity":1,"message":"317","line":1,"column":49,"nodeType":"280","messageId":"281","endLine":1,"endColumn":55},{"ruleId":"369","severity":1,"message":"370","line":154,"column":6,"nodeType":"371","messageId":"372","endLine":156,"endColumn":14,"fix":"373"},{"ruleId":"296","severity":1,"message":"374","line":159,"column":6,"nodeType":"298","endLine":159,"endColumn":8,"suggestions":"375"},{"ruleId":"296","severity":1,"message":"354","line":191,"column":5,"nodeType":"298","endLine":191,"endColumn":16,"suggestions":"376"},{"ruleId":"377","severity":1,"message":"378","line":198,"column":53,"nodeType":"371","messageId":"379","endLine":198,"endColumn":54,"fix":"380"},{"ruleId":"356","severity":1,"message":"357","line":241,"column":14,"nodeType":"358","endLine":241,"endColumn":54},{"ruleId":"278","severity":1,"message":"381","line":8,"column":10,"nodeType":"280","messageId":"281","endLine":8,"endColumn":14},{"ruleId":"296","severity":1,"message":"382","line":61,"column":5,"nodeType":"298","endLine":61,"endColumn":7,"suggestions":"383"},{"ruleId":"321","severity":1,"message":"364","line":104,"column":39,"nodeType":"323","messageId":"365","endLine":104,"endColumn":41},{"ruleId":"366","severity":1,"message":"367","line":105,"column":28,"nodeType":"305","messageId":"368","endLine":105,"endColumn":30},{"ruleId":"296","severity":1,"message":"384","line":50,"column":34,"nodeType":"298","endLine":50,"endColumn":36,"suggestions":"385"},{"ruleId":"321","severity":1,"message":"364","line":108,"column":40,"nodeType":"323","messageId":"365","endLine":108,"endColumn":42},{"ruleId":"366","severity":1,"message":"367","line":109,"column":28,"nodeType":"305","messageId":"368","endLine":109,"endColumn":30},{"ruleId":"278","severity":1,"message":"386","line":4,"column":9,"nodeType":"280","messageId":"281","endLine":4,"endColumn":15},{"ruleId":"278","severity":1,"message":"386","line":13,"column":9,"nodeType":"280","messageId":"281","endLine":13,"endColumn":15},{"ruleId":"278","severity":1,"message":"279","line":2,"column":17,"nodeType":"280","messageId":"281","endLine":2,"endColumn":26},{"ruleId":"278","severity":1,"message":"387","line":2,"column":28,"nodeType":"280","messageId":"281","endLine":2,"endColumn":36},{"ruleId":"278","severity":1,"message":"317","line":2,"column":38,"nodeType":"280","messageId":"281","endLine":2,"endColumn":44},{"ruleId":"321","severity":1,"message":"322","line":29,"column":36,"nodeType":"323","messageId":"324","endLine":29,"endColumn":38},{"ruleId":"278","severity":1,"message":"290","line":4,"column":27,"nodeType":"280","messageId":"281","endLine":4,"endColumn":37},{"ruleId":"278","severity":1,"message":"388","line":9,"column":10,"nodeType":"280","messageId":"281","endLine":9,"endColumn":17},{"ruleId":"296","severity":1,"message":"389","line":72,"column":5,"nodeType":"298","endLine":72,"endColumn":15,"suggestions":"390"},{"ruleId":"321","severity":1,"message":"391","line":76,"column":39,"nodeType":"323","messageId":"365","endLine":76,"endColumn":41},{"ruleId":"278","severity":1,"message":"279","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":26},{"ruleId":"278","severity":1,"message":"317","line":1,"column":28,"nodeType":"280","messageId":"281","endLine":1,"endColumn":34},{"ruleId":"278","severity":1,"message":"387","line":1,"column":36,"nodeType":"280","messageId":"281","endLine":1,"endColumn":44},{"ruleId":"278","severity":1,"message":"327","line":12,"column":8,"nodeType":"280","messageId":"281","endLine":12,"endColumn":19},{"ruleId":"278","severity":1,"message":"392","line":13,"column":8,"nodeType":"280","messageId":"281","endLine":13,"endColumn":14},{"ruleId":"278","severity":1,"message":"393","line":72,"column":7,"nodeType":"280","messageId":"281","endLine":72,"endColumn":12},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Provider' is defined but never used.","'createStore' is defined but never used.","no-native-reassign",["394"],"no-negated-in-lhs",["395"],"'Users' is defined but never used.","'useContext' is defined but never used.","'TextField' is defined but never used.","'isAuthenticated' is defined but never used.","'newUser' is assigned a value but never used.","'setNewUser' is assigned a value but never used.","'show' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clientSocket' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["396"],"'showButtons' is assigned a value but never used.","'addGroupMember' is assigned a value but never used.","'createGroup' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'nameHandler' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["397"],"'Slide' is defined but never used.","'Zoom' is defined but never used.","'Flip' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["398"],"'count' is assigned a value but never used.","'useRef' is defined but never used.","'uuidv4' is defined but never used.","React Hook useEffect has a missing dependency: 'getRecData'. Either include it or remove the dependency array.",["399"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'match.params.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["400"],"'userservice' is defined but never used.",["401"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["402"],"React Hook useEffect has missing dependencies: 'clientSocket' and 'count'. Either include them or remove the dependency array.",["403"],"'Fname' is assigned a value but never used.","'Lname' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["404"],"React Hook useEffect has a missing dependency: 'clientSocket'. Either include it or remove the dependency array.",["405"],"React Hook useEffect has a missing dependency: 'messageEvent'. Either include it or remove the dependency array.",["406"],"React Hook useEffect has missing dependencies: 'myId' and 'roomJoin'. Either include them or remove the dependency array.",["407"],"'MyChatsContext' is defined but never used.","'history' is assigned a value but never used.","'notPresent' is assigned a value but never used.","'recMsgs' is assigned a value but never used.","'dummy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRecData', 'uId', and 'usersData'. Either include them or remove the dependency array.",["408"],"React Hook useEffect has missing dependencies: 'clientSocket' and 'setRecArray'. Either include them or remove the dependency array.",["409"],"'messageEvent' is assigned a value but never used.",["410"],"React Hook React.useCallback has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["411"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PersonAddIcon' is defined but never used.","'clientSocket' is assigned a value but never used.","'chatRecipients' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllMyFriends'. Either include it or remove the dependency array.",["412"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","unexpected","no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"413","text":"414"},"React Hook useEffect has missing dependencies: 'myId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["415"],["416"],"dot-location","Expected dot to be on same line as property.","expectedDotBeforeProperty",{"range":"417","text":"418"},"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getData' and 'getSingleContact'. Either include them or remove the dependency array.",["419"],"React Hook useEffect has a missing dependency: 'myId'. Either include it or remove the dependency array.",["420"],"'config' is assigned a value but never used.","'useState' is defined but never used.","'checked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["421"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","'Button' is defined but never used.","'elem1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"426","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"430","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},[5250,5252],".",{"desc":"454","fix":"455"},{"desc":"450","fix":"456"},[6892,6906],"\r\n           .",{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},"Update the dependencies array to be: [clientSocket, getData]",{"range":"463","text":"464"},"Update the dependencies array to be: [formData, match.params]",{"range":"465","text":"466"},"Update the dependencies array to be: [id]",{"range":"467","text":"468"},"Update the dependencies array to be: [getRecData, userId]",{"range":"469","text":"470"},"Update the dependencies array to be: [match.params.token, values]",{"range":"471","text":"472"},{"range":"473","text":"468"},"Update the dependencies array to be: [getData]",{"range":"474","text":"475"},"Update the dependencies array to be: [clientSocket, count]",{"range":"476","text":"477"},"Update the dependencies array to be: [history]",{"range":"478","text":"479"},"Update the dependencies array to be: [clientSocket]",{"range":"480","text":"481"},"Update the dependencies array to be: [messageEvent]",{"range":"482","text":"483"},"Update the dependencies array to be: [myId, roomJoin]",{"range":"484","text":"485"},"Update the dependencies array to be: [getRecData, uId, usersData]",{"range":"486","text":"487"},"Update the dependencies array to be: [usersData, lastMsg.msgs, clientSocket, setRecArray]",{"range":"488","text":"489"},{"range":"490","text":"472"},"Update the dependencies array to be: [values]",{"range":"491","text":"492"},"Update the dependencies array to be: [getAllMyFriends]",{"range":"493","text":"494"},"Update the dependencies array to be: [myId, values]",{"range":"495","text":"496"},{"range":"497","text":"492"},"Update the dependencies array to be: [getData, getSingleContact]",{"range":"498","text":"499"},"Update the dependencies array to be: [myId]",{"range":"500","text":"501"},"Update the dependencies array to be: [messages, props]",{"range":"502","text":"503"},[3027,3029],"[clientSocket, getData]",[1648,1662],"[formData, match.params]",[854,856],"[id]",[747,755],"[getRecData, userId]",[1681,1683],"[match.params.token, values]",[1506,1508],[2545,2547],"[getData]",[3614,3616],"[clientSocket, count]",[1594,1596],"[history]",[1847,1849],"[clientSocket]",[1949,1951],"[messageEvent]",[2002,2004],"[myId, roomJoin]",[3823,3825],"[getRecData, uId, usersData]",[5686,5710],"[usersData, lastMsg.msgs, clientSocket, setRecArray]",[5157,5159],[6381,6392],"[values]",[2118,2120],"[getAllMyFriends]",[5372,5374],"[myId, values]",[6641,6652],[2180,2182],"[getData, getSingleContact]",[1938,1940],"[myId]",[1986,1996],"[messages, props]"]