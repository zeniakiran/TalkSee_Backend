[{"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js":"1","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js":"2","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js":"3","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js":"4","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js":"5","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js":"6","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js":"7","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js":"8","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js":"9","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js":"10","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Users.js":"11","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js":"12","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js":"13","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js":"14","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js":"15","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js":"16","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js":"17","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js":"18","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js":"19","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js":"20","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js":"21","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js":"22","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js":"23","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js":"24","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js":"25","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js":"26","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js":"27","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js":"28","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js":"29","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js":"30","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js":"31","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js":"32","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js":"33","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js":"34","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js":"35","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js":"36","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js":"37","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js":"38","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js":"39","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js":"40","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js":"41","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GroupService.js":"42","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js":"43","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\showMessage.js":"44","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\Notification.js":"45","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js":"46"},{"size":1664,"mtime":1618066164985,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":499162500000,"results":"49","hashOfConfig":"48"},{"size":3944,"mtime":1622308410163,"results":"50","hashOfConfig":"48"},{"size":2811,"mtime":1622112498859,"results":"51","hashOfConfig":"48"},{"size":3708,"mtime":1619802370153,"results":"52","hashOfConfig":"48"},{"size":3893,"mtime":1618995410609,"results":"53","hashOfConfig":"48"},{"size":4158,"mtime":1618052506116,"results":"54","hashOfConfig":"48"},{"size":8004,"mtime":1622373437238,"results":"55","hashOfConfig":"48"},{"size":7992,"mtime":1618996175065,"results":"56","hashOfConfig":"48"},{"size":437,"mtime":1614689093529,"results":"57","hashOfConfig":"48"},{"size":7000,"mtime":1618249738129,"results":"58","hashOfConfig":"48"},{"size":11582,"mtime":1618422980426,"results":"59","hashOfConfig":"48"},{"size":11360,"mtime":1622112680542,"results":"60","hashOfConfig":"48"},{"size":7736,"mtime":1622375116319,"results":"61","hashOfConfig":"48"},{"size":5136,"mtime":1622111775544,"results":"62","hashOfConfig":"48"},{"size":12441,"mtime":1621525741081,"results":"63","hashOfConfig":"48"},{"size":12779,"mtime":1622112967571,"results":"64","hashOfConfig":"48"},{"size":5289,"mtime":1622315940068,"results":"65","hashOfConfig":"48"},{"size":4680,"mtime":1622112728312,"results":"66","hashOfConfig":"48"},{"size":4706,"mtime":1622112800240,"results":"67","hashOfConfig":"48"},{"size":4849,"mtime":1622363580392,"results":"68","hashOfConfig":"48"},{"size":781,"mtime":1618996042146,"results":"69","hashOfConfig":"48"},{"size":2255,"mtime":1614689093224,"results":"70","hashOfConfig":"48"},{"size":994,"mtime":1621539473305,"results":"71","hashOfConfig":"48"},{"size":1091,"mtime":1614689093239,"results":"72","hashOfConfig":"48"},{"size":425,"mtime":1620237375174,"results":"73","hashOfConfig":"48"},{"size":607,"mtime":1618937715752,"results":"74","hashOfConfig":"48"},{"size":573,"mtime":1618400947391,"results":"75","hashOfConfig":"48"},{"size":522,"mtime":1618052506107,"results":"76","hashOfConfig":"48"},{"size":2865,"mtime":1619896905411,"results":"77","hashOfConfig":"48"},{"size":2394,"mtime":1620067098679,"results":"78","hashOfConfig":"48"},{"size":787,"mtime":1618423755981,"results":"79","hashOfConfig":"48"},{"size":2553,"mtime":1618997269887,"results":"80","hashOfConfig":"48"},{"size":1643,"mtime":1612354085455,"results":"81","hashOfConfig":"48"},{"size":284,"mtime":1618052506109,"results":"82","hashOfConfig":"48"},{"size":268,"mtime":1618052506108,"results":"83","hashOfConfig":"48"},{"size":1576,"mtime":1615214194986,"results":"84","hashOfConfig":"48"},{"size":308,"mtime":1618996505101,"results":"85","hashOfConfig":"48"},{"size":3899,"mtime":1622311265243,"results":"86","hashOfConfig":"48"},{"size":7938,"mtime":1622034899840,"results":"87","hashOfConfig":"48"},{"size":4008,"mtime":1622398531428,"results":"88","hashOfConfig":"48"},{"size":440,"mtime":1613505721315,"results":"89","hashOfConfig":"48"},{"size":1634,"mtime":1621696142240,"results":"90","hashOfConfig":"48"},{"size":1334,"mtime":1621615792588,"results":"91","hashOfConfig":"48"},{"size":1199,"mtime":1622136390492,"results":"92","hashOfConfig":"48"},{"size":3475,"mtime":1622310175104,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},"1gexn1j",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"97"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"97"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"97"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"97"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"97"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"97"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"139","usedDeprecatedRules":"97"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"97"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"97"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"97"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"97"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"97"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"97"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"97"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"97"},"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\index.js",["206","207","208","209"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n//import Pusher from 'pusher-js';\r\n//import Reducer from './Redux/reducers/chat_reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n//Pusher.logToConsole = true;\r\n\r\n//useEffect (()=>{\r\n  /* const pusher = new Pusher('18cb37e3146179a6a80e', {\r\n  cluster: 'ap2',\r\n  authEndpoint: 'http://localhost:5000/api/chatapi/pusher/auth'\r\n}); */\r\n/* usher.connection.bind('connected', function () {\r\n  // attach the socket ID to all outgoing Axios requests\r\n  axios.defaults.headers.common['X-Socket-Id'] = pusher.connection.socket_id;\r\n  console.log(\"id:\",pusher.connection.socket_id)\r\n}); */\r\n//},[])\r\n/* var channel = pusher.subscribe('private-my-channel');\r\nchannel.bind('my-event', function(data) {\r\n  console.log(\"in bind\")\r\n  alert(JSON.stringify(data));\r\n  console.log(\"pusher data:\",data)\r\n}); */\r\n\r\n//const myStore = createStore(Reducer, window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                            //window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\n/* ReactDOM.render(\r\n  <Provider\r\n        store={myStore}\r\n        >\r\n        <App />\r\n  </Provider>\r\n    \r\n  ,\r\n  document.getElementById('root')\r\n); */\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["210","211"],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\App.js",["212","213","214"],"import './App.css';\r\nimport { Route, Switch,BrowserRouter as Router,Redirect } from \"react-router-dom\";\r\nimport UserDashboard from \"./components/FrontendComponents/components/userDashboard\";\r\nimport SignUp from \"./components/FrontendComponents/components/SignUp\";\r\nimport LogIn from \"./components/FrontendComponents/components/LogIn\";\r\nimport Activate from \"./components/FrontendComponents/components/Activate\";\r\nimport notFound from \"./components/FrontendComponents/components/notFound\";\r\nimport ForgotPassword from \"./components/FrontendComponents/components/forgotPassword\";\r\nimport ResetPassword from \"./components/FrontendComponents/components/resetPassword\";\r\nimport ProfileSetup from \"./components/FrontendComponents/components/profileSetup\";\r\nimport AllContact from \"./components/FrontendComponents/components/AllContacts\";\r\nimport AllFriendRequest from \"./components/FrontendComponents/components/AllFriendRequest\";\r\nimport AllFriends from \"./components/FrontendComponents/components/AllFriends\";\r\nimport UpdateProfileSetup from \"./components/FrontendComponents/components/updateProfileSetup\";\r\nimport Profile from \"./components/FrontendComponents/components/Profile\";\r\nimport Chat from \"./components/ChatComponents/Chat\";\r\nimport MyChats from \"./components/ChatComponents/AllChats\";\r\nimport Users from \"./components/ChatComponents/Users\";\r\nimport {SocketProvider} from './context/SocketContext';\r\nimport {MyChatsProvider} from './context/MyChatsContext';\r\nimport {ChatContextProvider} from './context/ChatContext';\r\n//import {SocketContext} from './context/SocketContext';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n//import Notification from './components/FrontendComponents/Alerts/Notification'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport {useState, useEffect, useContext } from 'react';\r\n\r\n\r\nconst App =() =>{\r\n  const [userId,setId] = useState()\r\n  const [dId,setDid] = useState()\r\n  //const [msg, setMsg] = useState()\r\n  //const {messageEvent} = useContext(SocketContext);\r\n  \r\n  /* useEffect(()=>{\r\n    messageEvent()\r\n\r\n  },[]) */\r\n  return (\r\n    <div className=\"App\">\r\n  \r\n    <MyChatsProvider userId={userId} >\r\n    <ChatContextProvider userId={userId} >\r\n    <SocketProvider id={dId} >\r\n    <ToastContainer/>\r\n    <Router>\r\n      <Switch>\r\n            <Route path=\"/\" exact><LogIn onIdSubmit={setId} setId={setDid}/></Route>\r\n            <Route exact path=\"/signup\" component={SignUp} />\r\n            <Route exact path=\"/login\"><LogIn onIdSubmit={setId}  setId={setDid}/></Route>\r\n            <Route exact path=\"/user/activate/:token\" component={Activate} />\r\n            <Route exact path=\"/dashboard/:id\"  component ={UserDashboard} />\r\n            <Route exact path=\"/reset-password/:token\" component={ResetPassword} />\r\n            <Route exact path=\"/forgot-password\" component={ForgotPassword} />\r\n            <Route exact path=\"/profile-setup/:token\" component={ProfileSetup}/>\r\n            <Route exact path=\"/update-my-profile-setup/:id\" component={UpdateProfileSetup}/>\r\n            <Route exact path =\"/all-contacts/:id\" component= {AllContact}/>\r\n            <Route exact path = \"/all-friend-requests/:id\" component ={AllFriendRequest}/>\r\n            <Route exact path =\"/all-my-friends/:id\" component ={AllFriends} />\r\n            <Route exact path =\"/profile/:id/:id\" component ={Profile} />\r\n            <Route exact path=\"/notfound\" component={notFound} />\r\n\r\n            <Route path=\"/chat/:id\" render={(props) => (\r\n              <Chat {...props} key={props.location.key} />\r\n            )} exact>\r\n            </Route>\r\n            <Route path=\"/mychats/:id\" render={(props) => (\r\n              <MyChats {...props} key={props.location.key}/>\r\n            )} exact>\r\n            </Route>\r\n            <Redirect to=\"/notfound\" />  \r\n      </Switch>\r\n      </Router>\r\n    </SocketProvider>\r\n    </ChatContextProvider>\r\n    </MyChatsProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\SocketContext.js",["215","216","217","218","219"],"import React ,{createContext,useEffect,useState,useRef} from 'react'\r\nimport io from \"socket.io-client\";\r\nimport { toast } from 'react-toastify';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const SocketContext = createContext();\r\nexport function SocketProvider({id,children}) {\r\n  \r\n  const [clientSocket, setSocket] = useState()\r\n  let count=0;\r\n  let roomId = useRef()\r\n  \r\n  useEffect(() => {\r\n    \r\n    const socket = io(\r\n      'http://localhost:5000',\r\n    )\r\n    setSocket(socket)\r\n    return () => socket.close()\r\n    /* clientSocket.current = io(\"http://127.0.0.1:5000\");\r\n    clientSocket.current.on('connect' , () => {\r\n      console.log(clientSocket.current.id);\r\n    }); */\r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    roomId.current= '/'+id\r\n    console.log(roomId)\r\n  },[])\r\n\r\n  const newMessageEvent = () => {\r\n    if(clientSocket){\r\n      clientSocket.on(\"newMessage\", (payload) => {\r\n      <button onClick={()=>console.log(\"clicked\")}>{toast(payload.RecipientName +':'+\r\n        payload.payload.messageBody, {\r\n          onOpen: () => console.log('Called when I open'),\r\n          position: toast.POSITION.TOP_LEFT,\r\n          toastId: '007',\r\n          transition: Bounce\r\n        })}\r\n      </button>\r\n      //count=count+1\r\n      console.log(\"new message\",payload)\r\n      })\r\n    }\r\n    else {\r\n      console.log(\"no socket\")\r\n    }  \r\n  //return () => {clientSocket.removeAllListeners(\"newMessage\");}\r\n  }\r\n\r\n  /* useEffect(()=>{\r\n    newMessageEvent()\r\n    console.log(\"2\")\r\n  },[])\r\n */\r\n  const roomJoin = (did) =>{\r\n    //did = did || roomId.current\r\n    did = '/'+did\r\n    if(clientSocket){\r\n      clientSocket.emit(\r\n        \"NotificationRoom\",\r\n        { myNotificationRoom : did},\r\n        ({error,room}) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  const friendReqEvent = () =>{\r\n    console.log(\"friend Req event\")\r\n    if(clientSocket){\r\n      clientSocket.on(\"newRequest\", (payload) => {\r\n          console.log(\"payload : \",payload)\r\n          toast.info(\r\n          payload.sender+ ' has sent you a friend request!', {\r\n          position: toast.POSITION.TOP_LEFT,\r\n          //toastId: '009',\r\n          autoClose: 2000,\r\n          transition: Bounce\r\n        })\r\n      })\r\n    }\r\n    else{\r\n      console.log(\"no socket\")\r\n    }\r\n  }\r\n  \r\n\r\n  let value={\r\n    clientSocket : clientSocket,\r\n    setSocket : setSocket,\r\n    messageEvent : newMessageEvent,\r\n    roomJoin : roomJoin,\r\n    friendReq : friendReqEvent\r\n  }\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n\r\n  \r\n}\r\n\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\MyChatsContext.js",["220","221","222","223"],"import React ,{createContext, useRef,useEffect,useState} from 'react'\r\nimport chatservice from \"../services/ChatService\"\r\nimport userservice from \"../services/UserService\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const MyChatsContext = createContext();\r\nexport function MyChatsProvider({userId,children}) {\r\n    const [chatRecipients,setChatRecipients] = useState([])\r\n    let recData = []\r\n    let recMsgs = []\r\n    let msgType = []\r\n    let recName = []\r\n    let recId=[]\r\n    let imgUrl =[]\r\n    useEffect(()=>{\r\n        //userId.current = localStorage.getItem(\"userId\")\r\n        if(userId !== undefined){\r\n        getRecData(userId,undefined)\r\n        //console.log(userId)\r\n        }\r\n        console.log(\"undefined\")\r\n        \r\n    },[userId])\r\n\r\n    const getRecData = (uId)=>{\r\n         recData = []; recName =[]; recMsgs = []; msgType = []; imgUrl=[]; recId=[]\r\n        //console.log(\"in getdata\")\r\n        chatservice.getChatRecipients(uId).then((data)=>{    \r\n            if(data.length>0){\r\n                //console.log(\"data getchat\",data)\r\n                /* dataFromDb.push(data)\r\n                console.log(\"data from db getchat\",dataFromDb) */\r\n                data.map((rec) =>{\r\n                    //console.log('single rec',rec)\r\n                    return recData.push(rec)\r\n                })\r\n                console.log(\"rec data\",recData)\r\n                recData = Array.from(new Set(recData));\r\n                console.log(\"rec data updated\",recData)\r\n                setChatRecipients((r)=>{\r\n                    r.Rname=recData\r\n                    //console.log(chatRecipients)\r\n                    return r\r\n                })\r\n                chatRecipients.Rname.map((r)=>{\r\n                    //console.log(\"r\",r)\r\n                    chatservice.getLastMsg(uId, r)\r\n                    .then((data1)=>{\r\n                        //console.log(\"data\",data1.type)\r\n                        recMsgs.push(data1.lastMsg)\r\n                        msgType.push(data1.type)\r\n                        //return {recMsgs,msgType}\r\n                    })\r\n                    .catch((err)=>console.log(err))\r\n\r\n                    userservice.getUserByEmail(r).then((data2)=>{\r\n                        //console.log(\"data 2\",data2)\r\n                        recId.push(data2[0]._id)\r\n                        imgUrl.push(data2[0].profileImg)\r\n                        recName.push(data2[0].firstName+' '+data2[0].lastName)\r\n                        setChatRecipients((r)=>{\r\n                            r.lastMsg = recMsgs\r\n                            r.msgType = msgType\r\n                            r.recId = recId\r\n                            r.imgUrl= imgUrl\r\n                            r.name = recName\r\n                            console.log(chatRecipients)\r\n                            return r\r\n                        })\r\n                       /*  if(cb === undefined)\r\n                            console.log(\"do nothing\")\r\n                        else\r\n                            cb() */\r\n                    }).catch((err)=>console.log(err))\r\n                })\r\n                \r\n            }\r\n            else\r\n                console.log(\"no data\")\r\n            \r\n            })\r\n            .catch((err)=>console.log(err))\r\n            return chatRecipients\r\n    }\r\n\r\n    /* useEffect(()=>{\r\n        \r\n    },[chatRecipients]) */\r\n    //getRecData()\r\n  const value = {\r\n      chatRecipients : chatRecipients,\r\n      getRecData : getRecData,\r\n      setRecipients : setChatRecipients,\r\n      /* setuuIdFunc : setuuId,\r\n      uuId : uuId */\r\n  }\r\n  return (\r\n    <MyChatsContext.Provider value={value}>\r\n      {children}\r\n    </MyChatsContext.Provider>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Activate.js",["224","225"],"import React, { useState, useEffect } from 'react';\r\nimport accountService from \"../../../services/accountService\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { grey,green, cyan,red} from '@material-ui/core/colors';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport PageTitle from \"./pageTitle\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst Activate = ({ match }) => {\r\n let token1 = match.params.token;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    token: '',\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n  });\r\n   const { firstName,lastName, token, errorMessage, successMsg} = formData;\r\n   let history = useHistory()\r\n  useEffect(() => {\r\n    let token = match.params.token;\r\n    let { firstName } = jwt.decode(token);\r\n    let { lastName } = jwt.decode(token);\r\n    if (token) {\r\n      setFormData({ ...formData, firstName,lastName,  token });  \r\n      accountService.accountActivation({token})\r\n      .then(response => {\r\n        setFormData({\r\n          ...formData,\r\n          errorMessage: false,\r\n          successMsg: response.successMessage,\r\n          firstName: response.firstName,\r\n          lastName: response.lastName,\r\n        });\r\n      })\r\n      .catch(err => {\r\n      setFormData({\r\n          ...formData,\r\n          successMsg: false,\r\n         errorMessage: err.response.data.errorMessage,\r\n          firstName: err.response.data.firstName,\r\n          lastName: err.response.data.lastName,\r\n        });\r\n      });\r\n    }}, [match.params]);\r\n     \r\n  \r\n  const ActivationSuccess=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName +\" \"+lastName}</strong></p>\r\n        <div>  <CheckCircleRoundedIcon \r\n              style = {{ color: green[600],paddingTop:\"0.3rem\" }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > Your account has been successfully verified. Click below to create your profile</span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n              variant=\"contained\"\r\n              className= \"loginbtn\"\r\n              onClick={event =>  history.push('/profile-setup/'+token1)}\r\n             \r\n          >\r\n            Create Profile\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n   const ActivationFailure=()=>(\r\n<div> \r\n  <Grid container > \r\n <Grid item xs={1} sm={3} md={4}></Grid>\r\n  <Grid item xs={1} sm={3} md={4}> \r\n  \r\n      <p><strong>Hi {firstName+\" \"+lastName}</strong></p>\r\n        <div>  <CancelRoundedIcon \r\n              style = {{ color: red[600]  }}/>  \r\n           <span style ={{fontSize:\"1.3rem\"}} > <strong>{errorMessage}</strong> </span></div>\r\n      <Button\r\n             style={{ \r\n               color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\" }}\r\n            variant=\"contained\"\r\n             className= \"loginbtn\"\r\n            onClick={event =>  history.push('/signup')}\r\n             \r\n          >\r\n               Try  Again   \r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={1} sm={3} md={4}></Grid>\r\n          </Grid>\r\n   </div>\r\n\r\n\r\n  );\r\n  return (\r\n  <div>\r\n        <PageTitle name= {\"Activation\"}/>\r\n       {errorMessage && ( ActivationFailure())}\r\n       {successMsg && (ActivationSuccess())}\r\n  </div>)\r\n      }\r\nexport default Activate;","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\forgotPassword.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\LogIn.js",["226","227","228","229","230","231"],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\resetPassword.js",["232"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from 'clsx';\r\nimport accountService from \"../../../services/accountService\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  InputLabel,\r\n  FormControl,\r\n  Input,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n import { grey, cyan,indigo} from '@material-ui/core/colors';\r\nimport isEmpty from \"validator/lib/isEmpty\";\r\nimport equals from \"validator/lib/equals\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n const useStyles = makeStyles((theme) => ({\r\n  textfield: {\r\n     margin: theme.spacing(1),\r\n  },\r\n   margin:{\r\n     marginTop: \"1.2rem\"\r\n   } \r\n}));\r\n\r\nconst ResetPassword = ({ match }) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [values, setValues] = useState({\r\n    token: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    errorMessage: \"\",\r\n    successMsg: \"\",\r\n    showPassword: false,\r\n    showPassword1: false,\r\n    loading: false,\r\n  });\r\n  \r\n   const {\r\n    token,\r\n    password,\r\n    confirmPassword,\r\n    errorMessage,\r\n    successMsg,\r\n    loading,\r\n  } = values;\r\n\r\n    useEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n    const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   const handleChange = (prop) => (event) => {\r\n    setValues({\r\n      ...values,\r\n      [prop]: event.target.value,\r\n      errorMessage: \"\",\r\n      successMsg: \"\",\r\n    });\r\n  };\r\n const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n  const handleClickShowConfirmPassword = () => {\r\n    setValues({ ...values, showPassword1: !values.showPassword1 });\r\n  };\r\n   const ResetPasswordBtn = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      isEmpty(password) ||\r\n      isEmpty(confirmPassword)\r\n    ) {\r\n      setValues({ ...values, errorMessage: \"All fields are required\" });\r\n    } else if (!equals(password, confirmPassword)) {\r\n      setValues({ ...values, errorMessage: \"Passwords do not match\" });\r\n    } else {\r\n  \r\n     \r\n      setValues({ ...values, loading: true });\r\n     accountService.resetPassword( { newPassword: password, resetPasswordLink: token})\r\n        .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setValues({\r\n            ...values,\r\n             password: \"\",\r\n            confirmPassword: \"\",\r\n            loading: false,\r\n            errorMessage: err.response.data.errorMessage,\r\n          });\r\n        });\r\n    }\r\n  };\r\n     \r\n  const ResetPasswordForm=()=>(\r\n      \r\n    <Grid container >\r\n      <Grid item xs={1} sm={3} md={4}></Grid>\r\n        <Grid item xs={10} sm ={6} md={4}>\r\n          <Paper style={{padding: '30px 50px'}} >\r\n          <Button  \r\n            className= \"loginbtn\"\r\n            href=\"https://mail.google.com/mail/u/0/#inbox\"\r\n            color=\"primary\"\r\n           style={{marginBottom:\"2rem\" ,paddingLeft:\"0rem\",color:indigo[800]  }}\r\n          >\r\n           <ArrowBackIcon style={{fontWeight:\"bold\",marginRight:\"0.3rem\"}}/> Go Back\r\n          </Button>\r\n             <FormControl className={clsx( classes.textField)} fullWidth>\r\n         <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> New Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n                    <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n              \r\n          startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <LockIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n        \r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n         \r\n          <FormControl className={clsx(classes.margin, classes.textField)} fullWidth>\r\n                 <InputLabel htmlFor=\"standard-adornment-password\"> \r\n             <Typography variant=\"headline\" style={{fontWeight:\"bold\",fontStyle:\"italic\"  }}> Confirm Password</Typography>\r\n             <Typography variant=\"headline\" style={{color:\"red\",marginLeft:\"0.4rem\" }}>*</Typography>\r\n         </InputLabel>\r\n           <Input\r\n            id=\"standard-adornment-confirmPassword\"\r\n            type={values.showPassword1 ? 'text' : 'password'}\r\n            name=\"confirmPassword\"\r\n            value={values.confirmPassword}\r\n            onChange={handleChange('confirmPassword')}\r\n             startAdornment= {\r\n            <InputAdornment position=\"start\">\r\n             <VpnKeyIcon style={{ color: grey[600] }}/>\r\n            </InputAdornment>\r\n          }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowConfirmPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword1 ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n    \r\n         <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n              }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={ResetPasswordBtn}\r\n          >\r\n            Reset Password \r\n          </Button>\r\n          {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n           </Paper>\r\n        </Grid>\r\n     <Grid item xs={1} sm={3} md={4}></Grid>\r\n    </Grid>\r\n       \r\n  );   \r\n  return (\r\n  <div>\r\n        {loading && <LinearBuffer />}\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={4000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={4000} />\r\n      )}\r\n       <PageTitle name= {\"Reset Password\"}/>\r\n      {ResetPasswordForm()}\r\n      \r\n  </div>)\r\n      }\r\nexport default ResetPassword;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\notFound.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Users.js",["233","234","235","236","237","238","239","240","241","242","243"],"import React, { useState, useEffect ,useRef,useContext} from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n//import Avatar from \"@material-ui/core/Avatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import socketIOClient from \"socket.io-client\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport userservice from \"../../services/UserService\";\r\nimport groupservice from \"../../services/GroupService\";\r\nimport { isAuthenticated, logout } from \"../FrontendComponents/clientStorages/auth\";\r\nimport {SocketContext} from '../../context/SocketContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./users.css\"\r\n//import commonUtilites from \"../Utilities/common\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n    \r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(0, 3, 0, 1),\r\n  },\r\n  listText:{\r\n    fontSize : '1.3rem',\r\n    fontFamily : 'Roboto'\r\n  }\r\n  ,listText1:{\r\n    fontSize : '1rem',\r\n    fontFamily : 'Roboto',\r\n    color : 'gray'\r\n  }\r\n  , listBtn:{\r\n    backgroundColor: 'rgb(0, 172, 193)',\r\n    color : 'white',\r\n    fontSize : '1rem'\r\n  }\r\n}));\r\n\r\nconst Users = (props) => {\r\n  const classes = useStyles();\r\n  const [users, setUsers] = useState([]);\r\n  const [newUser, setNewUser] = useState(null);\r\n  const [show, setShow] = React.useState(false)\r\n  let count = useRef(0);\r\n  let userId = useRef(\"\");\r\n  let name = useRef(\"\")\r\n  let userslist = useRef([])\r\n  let history = useHistory();\r\n  let recipients = []\r\n  const clientSocket = useContext(SocketContext);\r\n  //const getUsers = useGetUsers();\r\n  const getData = () => {\r\n    userId.current= localStorage.getItem(\"userId\")\r\n    console.log(userId.current)\r\n    userservice.getUsers()\r\n   .then((data) => {\r\n        userslist.current = data\r\n        userslist.current = userslist.current.filter((u)=>{\r\n          return u.email !== userId.current\r\n        })\r\n        setUsers(userslist.current ); \r\n        console.log(\"contacts\",users)\r\n  })\r\n   .catch((err) => console.log(\"This is err\"+ err));\r\n}\r\n  useEffect(()=>{\r\n    getData()\r\n    console.log(clientSocket)\r\n    if(clientSocket!==undefined)\r\n      clientSocket.emit(\"adduser\",{id:clientSocket.id, name: userId.current})\r\n  },[]);\r\n\r\n    const userClickHandler = (u) =>{\r\n        let email = u.email\r\n        let fname= u.firstName\r\n        let lname = u.lastName\r\n        let lang = u.langPreference\r\n        let profileUrl = u.profileImg\r\n        let x = fname+' '+lname\r\n        localStorage.setItem(\"recName\",x)\r\n        localStorage.setItem(\"recLang\",lang)\r\n        localStorage.setItem(\"profileUrl\",profileUrl)\r\n        history.push('/chat/'+email); \r\n        \r\n  }\r\n\r\n  const viewButtonHandler = ()=>{\r\n    history.push('/mychats/'); \r\n  }\r\n    const showButtons = ()=>{\r\n      setShow(true)\r\n    }\r\n\r\n    const addGroupMember = (e)=>{\r\n          console.log(\"target\",e)\r\n          count.current = count.current+1\r\n          console.log(\"count\",count)\r\n        recipients.push(e)\r\n        console.log(\"Rec\",recipients)\r\n    }\r\n\r\n    const createGroup = () =>{\r\n      if(recipients.length > 1){\r\n        let groupMembers = recipients\r\n        let groupName = name.current\r\n        let groupId = uuidv4();\r\n        let createdBy = userId.current\r\n        groupservice.createGroup({groupName,groupId,createdBy,groupMembers})\r\n              .then((data)=>{\r\n                  console.log(\"Created successfully\",data);\r\n                  history.push('/groupchat'+'/'+groupId)\r\n                  //getData();\r\n                })\r\n              .catch((err)=>{console.log(\"Some Err\")})\r\n        //history.push('/chat/'+address);\r\n        //history.push('/groupchat'+'/'+name.current+'/'+address)\r\n      }\r\n    }\r\n\r\n    const nameHandler = (e) =>{\r\n      name.current = e.target.value\r\n      console.log(name.current)\r\n    }\r\n    const handleLogOut = (evt) => {\r\n      logout(() => {\r\n        history.push(\"/login\");\r\n      });\r\n    };\r\n\r\n  /* useEffect(() => {\r\n    getUsers().then((res) => setUsers(res));\r\n  }, [newUser]); */\r\n\r\n  /* useEffect(() => {\r\n    const socket = socketIOClient(process.env.REACT_APP_API_URL);\r\n    socket.on(\"users\", (data) => {\r\n      setNewUser(data);\r\n    });\r\n  }, []); */\r\n\r\n  return (\r\n    <div>\r\n     {/*<Button onClick={showButtons} variant=\"contained\" color=\"primary\">\r\n        Create Group\r\n      </Button>*/}\r\n      <button\r\n        className=\"btn text-decoration-none btn-link   pl-0\"\r\n        style={{textDecoration:\"none\"}}\r\n        onClick={handleLogOut}\r\n      >\r\n        <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i> Logout\r\n      </button>\r\n      <h3 className=\" text-center\">Contacts</h3>\r\n      <List className={classes.list}>\r\n      {users && (\r\n        <React.Fragment>\r\n          {users.map((u) => (\r\n            <div>\r\n            <ListItem\r\n              className={classes.listItem}\r\n              button\r\n            >\r\n             <ListItemAvatar>\r\n             <Avatar className={classes.globe}>\r\n                <FaceIcon/>\r\n              </Avatar>\r\n            </ListItemAvatar> \r\n              <ListItemText onClick={() => userClickHandler(u)}>\r\n                <Typography className={classes.listText}>{u.firstName}&nbsp;{u.lastName}</Typography>\r\n                <Typography className={classes.listText1}>{u.email}</Typography>\r\n              </ListItemText>\r\n              {/* show ? \r\n              <Button onClick = {() => addGroupMember(u.email)} variant=\"contained\" color=\"primary\">\r\n                Add\r\n              </Button>\r\n              : null */}\r\n              <Button variant=\"contained\" className={classes.listBtn}\r\n              onClick={viewButtonHandler}>View</Button>\r\n            </ListItem>\r\n            <Divider/> \r\n            \r\n            </div>\r\n          ))}\r\n          {/* show ? \r\n              <div>\r\n                <TextField onChange = {nameHandler} id=\"standard-basic\" label=\"Group Name\" />\r\n                <Button onClick = {createGroup} variant=\"contained\" color=\"primary\">\r\n                  Create\r\n                </Button>\r\n                </div>\r\n          : null*/ }\r\n          \r\n        </React.Fragment>\r\n      )}\r\n    </List>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Users;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SignUp.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\AllChats.js",["244","245","246","247","248","249","250","251"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport { MyChatsContext } from \"../../context/MyChatsContext\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\nimport io from \"socket.io-client\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PageTitle from \"../FrontendComponents/components/pageTitle\";\r\nimport Header from \"../FrontendComponents/components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\n\r\nimport \"./chat.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n}));\r\nconst AllChats = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { clientSocket } = useContext(SocketContext);\r\n  let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n  const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n  let emails = useRef([]);\r\n  const [usersData, setData] = useState({uData:[]});\r\n  const [lastMsg, setLastMsg] = useState({\r\n    msgs: [],\r\n    msgId: [],\r\n    emails: [],\r\n    types: [],\r\n    senders: [],\r\n    time : []\r\n  });\r\n  const [payload, setPayload] = useState()\r\n  //const [recipients, setRecipients] = useState([])\r\n  let roomId = useRef();\r\n  let count = useRef(0);\r\n  let notPresent = useRef(0);\r\n  roomId.current = \"mychats/\" + props.match.params.id;\r\n  let recData = [];\r\n  let recMsgs = [];\r\n  let dummy = [];\r\n  let clientSocket1 = useRef()\r\n\r\n  window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n        \r\n      });\r\n      return s;\r\n    })\r\n  };\r\n\r\n  const getRecData = (uId) => {\r\n    emails.current = []\r\n    lastMsg.msgs = []; lastMsg.msgId = []; lastMsg.emails = []; \r\n    lastMsg.types = []; lastMsg.senders = []; lastMsg.time = []; \r\n    chatservice\r\n      .getChatRecipients(uId)\r\n      .then((data) => {\r\n        if (data.length > 0) {\r\n          //console.log(\"emails before sorting\", data);\r\n          emails.current = data.sort();\r\n          emails.current = Array.from(new Set(emails.current));\r\n          console.log(\"emails after sorting\", emails.current);\r\n          userservice\r\n            .getUserByEmail({ userArray: emails.current })\r\n            .then((datafromdb) => {\r\n              recData = datafromdb;\r\n              //console.log(\"recdata\", recData);\r\n              setData((d) => {\r\n                d.uData = recData;\r\n                return d;\r\n              });\r\n            });\r\n          // let index = 0\r\n          emails.current.forEach((r, index) => {\r\n            chatservice\r\n              .getLastMsg(uId, r)\r\n              .then((data1) => {\r\n                //console.log(\"data1\", data1);\r\n                if(data1){\r\n                  setLastMsg((msg) => {\r\n                    if (\r\n                      msg.msgs.length >= 1 &&\r\n                      msg.emails.length >= 1 &&\r\n                      msg.types.length >= 1 &&\r\n                      msg.msgId.length >= 1 &&\r\n                      msg.senders.length >= 1\r\n                    ) {\r\n                      let newMsg = [...msg.msgs];\r\n                      let newR = [...msg.emails];\r\n                      let newT = [...msg.types];\r\n                      let id = [...msg.msgId];\r\n                      let sender = [...msg.senders];\r\n                      let newTime = [...msg.time]\r\n                      newMsg = [...newMsg, data1.lastMsg];\r\n                      newR = [...newR, r];\r\n                      newT = [...newT, data1.type];\r\n                      id = [...id, data1.msgId];\r\n                      sender = [...sender, data1.sender];\r\n                      newTime = [...newTime, data1.time]\r\n                      \r\n                      return {\r\n                        ...msg,\r\n                        msgs: newMsg,\r\n                        msgId: id,\r\n                        emails: newR,\r\n                        types: newT,\r\n                        senders: sender,\r\n                        time : newTime\r\n                      };\r\n                    } else {\r\n                      console.log(\"first: \", data1.lastMsg, r);\r\n                      let myMsg =  {\r\n                        msgs: [data1.lastMsg],\r\n                        msgId: [data1.msgId],\r\n                        emails: [r],\r\n                        types: [data1.type],\r\n                        senders: [data1.sender],\r\n                        time : [data1.time]\r\n                      };\r\n                      console.log(\"MY MSG: \",myMsg)\r\n                      return myMsg\r\n                    }\r\n                  });\r\n                }\r\n\r\n              })\r\n              .catch((err) => console.log(err));\r\n          });\r\n\r\n          //setLastMsg(recMsgs)\r\n\r\n          //console.log(\"recipients\",recipients)\r\n        } else console.log(\"no data\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    count.current = 0\r\n    if (clientSocket) {\r\n      clientSocket.emit(\r\n        \"myChatsRoom\",\r\n        { myChatsRoom: roomId.current },\r\n        ({ error, room }) => {\r\n          if (!error) {\r\n            console.log(\"joined room with id\", room);\r\n          } else {\r\n            console.log(\"error joining room\", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    //console.log(\"in useEffect 1\");\r\n    getRecData(uId);\r\n    //console.log(\"usersData 1\", usersData);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    if (clientSocket) {\r\n      clientSocket.on(\"newRecipient\", (payload) => {\r\n        setPayload((p)=>{\r\n          return p = payload\r\n        })\r\n      })\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    console.log(\"IN PAYLOAD\")\r\n    if (payload) {\r\n      console.log(\"payload\",payload)\r\n        let index;\r\n\r\n        if (usersData.uData.length !== 0 && lastMsg.msgs.length !== 0) {\r\n          console.log(\"check:\", usersData);\r\n          count.current = 0;\r\n          /* present.current =0\r\n        notPresent.current =0 */\r\n          usersData.uData.forEach((u, indx) => {\r\n            //console.log(\"emails from map\", payload.message.from, u.email);\r\n            if (payload.message.from === u.email) {\r\n              index = indx;\r\n              console.log(\"index: \", index);\r\n              count.current = count.current + 1;\r\n              console.log(\"count: \", count.current)\r\n              \r\n            } else {\r\n              //count.current.current = notPresent.current + 1 ;\r\n              console.log(\"false\");\r\n            }\r\n          });\r\n          if (count.current !== 0) {\r\n            console.log(\"before setRecArray\",lastMsg.msgs)\r\n            console.log(\"in setRecArray\",count.current);\r\n            setRecArray(\r\n              index,\r\n              payload.message\r\n            );\r\n          } else if (count.current === 0) {\r\n            setNewRecipient(\r\n              payload.message\r\n            );\r\n            console.log(\"in setNewArray\",count.current);\r\n          } else console.log(\"nothing \", count.current);\r\n        } else {\r\n          console.log(\"usersData 1\", lastMsg);\r\n        }\r\n      //});\r\n    }\r\n  }, [payload]);\r\n\r\n  const setRecArray = (index, message) => {\r\n    //if(lastMsg)\r\n    console.log(\"Last msg array and index\",lastMsg.msgs, index )\r\n    let items = []\r\n    items = [...lastMsg.msgs];\r\n    let mtypes = [...lastMsg.types]\r\n    let mTime = [...lastMsg.time]\r\n    console.log(\"items before change\", items);\r\n    items[index] = message.messageBody;\r\n    mtypes[index] = message.type\r\n    mTime[index] = message.time\r\n    console.log(\"items\", items);\r\n    setLastMsg((m) => {\r\n      return { ...m, msgs: items,types: mtypes, time: mTime };\r\n      //}\r\n    });\r\n  };\r\n\r\n  const setNewRecipient = (message) => {\r\n    console.log(\"in new chattt\",message.type)\r\n    userservice\r\n      .getUserByEmail({ userEmail: message.from })\r\n      .then((data) => {\r\n        console.log(\"data\",data);\r\n        setData((d) => {\r\n          let obj = { email: message.from, gender : data[0].gender, id : data[0]._id, \r\n                      name : data[0].firstName + ' '+ data[0].lastName,\r\n                      img : data[0].profileImg }\r\n          let uData = [...d.uData]\r\n          uData = [...uData,obj]\r\n          console.log(\"u\",uData)\r\n          return { ...d, uData}\r\n        });\r\n      })\r\n      if(usersData.uData.length !==0){\r\n        console.log(\"not first recipient\")\r\n        /* setLastMsg((msg) => {\r\n          \r\n            let newMsg = [...msg.msgs];\r\n            let newR = [...msg.emails];\r\n            let newT = [...msg.types];\r\n            let sender = [...msg.senders];\r\n            newMsg = [...newMsg, msg];\r\n            newR = [...newR, rec];\r\n            newT = [...newT, type];\r\n            sender = [...sender, rec];\r\n\r\n            let myMsg = {\r\n              ...msg,\r\n              msgs: newMsg,\r\n              emails: newR,\r\n              types: newT,\r\n              senders: sender,\r\n            };\r\n            console.log(\"My new Msg\",myMsg)\r\n            return myMsg\r\n          \r\n        });  */\r\n        setLastMsg({msgs: [...lastMsg.msgs,message.messageBody], emails: [...lastMsg.emails,message.from], \r\n                  types:[...lastMsg.types,message.type], senders:[...lastMsg.senders,message.from],\r\n                  time : [...lastMsg.time,message.time ]})\r\n      }\r\n      else{\r\n        console.log(\"first recipient\")\r\n        setLastMsg({msgs: [message.messageBody], emails: [message.from], \r\n                    types:[message.type], senders:[message.from], time:[message.time]})\r\n      }\r\n      \r\n   \r\n      /*chatservice\r\n      .getLastMsg(uId, rec)\r\n      .then((data1) => {\r\n        console.log(\"data new\", data1);\r\n        \r\n          setLastMsg((msg) => {\r\n          let newMsg = [...msg.msgs];\r\n          let newR = [...msg.emails];\r\n          let newT = [...msg.types];\r\n          let id = [...msg.msgId];\r\n          let sender = [...msg.senders];\r\n          newMsg = [...newMsg, data1.lastMsg];\r\n          newR = [...newR, rec];\r\n          newT = [...newT, data1.type];\r\n          id = [...id, data1.msgId];\r\n          sender = [...sender, data1.sender];\r\n          //console.log(\"newMsg: \", newMsg, newR, newT,id,sender);\r\n          return {\r\n            ...msg,\r\n            msgs: newMsg,\r\n            msgId: id,\r\n            emails: newR,\r\n            types: newT,\r\n            senders: sender,\r\n          };\r\n    });\r\n\r\n\r\n      }).catch((err)=>console.log(err))\r\n      */\r\n    \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <PageTitle name={\"My Chats\"} />\r\n\r\n      {console.log(\"in return\")}\r\n      {usersData.uData.length !== 0  && lastMsg.msgs.length !==0? (\r\n        <Paper md={8} xs={4} className={classes.mygrid}>\r\n          <SingleChat recipients={usersData.uData} lastMsg={lastMsg} />\r\n        </Paper>\r\n      ) : (\r\n        <h5 style={{ textAlign: \"center\" }}>No Chats Yet!</h5>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AllChats;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\Chat.js",["252","253","254","255","256","257","258","259","260"],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\userDashboard.js",["261","262","263","264","265","266","267","268","269"],"import React, { useEffect, useState,useContext,useRef } from \"react\";\r\nimport Header from \"./Header\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\n//import {MyChatsContext} from '../../../context/MyChatsContext';\r\nimport io from \"socket.io-client\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {ChatContext} from '../../../context/ChatContext';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport chatservice from '../../../services/ChatService'\r\n //import { ToastContainer } from 'react-toastify';\r\n//import Toast from 'react-bootstrap/Toast' \r\nimport '../../ChatComponents/chat.css'\r\n\r\n\r\nconst UserDashboard = ({uuId}) => {\r\n  //const {chatRecipients,setRecipients,getRecData} = useContext(MyChatsContext);\r\n  const [Fname, setFname] = useState(\"\");\r\n  const [Lname, setLname] = useState(\"\");\r\n  const [obj, setObj] = useState({})\r\n  const myId= isAuthenticated()._id;\r\n  const [count,setCount]= useState(0)\r\n  let showBtn = useRef(0)\r\n  let userEmail = useRef()\r\n  let history = useHistory()\r\n  userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n  console.log(userEmail)\r\n  const {clientSocket,setSocket,messageEvent,roomJoin,friendReq} = useContext(SocketContext);\r\n  let clientSocket1 = useRef()\r\n  let elem= null;\r\n   \r\n   window.onload = () => {\r\n     friendReq()\r\n     messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n        \r\n      });\r\n      return s;\r\n    })\r\n  };\r\n\r\n  useEffect(()=>{\r\n    chatservice.offlinemessages(isAuthenticated().email)\r\n        .then((res)=>{\r\n          console.log(res.info)\r\n            if(res.count > 0){\r\n              setObj((o)=>{\r\n                o = {sender: res.info.sender, receiver: res.info.receiver}\r\n                return o\r\n              })\r\n              //obj = {sender: res.info.sender, receiver: res.info.receiver}\r\n              console.log(\"obj\",obj)\r\n              setCount((c)=>{\r\n                c = res.count\r\n                return c\r\n              })\r\n       \r\n            }\r\n        })\r\n        .catch((err)=>console.log(err))\r\n\r\n  },[])\r\n\r\n  useEffect (()=>{\r\n    //getUnreadMsgs(isAuthenticated().email)\r\n    setFname(isAuthenticated().firstName);\r\n    setLname(isAuthenticated().lastName);\r\n    console.log(history)\r\n   },[])\r\n  \r\n   useEffect(()=>{\r\n    if(clientSocket!==undefined){\r\n        console.log(clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }\r\n   },[],[clientSocket])\r\n\r\n   useEffect (()=>{\r\n    //friendReq()\r\n     messageEvent()\r\n     //console.log(\"msg event\")\r\n   },[]);\r\n\r\n   useEffect (()=>{\r\n    roomJoin(myId)\r\n  },[]);\r\n\r\n  return <div>\r\n    <Header/>\r\n   {/* <ToastContainer/> */}\r\n     \r\n     <Button className= \"loginbtn\"\r\n             style={{marginLeft:\"20rem\" ,display:\"block\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-contacts/'+myId)}> Add New friend</Button>\r\n    <Button className= \"loginbtn\"\r\n             style={{marginLeft:\"20rem\",marginTop:\"2rem\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-my-friends/'+myId)}> My Friends</Button>\r\n    {\r\n    obj.sender !== undefined ?\r\n        obj.sender.forEach((o)=>{\r\n            o !== userEmail.current ?\r\n            \r\n            showBtn.current = showBtn.current + 1\r\n          :\r\n          showBtn.current = 0\r\n          })\r\n    :\r\n    null\r\n    }\r\n    \r\n        {\r\n          showBtn.current >= 1 ?\r\n            <Badge badgeContent={count} color=\"secondary\">\r\n              <ChatIcon className='chaticon'\r\n              onClick={event =>  history.push('/mychats/'+myId)}\r\n              color = \"primary\"\r\n              />  \r\n            </Badge>\r\n          :\r\n        \r\n          <ChatIcon className='chaticon'\r\n              onClick={event =>  history.push('/mychats/'+myId)}\r\n              color = \"primary\"\r\n              />  \r\n            \r\n        }    \r\n    \r\n    \r\n    {/* <Button className= \"loginbtn\"\r\n             style={{marginLeft:\"20rem\",marginTop:\"2rem\",display:\"block\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/mychats/'+myId)}> My Chats</Button> */}\r\n            {/* <ChatIcon onClick={event =>  history.push('/mychats/'+myId)}/> */}\r\n    <Button className= \"loginbtn\"\r\n             style={{marginLeft:\"20rem\",marginTop:\"2rem\",display:\"block\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/update-my-profile-setup/'+myId)}>Update Profile</Button>\r\n      \r\n    </div>\r\n};\r\n\r\nexport default UserDashboard;","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\profileSetup.js",["270","271","272"],"import React, { useState, useEffect } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst ProfileSetup = ( {match}) => {\r\n    const classes = useStyles();\r\n      let history = useHistory();\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n    const [values, setValues] = useState({\r\n    img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n    language:\"\",\r\n    token:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language,token, successMsg, errorMessage,infoMessage, loading } = values;\r\nuseEffect(() => {\r\n        let token = match.params.token\r\n        if(token) {\r\n            setValues({...values, token})\r\n        }\r\n    }, [])\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       const data = new FormData();\r\n      data.append(\"file\", imageSrc);\r\n      axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n          })\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n   \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data)\r\n         .then(async (response) => {\r\n         setValues({ ...values , errorMessage :\"\", successMsg:\"response.data.successMessage\"})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"POST\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst SetProfile =()=>{\r\n  accountService.profileSetup({profileImg: img, langPreference: language, token})\r\n .then((response) => {\r\n          setValues({\r\n            ...values,\r\n            img: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\r\n            language:\"\",\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n                   <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div>\r\n                 <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div> \r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.label === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => {\r\n                      console.log(e)\r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1.5rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={SetProfile}\r\n            \r\n          >\r\n            Set Profile\r\n          </Button>\r\n                   {successMsg &&  <Button\r\n                     style={{  \r\n                     backgroundColor:grey[500],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"1rem\" , \r\n              marginTop: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"outline\"\r\n            fullWidth\r\n            onClick={event =>  history.push('/login')}\r\n                  >\r\n                      Login\r\n                  </Button>}\r\n      </div> \r\n         \r\n     \r\n \r\n\r\n \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <h3 className=\"modal-title\" id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n     <PageTitle name= {\"Profile Setup\"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default ProfileSetup;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\updateProfileSetup.js",["273","274","275","276"],"import React, { useState, useEffect,useContext, useRef } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport axios from 'axios';\r\nimport accountService from \"../../../services/accountService\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport Webcam from \"react-webcam\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\n\r\nconst UpdateProfileSetup = ( ) => {\r\n    const classes = useStyles();\r\n    const myId=isAuthenticated()._id;\r\n    let uId = JSON.parse(localStorage.getItem(\"user\")).email;\r\n    const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n    let clientSocket1 = useRef()\r\n    const webcamRef = React.useRef(null);\r\n    const [capturedPic, setCapturedPic]=React.useState(false);\r\nconst options = [\r\n  { label: 'Afrikaans',value:'af' },\r\n  { label: 'Albanian',value:'sq'},\r\n  { label: 'Amharic',value:'am'},\r\n  { label: 'Arabic',value:'ar'},\r\n  { label: 'Armenian',value:'hy'},\r\n  { label: 'Azerbaijani',value:'az'},\r\n  { label: 'Basque',value:'eu'},\r\n  { label: 'Belarusian',value:'be'},\r\n  { label: 'Bengali',value:'bn'},\r\n  { label: 'Bosnian',value:'bs'},\r\n  { label: 'Bulgarian',value:'bg'},\r\n  { label: 'Catalan',value:'ca'},\r\n  { label: 'Cebuano',value:'ceb'},\r\n  { label: 'Chichewa',value:'ny'},\r\n  { label: 'Chinese',value:'zh-cn'},\r\n  { label: 'Corsican',value:'co'},\r\n  { label: 'Croatian',value:'hr'},\r\n  { label: 'Czech',value:'cs'},\r\n  { label: 'Danish',value:'da'},\r\n  { label: 'Dutch',value:'nl'},\r\n  { label: 'English',value:'en'},\r\n  { label: 'Esperanto',value:'eo'},\r\n  { label: 'Estonian',value:'et'},\r\n  { label: 'Filipino',value:'tl'},\r\n  { label: 'Finnish',value:'fi'},\r\n  { label: 'French',value:'fr'},\r\n  { label: 'Danish',value:'da'},\r\n  {label: 'Frisian',value: \"fy\"},\r\n  {label: 'Galician',value: \"gl\"},\r\n  {label: 'Georgian',value: \"ka\"},\r\n  {label: 'German',value: \"de\"},\r\n  {label: 'Greek',value: \"el\"},\r\n  {label: 'Gujarati',value: \"gu\"},\r\n  {label: 'Haitian creole',value: \"ht\"},\r\n  {label:'Hausa',value: \"ha\"},\r\n  {label:'Hawaiian',value: \"haw\"},\r\n  {label:'Hebrew',value: \"iw\"},\r\n  {label: 'Hindi',value: \"hi\"},\r\n  {label:'Hmong',value: \"hmn\"},\r\n  {label:'Hungarian',value: \"hu\"},\r\n  {label:'Icelandic',value: \"is\"},\r\n  {label:'Igbo',value: \"ig\"},\r\n  {label:'Indonesian',value: \"id\"},\r\n  {label:'Irish',value: \"ga\"},\r\n  {label:'Italian',value: \"it\"},\r\n  {label:'Japanese',value: \"ja\"},\r\n  {label:'Javanese',value: \"jw\"},\r\n  {label:'Kannada',value: \"kn\"},\r\n  {label:'Kazakh',value: \"kk\"},\r\n  {label:'Khmer',value:'km'},\r\n  {label:'Korean',value:'ko'},\r\n  {label:'Kurdish',value:'ku'},\r\n  {label: 'Kyrgyz',value: \"ky\"},\r\n  {label: 'Lao',value: \"lo\"},\r\n  {label: 'Latin',value: \"la\"},\r\n  {label: 'Latvian',value: \"lv\"},\r\n  {label: 'Lithuanian',value: \"lt\"},\r\n  {label: 'Luxembourgish',value: \"lb\"},\r\n  {label: 'Macedonian',value: \"mk\"},\r\n  {label:'Malagasy',value: \"mg\"},\r\n  {label:'Malay',value: \"ms\"},\r\n  {label:'Malayalam',value: \"ml\"},\r\n  {label: 'Maltese',value: \"mt\"},\r\n  {label:'Maori',value: \"mi\"},\r\n  {label:'Marathi',value: \"mr\"},\r\n  {label:'Mongolian',value: \"mn\"},\r\n  {label:'Myanmar (burmese)',value: \"my\"},\r\n  {label:'Nepali',value: \"ne\"},\r\n  {label:'Norwegian',value: \"no\"},\r\n  {label:'Odia',value: \"or\"},\r\n  {label:'Pashto',value: \"ps\"},\r\n  {label:'Persian',value: \"fa\"},\r\n  {label:'Polish',value: \"pl\"},\r\n  {label:'Portuguese',value: \"pt\"},\r\n  {label:'Punjabi',value: \"pa\"},\r\n  {label :'Romanian', value:\"ro\"},\r\n  {label :'Russian', value:\"ru\"},\r\n  {label:'Samoan',value: \"sm\"},\r\n  {label:'Scots gaelic',value: \"gd\"},\r\n  {label:'Serbian',value: \"sr\"},\r\n  {label:'Sesotho',value: \"st\"},\r\n  {label:'Shona',value: \"sn\"},\r\n  {label:'Sindhi',value: \"sd\"},\r\n  {label:'Sinhala',value: \"si\"},\r\n  {label:'Slovak',value: \"sk\"},\r\n  {label:'Slovenian', value:\"sl\"},\r\n  {label:'Somali', value:\"so\"},\r\n  {label:'Spanish', value:'es' },\r\n  {label:'Sundanese',value: \"su\"},\r\n  {label:'Swahili',value: \"sw\"},\r\n  {label:'Swedish',value: \"sv\"},\r\n  {label:'Tajik',value: \"tg\"},\r\n  {label:'Tamil',value: \"ta\"},\r\n  {label:'Telugu',value: \"te\"},\r\n  {label:'Thai',value: \"th\"},\r\n  {label:'Turkish',value: \"tr\"},\r\n  {label :'Ukrainian', value:\"uk\"},\r\n  {label:'Urdu',value: \"ur\"},\r\n  {label :'Uyghur', value:\"ug\"},\r\n  {label:'Uzbek', value:'uz' },\r\n  {label:'Vietnamese',value: \"vi\"},\r\n  {label :'Welsh', value:\"cy\"},\r\n  {label:'Xhosa',value: \"xh\"},\r\n  {label :'Yiddish', value:\"yi\"},\r\n  {label:'Yoruba', value:'yo' },\r\n  {label:'Zulu',value: \"zu\"},\r\n  \r\n];\r\n \r\n    const [values, setValues] = useState({\r\n    img: \"\",\r\n    language:\"\",\r\n    errorMessage: \"\",\r\n    successMsg:\"\",\r\n    infoMessage:\"\",\r\n    loading: false,\r\n  });\r\n  const { img,language, successMsg, errorMessage,infoMessage, loading } = values;\r\n\r\n  window.onload = () => {\r\n    friendReq()\r\n    messageEvent()\r\n    let did = JSON.parse(localStorage.getItem('user'))._id\r\n    roomJoin(did)\r\n    clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n    setSocket((s)=>{\r\n      s = clientSocket1\r\n      s.on('connect' , () => {\r\n        console.log(\"connected\",s.id);\r\n        s.emit(\"adduser\",{id:s.id, name: uId})\r\n        \r\n      });\r\n      return s;\r\n    })\r\n  };\r\n\r\n useEffect(() => {\r\n     accountService.getMyAccount(myId).then((data) => {\r\n     setValues({ ...values , img: data.profileImg, language:data.langPreference});\r\n    }).catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n  }, []);\r\n\r\nconst resizeFile = (file) => new Promise(resolve => {\r\n    Resizer.imageFileResizer(file, 300, 300, 'JPEG', 100, 0,\r\n    uri => {resolve(uri);},'base64' );\r\n});\r\nconst capture =  React.useCallback(() => {\r\n   try{\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n       setValues({...values, infoMessage: \"Picture Captured\"}); \r\n       setCapturedPic(true);\r\n       const data = new FormData();\r\n       data.append(\"file\", imageSrc);\r\n       axios.post(\"http://127.0.0.1:5000/webcam-face-detection\",data)\r\n         .then(async (response) => {\r\n          setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n           setValues({...values, infoMessage: \"Loading.... \"});\r\n           data.append(\"file\", imageSrc);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n          fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } ).then(response => response.json())\r\n      .then(data =>   setValues({ ...values , img: data.url}))\r\n      .catch(err => console.error('Error:', err));;   \r\n           }\r\n        )\r\n         }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n    \r\n    },\r\n    [webcamRef]\r\n  );\r\n const uploadImage = async (e) => {\r\n  try {\r\n           const imageFile = e.target.files[0];\r\n           const data = new FormData();\r\n           data.append(\"file\", imageFile);\r\n           axios.post(\"http://127.0.0.1:5000/\",data).\r\n           then(async (response) => {\r\n           setValues({ ...values , errorMessage :\"\", successMsg:response.data.successMessage})\r\n            const compressedImage = await resizeFile(imageFile);\r\n           setValues({...values, infoMessage: \"Loading....\"});\r\n           data.append(\"file\", compressedImage);\r\n           data.append(\"upload_preset\", \"TalkSee\");\r\n           const res = await fetch(\"https://api.cloudinary.com/v1_1/fariha31/image/upload\",\r\n              { method: \"PUT\",\r\n                body: data,\r\n             } );   \r\n           const file =  await res.json();\r\n           setValues({ ...values , img: file.secure_url});\r\n        })\r\n        .catch((err) => {\r\n            setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n      }\r\n catch(err)\r\n     {setValues({...values, errorMessage: \"error in uploading photo\"}); }\r\n}\r\nconst updateProfile =()=>{\r\n  accountService.updateProfileSetup(myId,{profileImg: img, langPreference: language})\r\n .then((response) => {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.userData));\r\n          setValues({\r\n            ...values,\r\n            errorMessage: false,\r\n            successMsg: response.successMessage,\r\n            loading: false,\r\n          });\r\n           \r\n        })\r\n         .catch((err) => {\r\n           setValues({ ...values , errorMessage:err.response.data.errorMessage}); \r\n        });\r\n}\r\n \r\n  const ProfilePage = () =>( \r\n  <div className=\"profile-page\">\r\n    \r\n      <div className=\"profile-container\">\r\n          <div className=\"img-holder\">\r\n             <img src={img} className=\"profile-img\"/>\r\n              </div>\r\n             <input type=\"file\" accept=\"image/*\" name=\"image-upload\" id=\"input\" onChange={uploadImage}  />\r\n             <div className=\"label\">\r\n            <label className=\"image-upload\" htmlFor=\"input\">\r\n\t\t\t\t\t\t<i className=\"material-icons\">add_photo_alternate</i>\r\n\t\t\t\t\t\tChoose Profile Photo\r\n\t\t\t\t\t</label>\r\n                 </div> \r\n             <div className=\"label\">   \r\n             <button className=\"take-photo loginbtn\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={()=>setCapturedPic(false)}>\r\n               <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>photo_camera</i>\r\n               Take Photo</button> \r\n              </div>\r\n              <Select\r\n                    style={{ width: 210, padding: \"0.4rem\" }}\r\n                    placeholder=\"Select Language ---\"\r\n                    value={options.find(c => c.value === language)}\r\n                    className={classes.textfield}\r\n                    options={options}\r\n                    onChange={(e) => { \r\n                      setValues({\r\n                        ...values,\r\n                        language:e.value ,\r\n                      });\r\n                      \r\n                    }}\r\n                  />\r\n                   <Button\r\n             style={{ color: grey[50],\r\n              backgroundColor:cyan[600],\r\n              fontWeight:\"bold\", \r\n              borderRadius:\"0.5rem\" , \r\n              marginTop: \"1rem\",\r\n              marginBottom: \"0.8rem\",\r\n              padding: \"0.5rem\",\r\n               }}\r\n            className= \"loginbtn\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={updateProfile}\r\n            \r\n          >\r\n            Update Profile\r\n          </Button>\r\n                   \r\n      </div> \r\n                \r\n  \r\n<div className=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <h3 className=\"modal-title\" id=\"exampleModalLongTitle\">Take Photo</h3>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <div  className=\"webcam-container\">\r\n         <Webcam  \r\n        audio={false}\r\n        height= {200}\r\n       width ={460}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n        </div>\r\n      </div>\r\n       \r\n        {capturedPic ? (<div className=\"modal-footer\"> \r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        </div> ):\r\n        (<div className=\"modal-footer\"> \r\n        <button  className=\"take-photo loginbtn\" onClick ={capture}>\r\n          <i className=\"material-icons\" style ={{marginRight:\"0.2rem\"}}>\r\n            photo_camera</i>Capture photo</button> </div>)\r\n        }\r\n    </div>\r\n  </div>\r\n</div>             \r\n  </div>\r\n)\r\nreturn (<div>\r\n    \r\n    {loading && <LinearBuffer />}\r\n    <Header/>\r\n     <PageTitle name= {\"Update Profile \"}/>\r\n      {errorMessage && (\r\n        <AlertBar type=\"error\" message={errorMessage} autoClose={3000} />\r\n      )}\r\n       {infoMessage && (\r\n        <AlertBar type=\"info\" message={infoMessage} autoClose={8000} />\r\n      )}\r\n      {successMsg && (\r\n        <AlertBar type=\"success\" message={successMsg} autoClose={2500} />\r\n      )}\r\n      {ProfilePage()}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default UpdateProfileSetup;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllContacts.js",["277","278","279"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleContact from \"./SingleContact\";\r\nimport contactService from \"../../../services/contactService\";\r\nimport { Button, Grid ,InputAdornment, TextField} from \"@material-ui/core\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport io from \"socket.io-client\";\r\nimport Header from \"./Header\";\r\nimport { grey } from '@material-ui/core/colors';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst AllContact = ({match}) => {\r\n    const myId=isAuthenticated()._id;\r\n    let userEmail = isAuthenticated().email;\r\n    let history = useHistory()\r\n     const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n    const [contacts, setContacts] = React.useState([]);\r\n    let roomId = useRef()\r\n    let clientSocket1 = useRef()\r\n    roomId.current = '/'+match.params.id\r\n    const {setSocket,roomJoin,messageEvent, friendReq} = useContext(SocketContext);\r\n\r\n    window.onload = () => {\r\n      friendReq()\r\n      messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n    const getData = () => {\r\n   friendService.getSentFriendRequest(myId)\r\n   .then((data)=>{\r\n      localStorage.setItem(\"user\",JSON.stringify(data));})\r\n   .catch((err=>{console.log(err)}))\r\n   }\r\n     \r\n  const getSingleContact = () => {\r\n    contactService.getSingleContact(myId)\r\n    .then((data) => { setContacts(data);})\r\n    .catch((err) => {console.log(err);});\r\n  };\r\n\r\n   useEffect(()=> {\r\n     getData();\r\n     getSingleContact();\r\n }, []);\r\n\r\n   useEffect(()=>{\r\n    //roomJoin(myId)\r\n    //messageEvent()\r\n   },[])\r\n    \r\n   \r\n    return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"Add Friend\"}/>\r\n      <Grid container   style={{display:\"flex\" ,marginTop:\"1.8rem\",justifyContent:\"center\"}}>\r\n          <Grid item xs ={1} md={5}> </Grid>\r\n          <Grid item xs ={10} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search By Name...\"\r\n                variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: grey[600] ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              <Grid item xs ={1} md={4}> </Grid>\r\n            </Grid>\r\n          \r\n         \r\n    \r\n      {\r\n      contacts.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No User Found</div>) \r\n        :(\r\n            <Grid container  style={{marginTop:\"3rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n     \r\n           { contacts.filter((contact)=>{\r\n             if(searchTerm === \"\") return contact\r\n             else if (contact.firstName.toLowerCase().startsWith(searchTerm.toLowerCase()) || contact.lastName.toLowerCase().startsWith(searchTerm.toLowerCase()) )\r\n                return contact\r\n           }).map((contact, index) => {\r\n              return contact._id === myId ? \r\n              <div></div>\r\n                 /* style= {{textAlign: \"center\",padding: \"4rem\"}}>\r\n               Hey <span style ={{fontWeight:\"bold\"}}> {contact.firstName + \" \" + contact.lastName}</span> , All Users are your Friends <Link style ={{ fontWeight:\"normal\"}} to=\"/all-my-friends\" >Click here</Link>\r\n              </div> */\r\n            : <SingleContact key={index} contact={contact} roomId={roomId.current}/>\r\n            } )\r\n          }\r\n           </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         \r\n         \r\n        )\r\n          }\r\n        \r\n        \r\n      )\r\n          <Grid container   style={{display:\"flex\" ,marginBottom:\"2rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n       <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"right\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-friend-requests/'+myId)}> My Friend Requests</Button>\r\n        \r\n        <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n      \r\n    </div> );\r\n}\r\n \r\nexport default AllContact;","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriendRequest.js",["280","281","282"],"import React, { useEffect, useContext, useRef,useState } from \"react\";\r\nimport SingleFriendRequest from \"./SingleFriendRequest\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport io from \"socket.io-client\";\r\n \r\nconst AllFriendRequest = ({match}) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friendreqs, setFrndRequest] =React.useState([]);\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     let userEmail = isAuthenticated().email\r\n     const {setSocket,roomJoin,messageEvent,friendReq} = useContext(SocketContext);\r\n     let roomId = useRef()\r\n     roomId.current = '/'+match.params.id\r\n     let history = useHistory()\r\n\r\n     window.onload = () => {\r\n       friendReq()\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getFriendRequest = () => \r\n     {\r\n      friendService.getFriendRequest(myId).then((data)=>{\r\n                setFrndRequest(data)})\r\n            .catch((err=>{console.log(err)}))\r\n     }\r\n    useEffect(getFriendRequest , []);\r\n\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n   /*  useEffect(()=>{\r\n      if(clientSocket){\r\n        clientSocket.emit(\r\n          \"myChatsRoom\",\r\n          { myChatsRoom : roomId.current},\r\n          ({error,room}) => {\r\n            if (!error) {\r\n              console.log(\"joined room with id\", room);\r\n            } else {\r\n              console.log(\"error joining room\", error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n     },[]) */\r\n\r\n     return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"Friend Requests\"}/>\r\n      <Grid container   style={{display:\"flex\" ,marginTop:\"1.8rem\",justifyContent:\"center\"}}>\r\n          <Grid item xs ={1} md={5}> </Grid>\r\n          <Grid item xs ={10} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search By Name...\"\r\n                variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: grey[600] ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              <Grid item xs ={1} md={4}> </Grid>\r\n            </Grid>\r\n          \r\n  \r\n      {\r\n      friendreqs.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Request</div>) \r\n        :\r\n        (\r\n        <Grid container   style={{marginTop:\"3rem\" }}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n          {\r\n          friendreqs.filter((friendreq)=>{\r\n             if(searchTerm == \"\") return friendreq\r\n             else if (friendreq.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friendreq\r\n           }).map((friendreq, index) => (\r\n               <SingleFriendRequest key={index} friendreq={friendreq} onAcceptReject={getFriendRequest}/> )\r\n          )}\r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         )\r\n         \r\n      }\r\n       <Grid container   style={{display:\"flex\" ,marginBottom:\"2rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n      \r\n <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/all-contacts/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n    </div> );\r\n\r\n}\r\nexport default AllFriendRequest;","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\AllFriends.js",["283","284","285","286","287"],"import React, { useEffect,useRef,useContext,useState } from \"react\";\r\nimport SingleFriend from \"./SingleFriend\";\r\nimport friendService from \"../../../services/friendService\";\r\nimport { Button, Grid,InputAdornment, TextField  } from \"@material-ui/core\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {SocketContext} from '../../../context/SocketContext';\r\nimport {MyChatsContext} from '../../../context/MyChatsContext';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport io from \"socket.io-client\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst AllFriends = (props) => {\r\n     const myId=isAuthenticated()._id;\r\n     const [friends, setFriends] =React.useState([]);\r\n     let history = useHistory()\r\n      const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const onChangeSearch = (event) => \r\n        setSearchTerm(event.currentTarget.value)\r\n     let clientSocket1 = useRef()\r\n     const {setSocket,roomJoin, messageEvent, friendReq} =  useContext(SocketContext);\r\n     let userEmail = useRef()\r\n     userEmail.current = JSON.parse(localStorage.getItem(\"user\")).email\r\n\r\n     window.onload = () => {\r\n       friendReq()\r\n       messageEvent()\r\n      let did = JSON.parse(localStorage.getItem('user'))._id\r\n      roomJoin(did)\r\n      clientSocket1 = io(\"http://127.0.0.1:5000\")\r\n      setSocket((s)=>{\r\n        s = clientSocket1\r\n        s.on('connect' , () => {\r\n          console.log(\"connected\",s.id);\r\n          s.emit(\"adduser\",{id:s.id, name: userEmail.current})\r\n          \r\n        });\r\n        return s;\r\n      })\r\n    };\r\n\r\n     const getAllMyFriends = () => \r\n     {\r\n       friendService.getAllFriends(myId)\r\n        .then((data)=>{\r\n         setFriends(data);})\r\n      .catch((err=>{console.log(err)}))\r\n   \r\n     }\r\n    useEffect(()=>{\r\n\r\n      getAllMyFriends()\r\n      \r\n    }, []);\r\n    useEffect(()=>{\r\n      //roomJoin(myId)\r\n      \r\n     },[])\r\n\r\n     useEffect(()=>{\r\n      //messageEvent()\r\n      \r\n     },[])\r\n\r\n    useEffect(()=>{\r\n      /* if(clientSocket!==null){\r\n        console.log(props.clientSocket)\r\n        clientSocket.emit(\"adduser\",{id:props.clientSocket.id, name: userEmail.current})\r\n      }\r\n      else{\r\n        console.log(\"no socket\")\r\n      }  */\r\n    },[])\r\n\r\n     return ( \r\n    <div>\r\n      <Header/>\r\n      <PageTitle name= {\"My Friends\"}/>\r\n       <Grid container   style={{display:\"flex\" ,marginTop:\"1.8rem\",justifyContent:\"center\"}}>\r\n          <Grid item xs ={1} md={5}> </Grid>\r\n          <Grid item xs ={10} md={4}  >\r\n            <TextField\r\n                value={searchTerm}\r\n                onChange={onChangeSearch}\r\n                placeholder=\"Search By Name...\"\r\n                variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"end\">\r\n             <SearchIcon style={{ color: grey[600] ,marginRight:\"0.4rem\",float:\"right\"}}/>\r\n            </InputAdornment>\r\n          ),\r\n         }}\r\n            />\r\n            </Grid>\r\n              <Grid item xs ={1} md={4}> </Grid>\r\n            </Grid>\r\n          \r\n   \r\n     {\r\n      friends.length === 0 ? \r\n        ( <div style= {{textAlign: \"center\",\r\n    padding: \"6rem\", fontWeight:\"bold\"}}>No Friend Found</div>) \r\n        :\r\n        (\r\n        <Grid container   style={{marginTop:\"3rem\", display :\"flex\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n          {\r\n          friends.filter((friend)=>{\r\n             if(searchTerm == \"\") return friend\r\n             else if (friend.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n                return friend\r\n           }).map((friend, index) => (\r\n               <SingleFriend key={index} friend={friend} onRemove={getAllMyFriends} /> )\r\n          )}\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}   md={3}></Grid>\r\n        </Grid>\r\n         )\r\n         \r\n      }\r\n       <Grid container   style={{display:\"flex\" ,marginBottom:\"2rem\"}}>\r\n          <Grid item xs ={1} md={3}> </Grid>\r\n          <Grid item xs ={10} md={6}>\r\n      \r\n <Button className= \"loginbtn\"\r\n            style={{textTransform:\"capitalize\",float:\"left\"}}\r\n            variant=\"outlined\" \r\n            color=\"Primary\"\r\n            onClick={event =>  history.push('/dashboard/'+myId)}><ArrowBackIcon/> Back\r\n            </Button>\r\n         </Grid>\r\n       <Grid item xs ={1} md={3}> </Grid>\r\n       </Grid>\r\n  \r\n      \r\n \r\n    </div> );\r\n\r\n}\r\nexport default AllFriends;","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\RenderChat.js",["288","289","290","291","292"],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\pageTitle.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\AlertBar.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\ChatService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\ProgressBar.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\UserService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\accountService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\api\\auth.js",["293","294"],"import axios from \"axios\";\naxios.defaults.headers.common[\"x-auth-token\"] =localStorage.getItem(\"token\");\nexport const signup = async (data) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const response = await axios.post(\"http://localhost:5000/api/users/signup\", data);\n  return response;\n};\nexport const login = async (data) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const response = await axios.post(\"http://localhost:5000/api/users/login\", data);\n  return response;\n};\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\auth.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Header.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriend.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\friendService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleFriendRequest.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GenericService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\localStorage.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\clientStorages\\cookies.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\TypeMessage.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\contactService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\SingleContact.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SingleChat.js",["295","296","297","298","299"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport chatservice from \"../../services/ChatService\";\r\nimport userservice from \"../../services/UserService\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport \"./chat.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  subheader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n  },\r\n  globe: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  subheaderText: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  list: {\r\n    maxHeight: \"calc(100vh - 112px)\",\r\n    overflowY: \"auto\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(0, 3, 0, 1),\r\n  },\r\n  listText: {\r\n    fontSize: \"1.5rem\",\r\n    fontFamily: \"Roboto\",\r\n    marginLeft: \"40px\",\r\n   \r\n  },\r\n  listText1: {\r\n    fontSize: \"1.2rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n    marginLeft: \"40px\",\r\n  },\r\n  listTime:{\r\n    fontSize: \"0.7rem\",\r\n    fontFamily: \"Roboto\",\r\n    color: \"gray\",\r\n    marginLeft: \"200px\"\r\n  },\r\n  listBtn: {\r\n    backgroundColor: \"rgb(0, 172, 193)\",\r\n    color: \"white\",\r\n    fontSize: \"1rem\",\r\n  },\r\n  mygrid: {\r\n    marginTop: \"50px\",\r\n    marginLeft: \"350px\",\r\n    width: \"650px\",\r\n  },\r\n  mygrid1: {\r\n    padding: \"20px\",\r\n  },\r\n  img: {\r\n    width: \"4rem\",\r\n    height: \"4rem\",\r\n    borderRadius: \"60px\",\r\n  },\r\n}));\r\nconst SingleChat = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  let elem = null;\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n  let messages = useRef([]);\r\n\r\n  console.log(\"props\",props.lastMsg)\r\n  const recipientClickHandler = (fr, type) => {\r\n    chatservice.getMessagesbyEmail(user.email, fr.email).then((res) => {\r\n      messages.current = res;\r\n      messages.current.map((m) => {\r\n        if (m.type === \"offline\" && m.from !== user.email) {\r\n          chatservice\r\n            .changeMessageType({ type: \"read\" }, m._id)\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err));\r\n        }\r\n        console.log(\"user matched\")\r\n      });\r\n    });\r\n    console.log(\"fr\", fr);\r\n    localStorage.setItem(\"friendId\", fr.id);\r\n    localStorage.setItem(\"recName\", fr.name);\r\n    localStorage.setItem(\"recLang\", fr.lang);\r\n    localStorage.setItem(\"profileUrl\", fr.img);\r\n    history.push(\"/chat/\" + fr.email + \" \" + fr.id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.recipients.map((r, index) => {\r\n        //console.log(\"r:\", r);\r\n        return (\r\n          <Grid xs={6}>\r\n            <ListItem button>\r\n              <ListItemAvatar>\r\n                <img src={r.img} alt='img' className={classes.img} />\r\n              </ListItemAvatar>\r\n              <ListItemText>\r\n                {/*  {setText(r,chatRecipients.lastMsg[index],chatRecipients.msgType[index])}\r\n                {elem}*/\r\n                 }\r\n\r\n                <Typography className={classes.listText}>{r.name}</Typography>\r\n                \r\n                {props.lastMsg.emails.forEach((u, ind) => {\r\n                  //console.log(\"inside for each lastMsg\", u,ind)\r\n                  //console.log(\"inside map:\",props.lastMsg.types[ind])\r\n                  //console.log(\"inside map:\",props.lastMsg.senders[ind])\r\n                   if (u === r.email) {\r\n                    if (props.lastMsg.types[ind] === \"read\") {\r\n                      //console.log(\"in 1\",props.lastMsg.msgs[ind])\r\n                      elem = (\r\n                        <div>\r\n                            <Typography\r\n                              className={classes.listText1}\r\n                              onClick={() =>\r\n                                recipientClickHandler(\r\n                                  r,\r\n                                  props.lastMsg.types[ind],\r\n                                  props.lastMsg.msgId[ind]\r\n                                )\r\n                              }\r\n                            >\r\n                              {props.lastMsg.msgs[ind]}\r\n                              \r\n                            </Typography>\r\n                            <Typography className={classes.listTime}>\r\n                            {props.lastMsg.time[ind]}\r\n                            </Typography>\r\n                        </div>\r\n                        \r\n                      );\r\n                    } else if (props.lastMsg.types[ind] === \"unread\") {\r\n                      //console.log(\"in 2\")\r\n                      elem = (\r\n                        <div>\r\n                        <Typography\r\n                          style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                          className={classes.listText1}\r\n                          onClick={() =>\r\n                            recipientClickHandler(\r\n                              r,\r\n                              props.lastMsg.types[ind],\r\n                              props.lastMsg.msgId[ind]\r\n                            )\r\n                          }\r\n                        >\r\n                          {props.lastMsg.msgs[ind]}\r\n                        </Typography>\r\n                        <Typography className={classes.listTime}>\r\n                            {props.lastMsg.time[ind]}\r\n                        </Typography>\r\n                        </div>\r\n                      );\r\n                    } else if (\r\n                      props.lastMsg.types[ind] === \"offline\" &&\r\n                      props.lastMsg.senders[ind] !== user.email\r\n                    ) {\r\n                      //console.log(\"in 3\")\r\n                      elem = (\r\n                        <div>\r\n                        <Typography\r\n                          style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                          className={classes.listText1}\r\n                          onClick={() =>\r\n                            recipientClickHandler(\r\n                              r,\r\n                              props.lastMsg.types[ind]\r\n                            )\r\n                          }\r\n                        >\r\n                          {props.lastMsg.msgs[ind]}\r\n                        </Typography>\r\n                        <Typography className={classes.listTime}>\r\n                            {props.lastMsg.time[ind]}\r\n                        </Typography>\r\n                        </div>\r\n                        \r\n                      );\r\n                    } else {\r\n                      console.log(\"in nothing\", props.lastMsg.types[ind]);\r\n                      elem = (\r\n                        <div>\r\n                          <Typography\r\n                            className={classes.listText1}\r\n                            onClick={() =>\r\n                              recipientClickHandler(\r\n                                r,\r\n                                props.lastMsg.types[ind],\r\n                              )\r\n                            }\r\n                          >\r\n                            {props.lastMsg.msgs[ind]}\r\n                          </Typography>\r\n                          <Typography className={classes.listTime}>\r\n                              {props.lastMsg.time[ind]}\r\n                          </Typography>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  }\r\n                })}\r\n\r\n                {elem}\r\n              </ListItemText>\r\n              <Divider />\r\n            </ListItem>\r\n            <Divider />\r\n          </Grid>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default SingleChat;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\ChatComponents\\SettingMessage.js",["300","301"],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\services\\GroupService.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\context\\ChatContext.js",["302","303","304","305","306","307","308"],"import React ,{createContext, useEffect} from 'react'\r\nimport chatservice from '../services/ChatService'\r\nimport {showNotification} from '../components/FrontendComponents/Alerts/showMessage'\r\nimport Notification from '../components/FrontendComponents/Alerts/Notification'\r\nimport { toast } from 'react-toastify';\r\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({userId,setMsg,children}) =>{\r\n    let elem = null\r\n    let msg = ''\r\n    useEffect(()=>{\r\n        getUnreadMsgs(userId)\r\n    },[userId])\r\n    const getUnreadMsgs =(email)=>{\r\n        chatservice.offlinemessages(email)\r\n        .then((res)=>{\r\n            if(res.count > 0){\r\n                console.log(\"count\",res.count)\r\n                msg = 'You have '+res.count+ ' new messages!'\r\n                /* elem = (\r\n                    <Notification msg = {msg}/>\r\n                ) */\r\n                //setMsg(msg)\r\n                if(res.info.sender[0] !== userId){\r\n                    console.log(\"sender\",res.info.sender)\r\n                    console.log(\"user\",userId)\r\n                toast.info(msg,{\r\n                position: toast.POSITION.TOP_LEFT,\r\n                transition: Zoom\r\n            })\r\n                }\r\n                else{\r\n                    console.log(\"is sender\")\r\n                }\r\n        \r\n            }\r\n        })\r\n        .catch((err)=>console.log(err))\r\n    }\r\n    \r\n    return (\r\n        <ChatContext.Provider value = {{getUnreadMsgs: getUnreadMsgs}}>\r\n        \r\n            {children}\r\n        </ChatContext.Provider>\r\n    );\r\n}\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\showMessage.js",[],"C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\Alerts\\Notification.js",["309"],"import React from \"react\";\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst Notification = ({msg}) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  \r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {console.log(\"not your friend\")}\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Modal title\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography gutterBottom>\r\n           {msg}\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n};\r\nexport default Notification;\r\n","C:\\Users\\Zenia Kiki\\Desktop\\TalkSee_Backend\\frontend\\myfrontend\\src\\components\\FrontendComponents\\components\\Profile.js",["310","311","312","313","314","315","316","317","318","319"],"import React, { useState, useEffect,useContext } from \"react\";\r\nimport AlertBar from \"../Alerts/AlertBar\";\r\nimport LinearBuffer from \"../Alerts/ProgressBar\";\r\nimport PageTitle from \"./pageTitle\";\r\nimport Select from \"react-select\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport { grey, cyan,lightBlue} from '@material-ui/core/colors';\r\nimport {Button} from \"@material-ui/core\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from \"react-webcam\";\r\nimport { SocketContext } from \"../../../context/SocketContext\";\r\nimport { isAuthenticated } from \"../clientStorages/auth\";\r\nimport friendService from \"../../../services/friendService\";\r\nconst useStyles = makeStyles({\r\n  \r\n  textfield: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  Submitbtn: {\r\n    marginTop: \"0.6rem\",\r\n  },\r\n});\r\n\r\n\r\nconst Profile = ( {match}) => {\r\n     console.log(match.params.id)\r\n     const contactId = match.params.id\r\n     const roomId = '/'+contactId\r\n    const myId=isAuthenticated()._id;\r\n    const myName =isAuthenticated().firstName + \" \" +isAuthenticated().lastName;\r\n    var userData=JSON.parse(localStorage.getItem(\"user\")) \r\n    const [showAddBtn, setAddBtn]=useState(userData.sentRequests.includes(contactId)?false:true)\r\n    const myProfileImg =isAuthenticated().profileImg;\r\n    const myEmail =isAuthenticated().email;\r\n    const myGender =isAuthenticated().gender;\r\n    const myLangPreference =isAuthenticated().langPreference;\r\n    const { clientSocket } = useContext(SocketContext);\r\n    //console.log(\"Props \",props.match)\r\n    const sentFriendRequest=() => {\r\n        console.log(\"contact Id\",contactId)\r\n        friendService.sendRequest(\r\n            {friendId:contactId,\r\n            myId,myName,myProfileImg,myEmail,myGender,myLangPreference})\r\n         .then((data) => {\r\n           localStorage.setItem(\"user\",JSON.stringify(data));\r\n              // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(false)\r\n            \r\n            })\r\n         .catch((err) => {console.log(err);});\r\n\r\n         clientSocket.emit(\r\n            \"friendRequest\",\r\n            { myName,roomId },\r\n            (err) => {\r\n              if (!err) console.log(\"emitted event\");\r\n              else console.log(err);\r\n            }\r\n          );\r\n    }\r\n     const cancelFriendRequest=()=>{\r\n         \r\n        friendService.cancelRequest(\r\n            {friendId:contactId,myId})\r\n         .then((data) => {\r\n             localStorage.setItem(\"user\",JSON.stringify(data));\r\n            // dispatch({type:\"FRIEND_REQUESTED\",payload:{sentRequests:data.sentRequests }})\r\n             setAddBtn(true)\r\n             \r\n         })\r\n         .catch((err) => {console.log(err);});\r\n    }\r\n    \r\nreturn (\r\n    <div>\r\n        {showAddBtn ?  \r\n         <Button className= \"loginbtn\"\r\n             style={{display:\"inline-block\"  ,position:\"relative\",float:\"right\",marginTop:\"1rem\", backgroundColor:lightBlue[600],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={sentFriendRequest}>Add friend</Button>\r\n        : \r\n        <Button className= \"loginbtn\"\r\n              style={{display:\"inline-block\" ,position:\"relative\",float:\"right\" ,marginTop:\"1rem\", backgroundColor:grey[500],color:\"white\"}}\r\n            variant=\"contained\" \r\n            onClick={cancelFriendRequest}>Requested</Button> \r\n             }\r\n    \r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Profile;\r\n",{"ruleId":"320","severity":1,"message":"321","line":3,"column":10,"nodeType":"322","messageId":"323","endLine":3,"endColumn":19},{"ruleId":"320","severity":1,"message":"324","line":4,"column":8,"nodeType":"322","messageId":"323","endLine":4,"endColumn":13},{"ruleId":"320","severity":1,"message":"325","line":10,"column":10,"nodeType":"322","messageId":"323","endLine":10,"endColumn":18},{"ruleId":"320","severity":1,"message":"326","line":11,"column":10,"nodeType":"322","messageId":"323","endLine":11,"endColumn":21},{"ruleId":"327","replacedBy":"328"},{"ruleId":"329","replacedBy":"330"},{"ruleId":"320","severity":1,"message":"331","line":18,"column":8,"nodeType":"322","messageId":"323","endLine":18,"endColumn":13},{"ruleId":"320","severity":1,"message":"321","line":26,"column":19,"nodeType":"322","messageId":"323","endLine":26,"endColumn":28},{"ruleId":"320","severity":1,"message":"332","line":26,"column":30,"nodeType":"322","messageId":"323","endLine":26,"endColumn":40},{"ruleId":"320","severity":1,"message":"333","line":4,"column":10,"nodeType":"322","messageId":"323","endLine":4,"endColumn":15},{"ruleId":"320","severity":1,"message":"334","line":4,"column":17,"nodeType":"322","messageId":"323","endLine":4,"endColumn":21},{"ruleId":"320","severity":1,"message":"335","line":4,"column":23,"nodeType":"322","messageId":"323","endLine":4,"endColumn":27},{"ruleId":"320","severity":1,"message":"336","line":11,"column":7,"nodeType":"322","messageId":"323","endLine":11,"endColumn":12},{"ruleId":"337","severity":1,"message":"338","line":30,"column":5,"nodeType":"339","endLine":30,"endColumn":7,"suggestions":"340"},{"ruleId":"320","severity":1,"message":"341","line":1,"column":31,"nodeType":"322","messageId":"323","endLine":1,"endColumn":37},{"ruleId":"320","severity":1,"message":"342","line":4,"column":16,"nodeType":"322","messageId":"323","endLine":4,"endColumn":22},{"ruleId":"337","severity":1,"message":"343","line":23,"column":7,"nodeType":"339","endLine":23,"endColumn":15,"suggestions":"344"},{"ruleId":"345","severity":1,"message":"346","line":45,"column":45,"nodeType":"347","messageId":"348","endLine":45,"endColumn":47},{"ruleId":"320","severity":1,"message":"349","line":19,"column":32,"nodeType":"322","messageId":"323","endLine":19,"endColumn":37},{"ruleId":"337","severity":1,"message":"350","line":46,"column":9,"nodeType":"339","endLine":46,"endColumn":23,"suggestions":"351"},{"ruleId":"320","severity":1,"message":"352","line":27,"column":8,"nodeType":"322","messageId":"323","endLine":27,"endColumn":10},{"ruleId":"320","severity":1,"message":"353","line":47,"column":10,"nodeType":"322","messageId":"323","endLine":47,"endColumn":19},{"ruleId":"320","severity":1,"message":"354","line":47,"column":20,"nodeType":"322","messageId":"323","endLine":47,"endColumn":28},{"ruleId":"320","severity":1,"message":"355","line":48,"column":7,"nodeType":"322","messageId":"323","endLine":48,"endColumn":11},{"ruleId":"320","severity":1,"message":"356","line":49,"column":7,"nodeType":"322","messageId":"323","endLine":49,"endColumn":20},{"ruleId":"337","severity":1,"message":"357","line":77,"column":5,"nodeType":"339","endLine":77,"endColumn":7,"suggestions":"358"},{"ruleId":"337","severity":1,"message":"359","line":65,"column":8,"nodeType":"339","endLine":65,"endColumn":10,"suggestions":"360"},{"ruleId":"320","severity":1,"message":"361","line":6,"column":8,"nodeType":"322","messageId":"323","endLine":6,"endColumn":17},{"ruleId":"320","severity":1,"message":"362","line":19,"column":10,"nodeType":"322","messageId":"323","endLine":19,"endColumn":25},{"ruleId":"320","severity":1,"message":"363","line":64,"column":10,"nodeType":"322","messageId":"323","endLine":64,"endColumn":17},{"ruleId":"320","severity":1,"message":"364","line":64,"column":19,"nodeType":"322","messageId":"323","endLine":64,"endColumn":29},{"ruleId":"320","severity":1,"message":"365","line":65,"column":10,"nodeType":"322","messageId":"323","endLine":65,"endColumn":14},{"ruleId":"337","severity":1,"message":"366","line":93,"column":5,"nodeType":"339","endLine":93,"endColumn":7,"suggestions":"367"},{"ruleId":"320","severity":1,"message":"368","line":112,"column":11,"nodeType":"322","messageId":"323","endLine":112,"endColumn":22},{"ruleId":"320","severity":1,"message":"369","line":116,"column":11,"nodeType":"322","messageId":"323","endLine":116,"endColumn":25},{"ruleId":"320","severity":1,"message":"370","line":124,"column":11,"nodeType":"322","messageId":"323","endLine":124,"endColumn":22},{"ruleId":"371","severity":1,"message":"372","line":133,"column":44,"nodeType":"373","messageId":"374","endLine":133,"endColumn":45},{"ruleId":"320","severity":1,"message":"375","line":142,"column":11,"nodeType":"322","messageId":"323","endLine":142,"endColumn":22},{"ruleId":"320","severity":1,"message":"376","line":2,"column":10,"nodeType":"322","messageId":"323","endLine":2,"endColumn":24},{"ruleId":"320","severity":1,"message":"377","line":25,"column":7,"nodeType":"322","messageId":"323","endLine":25,"endColumn":14},{"ruleId":"320","severity":1,"message":"378","line":43,"column":7,"nodeType":"322","messageId":"323","endLine":43,"endColumn":17},{"ruleId":"320","severity":1,"message":"379","line":46,"column":7,"nodeType":"322","messageId":"323","endLine":46,"endColumn":14},{"ruleId":"320","severity":1,"message":"380","line":47,"column":7,"nodeType":"322","messageId":"323","endLine":47,"endColumn":12},{"ruleId":"337","severity":1,"message":"381","line":172,"column":6,"nodeType":"339","endLine":172,"endColumn":8,"suggestions":"382"},{"ruleId":"337","severity":1,"message":"383","line":182,"column":5,"nodeType":"339","endLine":182,"endColumn":7,"suggestions":"384"},{"ruleId":"337","severity":1,"message":"385","line":226,"column":6,"nodeType":"339","endLine":226,"endColumn":15,"suggestions":"386"},{"ruleId":"320","severity":1,"message":"387","line":3,"column":8,"nodeType":"322","messageId":"323","endLine":3,"endColumn":19},{"ruleId":"320","severity":1,"message":"324","line":8,"column":8,"nodeType":"322","messageId":"323","endLine":8,"endColumn":13},{"ruleId":"320","severity":1,"message":"388","line":26,"column":7,"nodeType":"322","messageId":"323","endLine":26,"endColumn":17},{"ruleId":"337","severity":1,"message":"338","line":40,"column":6,"nodeType":"339","endLine":40,"endColumn":8,"suggestions":"389"},{"ruleId":"345","severity":1,"message":"346","line":55,"column":43,"nodeType":"347","messageId":"348","endLine":55,"endColumn":45},{"ruleId":"337","severity":1,"message":"390","line":78,"column":6,"nodeType":"339","endLine":78,"endColumn":8,"suggestions":"391"},{"ruleId":"337","severity":1,"message":"392","line":114,"column":6,"nodeType":"339","endLine":114,"endColumn":8,"suggestions":"393"},{"ruleId":"320","severity":1,"message":"394","line":118,"column":9,"nodeType":"322","messageId":"323","endLine":118,"endColumn":13},{"ruleId":"337","severity":1,"message":"395","line":202,"column":4,"nodeType":"339","endLine":202,"endColumn":16,"suggestions":"396"},{"ruleId":"320","severity":1,"message":"397","line":9,"column":9,"nodeType":"322","messageId":"323","endLine":9,"endColumn":20},{"ruleId":"320","severity":1,"message":"398","line":20,"column":10,"nodeType":"322","messageId":"323","endLine":20,"endColumn":15},{"ruleId":"320","severity":1,"message":"399","line":21,"column":10,"nodeType":"322","messageId":"323","endLine":21,"endColumn":15},{"ruleId":"320","severity":1,"message":"400","line":32,"column":7,"nodeType":"322","messageId":"323","endLine":32,"endColumn":11},{"ruleId":"337","severity":1,"message":"401","line":71,"column":5,"nodeType":"339","endLine":71,"endColumn":7,"suggestions":"402"},{"ruleId":"337","severity":1,"message":"403","line":78,"column":6,"nodeType":"339","endLine":78,"endColumn":8,"suggestions":"404"},{"ruleId":"337","severity":1,"message":"383","line":88,"column":6,"nodeType":"339","endLine":88,"endColumn":8,"suggestions":"405"},{"ruleId":"337","severity":1,"message":"406","line":94,"column":6,"nodeType":"339","endLine":94,"endColumn":8,"suggestions":"407"},{"ruleId":"337","severity":1,"message":"408","line":98,"column":5,"nodeType":"339","endLine":98,"endColumn":7,"suggestions":"409"},{"ruleId":"337","severity":1,"message":"359","line":155,"column":8,"nodeType":"339","endLine":155,"endColumn":10,"suggestions":"410"},{"ruleId":"337","severity":1,"message":"411","line":185,"column":5,"nodeType":"339","endLine":185,"endColumn":16,"suggestions":"412"},{"ruleId":"413","severity":1,"message":"414","line":234,"column":14,"nodeType":"415","endLine":234,"endColumn":54},{"ruleId":"337","severity":1,"message":"416","line":180,"column":6,"nodeType":"339","endLine":180,"endColumn":8,"suggestions":"417"},{"ruleId":"337","severity":1,"message":"411","line":212,"column":5,"nodeType":"339","endLine":212,"endColumn":16,"suggestions":"418"},{"ruleId":"419","severity":1,"message":"420","line":219,"column":53,"nodeType":"421","messageId":"422","endLine":219,"endColumn":54,"fix":"423"},{"ruleId":"413","severity":1,"message":"414","line":262,"column":14,"nodeType":"415","endLine":262,"endColumn":54},{"ruleId":"320","severity":1,"message":"424","line":8,"column":10,"nodeType":"322","messageId":"323","endLine":8,"endColumn":14},{"ruleId":"337","severity":1,"message":"425","line":62,"column":5,"nodeType":"339","endLine":62,"endColumn":7,"suggestions":"426"},{"ruleId":"345","severity":1,"message":"427","line":105,"column":39,"nodeType":"347","messageId":"428","endLine":105,"endColumn":41},{"ruleId":"337","severity":1,"message":"429","line":51,"column":34,"nodeType":"339","endLine":51,"endColumn":36,"suggestions":"430"},{"ruleId":"345","severity":1,"message":"427","line":109,"column":40,"nodeType":"347","messageId":"428","endLine":109,"endColumn":42},{"ruleId":"431","severity":1,"message":"432","line":110,"column":28,"nodeType":"373","messageId":"433","endLine":110,"endColumn":30},{"ruleId":"320","severity":1,"message":"434","line":9,"column":8,"nodeType":"322","messageId":"323","endLine":9,"endColumn":21},{"ruleId":"320","severity":1,"message":"376","line":11,"column":9,"nodeType":"322","messageId":"323","endLine":11,"endColumn":23},{"ruleId":"337","severity":1,"message":"435","line":58,"column":8,"nodeType":"339","endLine":58,"endColumn":10,"suggestions":"436"},{"ruleId":"345","severity":1,"message":"427","line":114,"column":34,"nodeType":"347","messageId":"428","endLine":114,"endColumn":36},{"ruleId":"431","severity":1,"message":"432","line":115,"column":28,"nodeType":"373","messageId":"433","endLine":115,"endColumn":30},{"ruleId":"320","severity":1,"message":"341","line":2,"column":38,"nodeType":"322","messageId":"323","endLine":2,"endColumn":44},{"ruleId":"320","severity":1,"message":"437","line":15,"column":9,"nodeType":"322","messageId":"323","endLine":15,"endColumn":13},{"ruleId":"320","severity":1,"message":"438","line":16,"column":10,"nodeType":"322","messageId":"323","endLine":16,"endColumn":16},{"ruleId":"345","severity":1,"message":"346","line":34,"column":36,"nodeType":"347","messageId":"348","endLine":34,"endColumn":38},{"ruleId":"320","severity":1,"message":"439","line":71,"column":9,"nodeType":"322","messageId":"323","endLine":71,"endColumn":15},{"ruleId":"320","severity":1,"message":"440","line":4,"column":9,"nodeType":"322","messageId":"323","endLine":4,"endColumn":15},{"ruleId":"320","severity":1,"message":"440","line":13,"column":9,"nodeType":"322","messageId":"323","endLine":13,"endColumn":15},{"ruleId":"320","severity":1,"message":"321","line":1,"column":17,"nodeType":"322","messageId":"323","endLine":1,"endColumn":26},{"ruleId":"320","severity":1,"message":"441","line":1,"column":36,"nodeType":"322","messageId":"323","endLine":1,"endColumn":44},{"ruleId":"320","severity":1,"message":"387","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":19},{"ruleId":"320","severity":1,"message":"442","line":13,"column":8,"nodeType":"322","messageId":"323","endLine":13,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":84,"column":32,"nodeType":"347","messageId":"348","endLine":84,"endColumn":34},{"ruleId":"320","severity":1,"message":"443","line":8,"column":10,"nodeType":"322","messageId":"323","endLine":8,"endColumn":17},{"ruleId":"337","severity":1,"message":"444","line":142,"column":6,"nodeType":"339","endLine":142,"endColumn":16,"suggestions":"445"},{"ruleId":"320","severity":1,"message":"446","line":3,"column":9,"nodeType":"322","messageId":"323","endLine":3,"endColumn":25},{"ruleId":"320","severity":1,"message":"447","line":4,"column":8,"nodeType":"322","messageId":"323","endLine":4,"endColumn":20},{"ruleId":"320","severity":1,"message":"333","line":6,"column":10,"nodeType":"322","messageId":"323","endLine":6,"endColumn":15},{"ruleId":"320","severity":1,"message":"335","line":6,"column":23,"nodeType":"322","messageId":"323","endLine":6,"endColumn":27},{"ruleId":"320","severity":1,"message":"448","line":6,"column":29,"nodeType":"322","messageId":"323","endLine":6,"endColumn":35},{"ruleId":"320","severity":1,"message":"400","line":10,"column":9,"nodeType":"322","messageId":"323","endLine":10,"endColumn":13},{"ruleId":"337","severity":1,"message":"449","line":14,"column":7,"nodeType":"339","endLine":14,"endColumn":15,"suggestions":"450"},{"ruleId":"320","severity":1,"message":"451","line":2,"column":8,"nodeType":"322","messageId":"323","endLine":2,"endColumn":13},{"ruleId":"320","severity":1,"message":"321","line":1,"column":27,"nodeType":"322","messageId":"323","endLine":1,"endColumn":36},{"ruleId":"320","severity":1,"message":"452","line":2,"column":8,"nodeType":"322","messageId":"323","endLine":2,"endColumn":16},{"ruleId":"320","severity":1,"message":"453","line":3,"column":8,"nodeType":"322","messageId":"323","endLine":3,"endColumn":20},{"ruleId":"320","severity":1,"message":"454","line":4,"column":8,"nodeType":"322","messageId":"323","endLine":4,"endColumn":17},{"ruleId":"320","severity":1,"message":"455","line":5,"column":8,"nodeType":"322","messageId":"323","endLine":5,"endColumn":14},{"ruleId":"320","severity":1,"message":"456","line":7,"column":8,"nodeType":"322","messageId":"323","endLine":7,"endColumn":15},{"ruleId":"320","severity":1,"message":"457","line":8,"column":16,"nodeType":"322","messageId":"323","endLine":8,"endColumn":20},{"ruleId":"320","severity":1,"message":"458","line":10,"column":10,"nodeType":"322","messageId":"323","endLine":10,"endColumn":20},{"ruleId":"320","severity":1,"message":"459","line":11,"column":8,"nodeType":"322","messageId":"323","endLine":11,"endColumn":14},{"ruleId":"320","severity":1,"message":"460","line":15,"column":7,"nodeType":"322","messageId":"323","endLine":15,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Provider' is defined but never used.","'createStore' is defined but never used.","no-native-reassign",["461"],"no-negated-in-lhs",["462"],"'Users' is defined but never used.","'useContext' is defined but never used.","'Slide' is defined but never used.","'Zoom' is defined but never used.","'Flip' is defined but never used.","'count' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["463"],"'useRef' is defined but never used.","'uuidv4' is defined but never used.","React Hook useEffect has a missing dependency: 'getRecData'. Either include it or remove the dependency array.",["464"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["465"],"'io' is defined but never used.","'setSocket' is assigned a value but never used.","'roomJoin' is assigned a value but never used.","'user' is assigned a value but never used.","'clientSocket1' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'friendReq'. Either include it or remove the dependency array.",["466"],"React Hook useEffect has missing dependencies: 'match.params.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["467"],"'TextField' is defined but never used.","'isAuthenticated' is defined but never used.","'newUser' is assigned a value but never used.","'setNewUser' is assigned a value but never used.","'show' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientSocket' and 'getData'. Either include them or remove the dependency array.",["468"],"'showButtons' is assigned a value but never used.","'addGroupMember' is assigned a value but never used.","'createGroup' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'nameHandler' is assigned a value but never used.","'MyChatsContext' is defined but never used.","'history' is assigned a value but never used.","'notPresent' is assigned a value but never used.","'recMsgs' is assigned a value but never used.","'dummy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientSocket', 'getRecData', and 'uId'. Either include them or remove the dependency array.",["469"],"React Hook useEffect has a missing dependency: 'clientSocket'. Either include it or remove the dependency array.",["470"],"React Hook useEffect has missing dependencies: 'lastMsg', 'setNewRecipient', 'setRecArray', and 'usersData'. Either include them or remove the dependency array.",["471"],"'userservice' is defined but never used.","'returndata' is defined but never used.",["472"],"React Hook useEffect has missing dependencies: 'getData' and 'us._id'. Either include them or remove the dependency array.",["473"],"React Hook useEffect has missing dependencies: 'clientSocket' and 'count'. Either include them or remove the dependency array.",["474"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chat.messages'. Either include it or remove the dependency array.",["475"],"'ChatContext' is defined but never used.","'Fname' is assigned a value but never used.","'Lname' is assigned a value but never used.","'elem' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'obj'. Either include it or remove the dependency array.",["476"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["477"],["478"],"React Hook useEffect has a missing dependency: 'messageEvent'. Either include it or remove the dependency array.",["479"],"React Hook useEffect has missing dependencies: 'myId' and 'roomJoin'. Either include them or remove the dependency array.",["480"],["481"],"React Hook React.useCallback has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["482"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'myId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["483"],["484"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"485","text":"486"},"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getData' and 'getSingleContact'. Either include them or remove the dependency array.",["487"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'myId'. Either include it or remove the dependency array.",["488"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","'PersonAddIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllMyFriends'. Either include it or remove the dependency array.",["489"],"'Grid' is defined but never used.","'Search' is defined but never used.","'imgUrl' is assigned a value but never used.","'config' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'checked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["490"],"'showNotification' is defined but never used.","'Notification' is defined but never used.","'Bounce' is defined but never used.","React Hook useEffect has a missing dependency: 'getUnreadMsgs'. Either include it or remove the dependency array.",["491"],"'Toast' is defined but never used.","'AlertBar' is defined but never used.","'LinearBuffer' is defined but never used.","'PageTitle' is defined but never used.","'Select' is defined but never used.","'Resizer' is defined but never used.","'cyan' is defined but never used.","'useHistory' is defined but never used.","'Webcam' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"492","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"506","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"500","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"527","fix":"531"},[7480,7494],"\r\n           .",{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},{"desc":"540","fix":"541"},"Update the dependencies array to be: [id]",{"range":"542","text":"543"},"Update the dependencies array to be: [getRecData, userId]",{"range":"544","text":"545"},"Update the dependencies array to be: [formData, match.params]",{"range":"546","text":"547"},"Update the dependencies array to be: [friendReq]",{"range":"548","text":"549"},"Update the dependencies array to be: [match.params.token, values]",{"range":"550","text":"551"},"Update the dependencies array to be: [clientSocket, getData]",{"range":"552","text":"553"},"Update the dependencies array to be: [clientSocket, getRecData, uId]",{"range":"554","text":"555"},"Update the dependencies array to be: [clientSocket]",{"range":"556","text":"557"},"Update the dependencies array to be: [lastMsg, payload, setNewRecipient, setRecArray, usersData]",{"range":"558","text":"559"},{"range":"560","text":"543"},"Update the dependencies array to be: [getData, us._id]",{"range":"561","text":"562"},"Update the dependencies array to be: [clientSocket, count]",{"range":"563","text":"564"},"Update the dependencies array to be: [chat.messages, searchTerm]",{"range":"565","text":"566"},"Update the dependencies array to be: [obj]",{"range":"567","text":"568"},"Update the dependencies array to be: [history]",{"range":"569","text":"570"},{"range":"571","text":"557"},"Update the dependencies array to be: [messageEvent]",{"range":"572","text":"573"},"Update the dependencies array to be: [myId, roomJoin]",{"range":"574","text":"575"},{"range":"576","text":"551"},"Update the dependencies array to be: [values]",{"range":"577","text":"578"},"Update the dependencies array to be: [myId, values]",{"range":"579","text":"580"},{"range":"581","text":"578"},"Update the dependencies array to be: [getData, getSingleContact]",{"range":"582","text":"583"},"Update the dependencies array to be: [myId]",{"range":"584","text":"585"},"Update the dependencies array to be: [getAllMyFriends]",{"range":"586","text":"587"},"Update the dependencies array to be: [messages, props]",{"range":"588","text":"589"},"Update the dependencies array to be: [getUnreadMsgs, userId]",{"range":"590","text":"591"},[854,856],"[id]",[747,755],"[getRecData, userId]",[1648,1662],"[formData, match.params]",[2283,2285],"[friendReq]",[1681,1683],"[match.params.token, values]",[3027,3029],"[clientSocket, getData]",[5878,5880],"[clientSocket, getRecData, uId]",[6074,6076],"[clientSocket]",[7550,7559],"[lastMsg, payload, setNewRecipient, setRecArray, usersData]",[1761,1763],[2811,2813],"[getData, us._id]",[3880,3882],"[clientSocket, count]",[6302,6314],"[chat.messages, searchTerm]",[2478,2480],"[obj]",[2669,2671],"[history]",[2922,2924],[3043,3045],"[messageEvent]",[3096,3098],"[myId, roomJoin]",[5157,5159],[6381,6392],"[values]",[5960,5962],"[myId, values]",[7229,7240],[2210,2212],"[getData, getSingleContact]",[1968,1970],"[myId]",[2076,2078],"[getAllMyFriends]",[3961,3971],"[messages, props]",[586,594],"[getUnreadMsgs, userId]"]